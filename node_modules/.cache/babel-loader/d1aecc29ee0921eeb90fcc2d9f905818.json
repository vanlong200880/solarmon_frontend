{"ast":null,"code":"import SummaryGroupJsx from './SummaryGroup.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport MainProjectService from '../../../../../../services/MainProjectService';\n\nclass SummaryGroup extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      curItem: {},\n      searchParam: this.props.searchParam,\n      chartOption: {}\n    };\n    this.jsxTemplate = SummaryGroupJsx;\n  }\n\n  componentDidMount() {\n    this.getListPlantSummary();\n  }\n  /**\n   * get list\n   * @author Long.Pham 2019-06-03\n   */\n\n\n  getListPlantSummary() {\n    let self = this;\n    let params = this.state.searchParam;\n    params.id_language = this.employee.id_language;\n    params.id_employee = this.employee.id_employee;\n    var chartOption = {\n      credits: {\n        enabled: false\n      },\n      exporting: {\n        enabled: true\n      },\n      chart: {\n        zoomType: 'xy'\n      },\n      title: {\n        text: ''\n      },\n      colors: ['#66bc51', '#f5893b', '#004ec3'],\n      xAxis: [{\n        categories: [],\n        crosshair: true\n      }],\n      yAxis: [{\n        title: {\n          text: 'Today (kWh)'\n        }\n      }, {\n        title: {\n          text: 'Lifetime (kWh)'\n        },\n        opposite: true\n      }],\n      tooltip: {\n        shared: true\n      },\n      legend: {\n        layout: 'horizontal',\n        align: 'center',\n        verticalAlign: 'top',\n        borderWidth: 0,\n        showInLegend: false\n      },\n      series: []\n    };\n    var seriesData1 = [],\n        seriesData2 = [];\n    var categories = [];\n    var series = [];\n    MainProjectService.instance.getListPlantSummary(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        for (var i = 0; i < data.length; i++) {\n          seriesData1.push(data[i].energy_today);\n          seriesData2.push(data[i].lifetime);\n          categories.push(data[i].name);\n        }\n\n        series.push({\n          name: \"Today's Production\",\n          type: 'column',\n          data: seriesData1,\n          tooltip: {\n            valueSuffix: ' kWh'\n          }\n        });\n        series.push({\n          name: 'Total Production',\n          type: 'spline',\n          yAxis: 1,\n          data: seriesData2,\n          tooltip: {\n            valueSuffix: ' kWh'\n          }\n        });\n        chartOption.series = series;\n        chartOption.xAxis[0].categories = categories;\n        self.setState({\n          dataListSummary: data,\n          chartOption: chartOption\n        });\n      } else {\n        self.setState({\n          dataList: [],\n          chartOption: {}\n        });\n      }\n    });\n  }\n\n  render() {\n    return this.jsxTemplate.call(this);\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(SummaryGroup);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/desktop/ModulePrivate/Dashboard/SummaryGroup/SummaryGroup.js"],"names":["SummaryGroupJsx","BaseComponent","Libs","withTranslation","MainProjectService","SummaryGroup","constructor","props","context","state","curItem","searchParam","chartOption","jsxTemplate","componentDidMount","getListPlantSummary","self","params","id_language","employee","id_employee","credits","enabled","exporting","chart","zoomType","title","text","colors","xAxis","categories","crosshair","yAxis","opposite","tooltip","shared","legend","layout","align","verticalAlign","borderWidth","showInLegend","series","seriesData1","seriesData2","instance","data","total_row","isArrayData","i","length","push","energy_today","lifetime","name","type","valueSuffix","setState","dataListSummary","dataList","render","call","HighOrderComponentTranslated"],"mappings":"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","sourcesContent":["import SummaryGroupJsx from './SummaryGroup.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport MainProjectService from '../../../../../../services/MainProjectService';\n\nclass SummaryGroup extends BaseComponent {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            curItem: {},\n            searchParam: this.props.searchParam,\n            chartOption: {}\n        };\n\n        this.jsxTemplate = SummaryGroupJsx;\n    }\n\n    componentDidMount() {\n        this.getListPlantSummary();\n    }\n\n    /**\n     * get list\n     * @author Long.Pham 2019-06-03\n     */\n    getListPlantSummary() {\n        let self = this;\n        let params = this.state.searchParam;\n        params.id_language = this.employee.id_language;\n        params.id_employee = this.employee.id_employee;\n        var chartOption = {\n            credits: { enabled: false },\n            exporting: { enabled: true },\n            chart: {\n                zoomType: 'xy'\n            },\n            title: {\n                text: ''\n            },\n\n            colors: ['#66bc51', '#f5893b', '#004ec3'],\n            xAxis: [{\n                categories: [],\n                crosshair: true\n            }],\n            yAxis: [{\n                title: {\n                    text: 'Today (kWh)'\n                }\n            }, {\n                title: {\n                    text: 'Lifetime (kWh)',\n                },\n                opposite: true\n            }],\n            tooltip: {\n                shared: true\n            },\n            legend: {\n                layout: 'horizontal',\n                align: 'center',\n                verticalAlign: 'top',\n                borderWidth: 0,\n                showInLegend: false\n            },\n\n\n            series: [],\n        };\n        var seriesData1 = [], seriesData2 = [];\n        var categories = [];\n        var series = [];\n        MainProjectService.instance.getListPlantSummary(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                for (var i = 0; i < data.length; i++) {\n\n                    seriesData1.push(data[i].energy_today);\n                    seriesData2.push(data[i].lifetime);\n                    categories.push(data[i].name);\n                }\n                series.push(\n                    {\n                        name: \"Today's Production\",\n                        type: 'column',\n                        data: seriesData1,\n                        tooltip: {\n                            valueSuffix: ' kWh'\n                        }\n                    },\n                );\n\n                series.push(\n                    {\n                        name: 'Total Production',\n                        type: 'spline',\n                        yAxis: 1,\n                        data: seriesData2,\n                        tooltip: {\n                            valueSuffix: ' kWh'\n                        }\n                    },\n                );\n\n                chartOption.series = series;\n                chartOption.xAxis[0].categories = categories;\n                self.setState({\n                    dataListSummary: data,\n                    chartOption: chartOption\n                });\n            } else {\n                self.setState({\n                    dataList: [],\n                    chartOption: {}\n                });\n            }\n        });\n    }\n\n\n    render() {\n        return this.jsxTemplate.call(this)\n    }\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(SummaryGroup)\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}