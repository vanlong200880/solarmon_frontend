{"ast":null,"code":"import React from 'react';\nimport DeviceChartingJsx from './DeviceCharting.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport AnalyticsService from '../../../../../../services/AnalyticsService';\nimport MainDeviceService from '../../../../../../services/MainDeviceService';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport moment from 'moment';\n\nclass DeviceCharting extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleClickOutside = event => {\n      const {\n        target\n      } = event;\n      var {\n        chartParams\n      } = this.state,\n          self = this;\n\n      if (!this.wrapperRef.current.contains(target)) {\n        if (chartParams.show_filter) {\n          chartParams.show_filter = false;\n          self.setState({\n            chartParams: chartParams\n          });\n        }\n      }\n    };\n\n    this.onClickFilter = value => {\n      var {\n        chartParams,\n        dataFilter,\n        curItem\n      } = this.state;\n      var self = this;\n      if (!Libs.isArrayData(dataFilter)) return;\n      var item = Libs.find(dataFilter, 'id', value);\n      if (Libs.isObjectEmpty(item)) return;\n      chartParams.id_filter = item.id;\n      chartParams.text_filter = item.text;\n      chartParams.show_filter = false;\n      chartParams.showNextBtn = false;\n\n      switch (value) {\n        case 'today':\n          chartParams.start_date = Libs.getCurrentMMDDYYYYHI();\n          chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n          chartParams.max_date = Libs.getCurrentMMDDYYYYHI();\n          break;\n\n        case '3_day':\n          chartParams.end_date = Libs.getCurrentDDMMYYYY();\n          chartParams.start_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n          chartParams.start_max_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n          chartParams.max_date = Libs.getCurrentDDMMYYYY();\n          break;\n\n        case 'this_month':\n          chartParams.max_date = moment().format('MM/YYYY');\n          chartParams.end_date = moment().format('MM/YYYY');\n          break;\n\n        case 'last_month':\n          chartParams.max_date = moment().format('MM/YYYY');\n          var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n          var ylast = tlast.getFullYear(),\n              mlast = tlast.getMonth();\n          chartParams.end_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).endOf('month').format('MM/YYYY');\n          chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).format('MM/YYYY');\n          break;\n\n        case 'lifetime':\n        case '12_month':\n          chartParams.max_date = moment().format('MM/YYYY');\n          chartParams.end_date = moment().format('MM/YYYY');\n          chartParams.start_date = moment(Libs.addMonths(Libs.getCurrentMMDDYYYYHI(), -12)).format('MM/YYYY');\n          break;\n        // case 'lifetime':\n        //     chartParams.start_date = moment(curItem.commissioning).format('MM/DD/YYYY HH:mm:ss');\n        //     chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n        //     break;\n      }\n\n      this.setState({\n        chartParams: chartParams\n      }, () => {\n        self.loadDataChart();\n      });\n    };\n\n    this.changeViewMinute = value => {\n      var chartParams = this.state.chartParams,\n          self = this;\n      if (Libs.isBlank(value)) return;\n      chartParams.data_send_time = value;\n      this.setState({\n        chartParams: chartParams\n      }, () => {\n        self.loadDataChart();\n      });\n    };\n\n    this.onClickShowFilter = () => {\n      var {\n        chartParams\n      } = this.state;\n      chartParams.show_filter = true;\n      this.setState({\n        chartParams: chartParams\n      });\n    };\n\n    this.downloadData = () => {\n      var {\n        dataExport\n      } = this.state;\n\n      if (Libs.isArrayData(dataExport)) {\n        var SheetNames = [],\n            Sheets = {};\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n        const fileExtension = '.xlsx';\n\n        for (var i = 0; i < dataExport.length; i++) {\n          SheetNames.push(dataExport[i].name);\n          var dataSheets = [];\n          var dataRows = dataExport[i].data;\n\n          if (Libs.isArrayData(dataRows)) {\n            dataRows.map((item, index) => {\n              dataSheets.push(item);\n            });\n          }\n\n          const ws = XLSX.utils.json_to_sheet(dataSheets, {\n            skipHeader: false\n          });\n          Sheets[dataExport[i].name] = ws;\n        }\n\n        const wb = {\n          SheetNames: SheetNames,\n          Sheets: Sheets\n        };\n        const excelBuffer = XLSX.write(wb, {\n          bookType: 'xlsx',\n          type: 'array'\n        });\n        const data = new Blob([excelBuffer], {\n          type: fileType\n        });\n        FileSaver.saveAs(data, \"export-charting-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n      }\n    };\n\n    this.state = {\n      curItem: this.props.curItem,\n      dataParameter: [],\n      chartToolOption: {},\n      dataExport: [],\n      chartParams: {\n        id_filter: 'today',\n        text_filter: 'Today',\n        show_filter: false,\n        max_date: Libs.getCurrentDDMMYYYY(),\n        data_send_time: 1\n      },\n      dataFilter: [{\n        id: \"today\",\n        text: \"Today\"\n      }, {\n        id: \"3_day\",\n        text: \"3 days\"\n      }, {\n        id: \"this_month\",\n        text: \"This month\"\n      }, {\n        id: \"last_month\",\n        text: \"Last month\"\n      }, {\n        id: \"12_month\",\n        text: \"Last 12 months\"\n      }, {\n        id: \"lifetime\",\n        text: \"Lifetime\"\n      }]\n    };\n    this.jsxTemplate = DeviceChartingJsx;\n    this.handleParameterInputChange = this.handleParameterInputChange.bind(this);\n    this.wrapperRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this.getDataListHardware();\n    this.loadConfigDefaultDate();\n    document.addEventListener('click', this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleClickOutside);\n  }\n\n  loadConfigDefaultDate() {\n    var {\n      chartParams\n    } = this.state;\n\n    switch (chartParams.id_filter) {\n      case 'today':\n        chartParams.max_date = Libs.getCurrentMMDDYYYYHI();\n        chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n        break;\n\n      case '3_day':\n        chartParams.end_date = Libs.getCurrentDDMMYYYY();\n        chartParams.start_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n        chartParams.start_max_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n        break;\n\n      case 'this_month':\n        chartParams.max_date = moment().format('MM/YYYY');\n        chartParams.end_date = moment().format('MM/YYYY');\n        break;\n\n      case 'last_month':\n        chartParams.max_date = moment().format('MM/YYYY');\n        var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n        var ylast = tlast.getFullYear(),\n            mlast = tlast.getMonth();\n        chartParams.end_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).endOf('month').format('MM/YYYY');\n        chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).format('MM/YYYY');\n        break;\n\n      case 'lifetime':\n      case '12_month':\n        chartParams.max_date = moment().format('MM/YYYY');\n        chartParams.end_date = moment().format('MM/YYYY');\n        var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n        var ylast = tlast.getFullYear(),\n            mlast = tlast.getMonth();\n        chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -12)).format('MM/YYYY');\n        chartParams.max_start_date = moment(Libs.addMonths(Libs.getCurrentMMDDYYYYHI(), -12)).format('MM/YYYY');\n        break;\n    }\n\n    this.setState({\n      chartParams: chartParams\n    });\n  }\n  /**\n   * get list\n   * @author Long.Pham 2019-06-03\n   */\n\n\n  getDataListHardware() {\n    let self = this;\n    var {\n      curItem\n    } = this.state;\n    let params = Object.assign({}, curItem);\n    params.id_language = this.employee.id_language;\n    params.id_employee = this.employee.id_employee;\n    params.type = 'private';\n    MainDeviceService.instance.getDataListHardware(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataParameter: data\n        });\n      } else {\n        self.setState({\n          dataParameter: []\n        });\n      }\n    });\n  }\n\n  handleParameterInputChange(e, index) {\n    var {\n      dataParameter,\n      curItem\n    } = this.state,\n        self = this;\n    if (!Libs.isArrayData(dataParameter)) return;\n    var item = dataParameter[index];\n    if (Libs.isObjectEmpty(item)) return;\n    dataParameter[index].is_checked = dataParameter[index].is_checked ? 0 : 1;\n    dataParameter[index].id_device = curItem.id;\n    this.setState({\n      dataParameter: dataParameter\n    }, () => {\n      self.loadDataChart();\n    });\n  }\n  /**\n   * setValue method to Input\n   * @author Long.Pham 20/05/2021\n   */\n\n\n  handleInputDateChange(event) {\n    let target = event.target;\n    let name = target.name;\n    var self = this;\n    let value = target.value;\n\n    if (target.type === 'checkbox') {\n      value = target.checked ? 1 : 0;\n    }\n\n    if (name) {\n      let {\n        chartParams\n      } = this.state;\n\n      switch (chartParams.id_filter) {\n        case 'today':\n        case 'last_month':\n        case 'this_month':\n          chartParams.start_date = value;\n          chartParams[name] = value;\n          break;\n\n        case '3_day':\n          if (name == 'start_date') {\n            chartParams.start_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n              chartParams.end_date = moment(Libs.addDays(currentDate, 2)).format('DD/MM/YYYY');\n            }\n          }\n\n          if (name == 'end_date') {\n            chartParams.end_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n              chartParams.start_date = moment(Libs.addDays(currentDate, -2)).format('DD/MM/YYYY');\n            }\n          }\n\n          break;\n\n        case '12_month':\n          if (name == 'start_date') {\n            chartParams.start_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n              const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n              chartParams.end_date = moment(Libs.addMonths(startOfMonth, 12)).format('MM/YYYY');\n            }\n          }\n\n          if (name == 'end_date') {\n            chartParams.end_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n              const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n              chartParams.start_date = moment(Libs.addMonths(startOfMonth, -12)).format('MM/YYYY');\n            }\n          }\n\n          break;\n      }\n\n      self.setState({\n        chartParams: chartParams\n      });\n      self.loadDataChart();\n    }\n  }\n\n  loadDataChart() {\n    var {\n      chartParams,\n      dataDevice,\n      dataParameter,\n      curItem\n    } = this.state,\n        self = this;\n    var chartToolOption = {};\n    var dataDevice = [];\n\n    if (!Libs.isObjectEmpty(curItem)) {\n      dataDevice.push(curItem);\n    }\n\n    if (!Libs.isArrayData(dataDevice) || !Libs.isArrayData(dataParameter)) return;\n    var params = {};\n\n    switch (chartParams.id_filter) {\n      case 'today':\n        params.start_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\");\n        params.end_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\");\n        break;\n\n      case '3_day':\n        params.start_date = Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\";\n        params.end_date = Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\";\n        break;\n\n      case 'last_month':\n      case 'this_month':\n        params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n        params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n        break;\n\n      case 'lifetime':\n      case '12_month':\n        params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n        params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n        break;\n    }\n\n    params.id_language = this.employee.id_language;\n    params.id_employee = this.employee.id_employee;\n    const filterDevice = dataDevice.reduce((acc, current) => {\n      const x = acc.find(item => item.id === current.id);\n\n      if (!x) {\n        return acc.concat([current]);\n      } else {\n        return acc;\n      }\n    }, []);\n    params.dataDevice = filterDevice;\n    params.filterBy = chartParams.id_filter;\n    params.data_send_time = chartParams.data_send_time;\n    params.type = 'private';\n    let elHeight = document.getElementById('chart-view').clientHeight - 80;\n    chartToolOption.chart = {\n      zoomType: 'xy',\n      height: elHeight ? elHeight : null\n    };\n    chartToolOption.credits = {\n      enabled: false\n    };\n    chartToolOption.exporting = {\n      enabled: true\n    };\n    chartToolOption.title = {\n      text: null,\n      align: 'left'\n    };\n    chartToolOption.xAxis = [];\n    chartToolOption.yAxis = [];\n    chartToolOption.tooltip = {\n      shared: true,\n      crosshairs: true\n    };\n    chartToolOption.plotOptions = {\n      series: {\n        turboThreshold: 5000\n      },\n      column: {\n        stacking: 'normal'\n      }\n    };\n    chartToolOption.series = [];\n    var tickInterval = 24;\n\n    switch (chartParams.id_filter) {\n      case 'today':\n        if (chartParams.data_send_time == 1) {\n          tickInterval = 24;\n        } else if (chartParams.data_send_time == 2) {\n          tickInterval = 12;\n        } else if (chartParams.data_send_time == 3) {\n          tickInterval = 2;\n        }\n\n        break;\n\n      case '3_day':\n        if (chartParams.data_send_time == 1) {\n          tickInterval = 168;\n        } else if (chartParams.data_send_time == 2) {\n          tickInterval = 57;\n        } else if (chartParams.data_send_time == 3) {\n          tickInterval = 15;\n        }\n\n        break;\n\n      case 'last_month':\n      case 'this_month':\n        tickInterval = 4;\n        break;\n\n      case 'lifetime':\n      case '12_month':\n        tickInterval = 1;\n        break;\n    }\n\n    var paramerter = dataParameter.filter(item => item.is_checked == 1);\n    if (!Libs.isArrayData(paramerter)) return;\n    AnalyticsService.instance.getChartByListDevice(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        var categories = [],\n            series = [],\n            yAxis = [];\n        var yAxisUnit = [];\n\n        for (var i = 0; i < paramerter.length; i++) {\n          if (i === 0) {\n            yAxisUnit.push(paramerter[i]);\n            yAxis.push({\n              gridLineWidth: 1,\n              lineWidth: 1,\n              labels: {\n                enabled: true\n              },\n              title: {\n                text: !Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : '',\n                enabled: true\n              },\n              opposite: false\n            });\n          } else {\n            var findyAxisUnit = Libs.find(yAxisUnit, 'unit', paramerter[i].unit);\n\n            if (Libs.isObjectEmpty(findyAxisUnit)) {\n              yAxisUnit.push(paramerter[i]);\n              yAxis.push({\n                gridLineWidth: 1,\n                lineWidth: 1,\n                labels: {\n                  enabled: true\n                },\n                title: {\n                  text: !Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : '',\n                  enabled: true\n                },\n                opposite: true\n              });\n            }\n          }\n\n          var idyAxis = 0;\n\n          if (Libs.isArrayData(yAxisUnit)) {\n            yAxisUnit.map((h, index) => {\n              if (paramerter[i].unit == h.unit) {\n                idyAxis = index;\n              }\n            });\n          }\n\n          for (let k = 0, lenk = data.length; k < lenk; k++) {\n            var seriesItem = {\n              name: paramerter[i].name,\n              type: 'spline',\n              yAxis: idyAxis,\n              tooltip: {\n                valueSuffix: ' ' + (!Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : '')\n              },\n              data: [],\n              gridLineWidth: 1,\n              lineWidth: 1,\n              marker: {\n                radius: 1.5,\n                enabled: false\n              }\n            };\n            var dataRow = data[k].data;\n            var itemData = [];\n\n            if (Libs.isArrayData(dataRow)) {\n              for (let j = 0; j < dataRow.length; j++) {\n                // generate series\n                var value = !Libs.isBlank(dataRow[j][paramerter[i].slug]) && dataRow[j][paramerter[i].slug] > 0 ? dataRow[j][paramerter[i].slug] : null;\n                itemData.push([dataRow[j].time_full, value]);\n\n                if (k === 0) {\n                  categories.push(dataRow[j].categories_time);\n                }\n              }\n            }\n\n            seriesItem.data = itemData;\n            series.push(seriesItem);\n          }\n        }\n\n        if (Libs.isArrayData(categories) && Libs.isArrayData(series) && Libs.isArrayData(yAxis)) {\n          chartToolOption.xAxis = [{\n            categories: categories,\n            alignTicks: true,\n            tickInterval: tickInterval\n          }];\n          chartToolOption.series = series;\n          chartToolOption.yAxis = yAxis;\n          this.setState({\n            chartToolOption: chartToolOption,\n            dataExport: data\n          });\n          self.forceUpdate();\n        }\n      } else {\n        self.setState({\n          chartToolOption: {},\n          dataExport: []\n        });\n      }\n    });\n  }\n\n  render() {\n    return this.jsxTemplate.call(this);\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(DeviceCharting);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/desktop/ModulePrivate/Device/DeviceCharting/DeviceCharting.js"],"names":["React","DeviceChartingJsx","BaseComponent","Libs","withTranslation","AnalyticsService","MainDeviceService","FileSaver","XLSX","moment","DeviceCharting","constructor","props","context","handleClickOutside","event","target","chartParams","state","self","wrapperRef","current","contains","show_filter","setState","onClickFilter","value","dataFilter","curItem","isArrayData","item","find","isObjectEmpty","id_filter","id","text_filter","text","showNextBtn","start_date","getCurrentMMDDYYYYHI","end_date","max_date","getCurrentDDMMYYYY","addDays","format","start_max_date","tlast","Date","ylast","getFullYear","mlast","getMonth","addMonths","endOf","loadDataChart","changeViewMinute","isBlank","data_send_time","onClickShowFilter","downloadData","dataExport","SheetNames","Sheets","fileType","fileExtension","i","length","push","name","dataSheets","dataRows","data","map","index","ws","utils","json_to_sheet","skipHeader","wb","excelBuffer","write","bookType","type","Blob","saveAs","dataParameter","chartToolOption","jsxTemplate","handleParameterInputChange","bind","createRef","componentDidMount","getDataListHardware","loadConfigDefaultDate","document","addEventListener","componentWillUnmount","removeEventListener","max_start_date","params","Object","assign","id_language","employee","id_employee","instance","total_row","e","is_checked","id_device","handleInputDateChange","checked","arrDate","split","currentDate","startOfMonth","startOf","dataDevice","convertAllFormatDate","dateFormat","filterDevice","reduce","acc","x","concat","filterBy","elHeight","getElementById","clientHeight","chart","zoomType","height","credits","enabled","exporting","title","align","xAxis","yAxis","tooltip","shared","crosshairs","plotOptions","series","turboThreshold","column","stacking","tickInterval","paramerter","filter","getChartByListDevice","categories","yAxisUnit","gridLineWidth","lineWidth","labels","unit","opposite","findyAxisUnit","idyAxis","h","k","lenk","seriesItem","valueSuffix","marker","radius","dataRow","itemData","j","slug","time_full","categories_time","alignTicks","forceUpdate","render","call","HighOrderComponentTranslated"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DeviceChartingJsx from './DeviceCharting.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport AnalyticsService from '../../../../../../services/AnalyticsService';\nimport MainDeviceService from '../../../../../../services/MainDeviceService';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport moment from 'moment';\n\nclass DeviceCharting extends BaseComponent {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            curItem: this.props.curItem,\n            dataParameter: [],\n            chartToolOption: {},\n            dataExport: [],\n            chartParams: {\n                id_filter: 'today',\n                text_filter: 'Today',\n                show_filter: false,\n                max_date: Libs.getCurrentDDMMYYYY(),\n                data_send_time: 1\n            },\n\n            dataFilter: [\n                { id: \"today\", text: \"Today\" },\n                { id: \"3_day\", text: \"3 days\" },\n                { id: \"this_month\", text: \"This month\" },\n                { id: \"last_month\", text: \"Last month\" },\n                { id: \"12_month\", text: \"Last 12 months\" },\n                { id: \"lifetime\", text: \"Lifetime\" }\n            ],\n        };\n        this.jsxTemplate = DeviceChartingJsx;\n\n        this.handleParameterInputChange = this.handleParameterInputChange.bind(this);\n        this.wrapperRef = React.createRef();\n\n    }\n\n    componentDidMount() {\n        \n        this.getDataListHardware();\n        this.loadConfigDefaultDate();\n        document.addEventListener('click', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('click', this.handleClickOutside)\n    }\n\n    handleClickOutside = (event) => {\n        const { target } = event;\n        var { chartParams } = this.state, self = this;\n        if (!this.wrapperRef.current.contains(target)) {\n            if (chartParams.show_filter) {\n                chartParams.show_filter = false;\n                self.setState({\n                    chartParams: chartParams\n                })\n            }\n        }\n    }\n\n\n    loadConfigDefaultDate() {\n        var { chartParams } = this.state;\n        switch (chartParams.id_filter) {\n            case 'today':\n                chartParams.max_date = Libs.getCurrentMMDDYYYYHI();\n                chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n                break;\n            case '3_day':\n                chartParams.end_date = Libs.getCurrentDDMMYYYY();\n                chartParams.start_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n                chartParams.start_max_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n                break;\n            case 'this_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                chartParams.end_date = moment().format('MM/YYYY');\n                break;\n            case 'last_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n                var ylast = tlast.getFullYear(), mlast = tlast.getMonth();\n                chartParams.end_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).endOf('month').format('MM/YYYY');\n                chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).format('MM/YYYY');\n\n                break;\n            case 'lifetime':\n            case '12_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                chartParams.end_date = moment().format('MM/YYYY');\n                var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n                var ylast = tlast.getFullYear(), mlast = tlast.getMonth();\n                chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -12)).format('MM/YYYY');\n                chartParams.max_start_date = moment(Libs.addMonths(Libs.getCurrentMMDDYYYYHI(), -12)).format('MM/YYYY');\n                break;\n        }\n        this.setState({\n            chartParams: chartParams\n        })\n    }\n\n    /**\n     * get list\n     * @author Long.Pham 2019-06-03\n     */\n    getDataListHardware() {\n        let self = this;\n        var { curItem } = this.state;\n        let params = Object.assign({}, curItem);\n        params.id_language = this.employee.id_language;\n        params.id_employee = this.employee.id_employee;\n        params.type = 'private';\n        MainDeviceService.instance.getDataListHardware(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataParameter: data\n                });\n\n            } else {\n                self.setState({\n                    dataParameter: []\n                });\n            }\n        });\n    }\n\n    handleParameterInputChange(e, index) {\n        var { dataParameter, curItem } = this.state, self = this;\n        if (!Libs.isArrayData(dataParameter)) return;\n        var item = dataParameter[index];\n        if (Libs.isObjectEmpty(item)) return;\n\n        dataParameter[index].is_checked = dataParameter[index].is_checked ? 0 : 1;\n        dataParameter[index].id_device = curItem.id;\n        this.setState({\n            dataParameter: dataParameter\n        }, () => {\n            self.loadDataChart();\n        });\n    }\n\n    /**\n     * setValue method to Input\n     * @author Long.Pham 20/05/2021\n     */\n    handleInputDateChange(event) {\n        let target = event.target;\n        let name = target.name;\n        var self = this;\n        let value = target.value;\n        if (target.type === 'checkbox') {\n            value = target.checked ? 1 : 0;\n        }\n\n        if (name) {\n            let { chartParams } = this.state;\n            switch (chartParams.id_filter) {\n                case 'today':\n                case 'last_month':\n                case 'this_month':\n                    chartParams.start_date = value;\n                    chartParams[name] = value;\n                    break;\n                case '3_day':\n                    if (name == 'start_date') {\n                        chartParams.start_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n                            chartParams.end_date = moment(Libs.addDays(currentDate, 2)).format('DD/MM/YYYY');\n                        }\n                    }\n\n                    if (name == 'end_date') {\n                        chartParams.end_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n                            chartParams.start_date = moment(Libs.addDays(currentDate, -2)).format('DD/MM/YYYY');\n                        }\n                    }\n\n                    break;\n                case '12_month':\n                    if (name == 'start_date') {\n                        chartParams.start_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n                            const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n                            chartParams.end_date = moment(Libs.addMonths(startOfMonth, 12)).format('MM/YYYY');\n                        }\n                    }\n\n                    if (name == 'end_date') {\n                        chartParams.end_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n                            const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n                            chartParams.start_date = moment(Libs.addMonths(startOfMonth, -12)).format('MM/YYYY');\n                        }\n                    }\n                    break;\n            }\n\n            self.setState({\n                chartParams: chartParams\n            });\n            self.loadDataChart();\n        }\n    }\n\n    onClickFilter = (value) => {\n        var { chartParams, dataFilter, curItem } = this.state;\n        var self = this;\n        if (!Libs.isArrayData(dataFilter)) return;\n        var item = Libs.find(dataFilter, 'id', value);\n        if (Libs.isObjectEmpty(item)) return;\n\n        chartParams.id_filter = item.id;\n        chartParams.text_filter = item.text;\n        chartParams.show_filter = false;\n        chartParams.showNextBtn = false;\n\n        switch (value) {\n            case 'today':\n                chartParams.start_date = Libs.getCurrentMMDDYYYYHI();\n                chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n                chartParams.max_date = Libs.getCurrentMMDDYYYYHI();\n                break;\n            case '3_day':\n                chartParams.end_date = Libs.getCurrentDDMMYYYY();\n                chartParams.start_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n                chartParams.start_max_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n                chartParams.max_date = Libs.getCurrentDDMMYYYY();\n                break;\n\n            case 'this_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                chartParams.end_date = moment().format('MM/YYYY');\n                break;\n            case 'last_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n                var ylast = tlast.getFullYear(), mlast = tlast.getMonth();\n                chartParams.end_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).endOf('month').format('MM/YYYY');\n                chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).format('MM/YYYY');\n                break;\n\n            case 'lifetime':\n            case '12_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                chartParams.end_date = moment().format('MM/YYYY');\n                chartParams.start_date = moment(Libs.addMonths(Libs.getCurrentMMDDYYYYHI(), -12)).format('MM/YYYY');\n\n                break;\n            // case 'lifetime':\n            //     chartParams.start_date = moment(curItem.commissioning).format('MM/DD/YYYY HH:mm:ss');\n            //     chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n            //     break;\n        }\n\n        this.setState({\n            chartParams: chartParams\n        }, () => {\n            self.loadDataChart();\n        });\n    }\n\n\n\n    changeViewMinute = (value) => {\n        var chartParams = this.state.chartParams, self = this;\n        if (Libs.isBlank(value)) return;\n        chartParams.data_send_time = value;\n        this.setState({ chartParams: chartParams }, () => {\n            self.loadDataChart();\n        });\n    }\n\n\n    onClickShowFilter = () => {\n        var { chartParams } = this.state;\n        chartParams.show_filter = true;\n        this.setState({\n            chartParams: chartParams\n        });\n    }\n\n\n    loadDataChart() {\n        var { chartParams, dataDevice, dataParameter, curItem } = this.state, self = this;\n        var chartToolOption = {};\n        var dataDevice = [];\n        if (!Libs.isObjectEmpty(curItem)) {\n            dataDevice.push(curItem);\n        }\n        if (!Libs.isArrayData(dataDevice) || !Libs.isArrayData(dataParameter)) return;\n        var params = {};\n        switch (chartParams.id_filter) {\n            case 'today':\n                params.start_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\");\n                params.end_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\");\n                break;\n            case '3_day':\n                params.start_date = Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\";\n                params.end_date = Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\";\n                break;\n            case 'last_month':\n            case 'this_month':\n                params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n                params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n                break;\n            case 'lifetime':\n            case '12_month':\n                params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n                params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n                break;\n        }\n\n\n\n        params.id_language = this.employee.id_language;\n        params.id_employee = this.employee.id_employee;\n\n        const filterDevice = dataDevice.reduce((acc, current) => {\n            const x = acc.find(item => item.id === current.id);\n            if (!x) {\n                return acc.concat([current]);\n            } else {\n                return acc;\n            }\n        }, []);\n\n\n        params.dataDevice = filterDevice;\n        params.filterBy = chartParams.id_filter;\n        params.data_send_time = chartParams.data_send_time;\n        params.type = 'private';\n\n        let elHeight = (document.getElementById('chart-view').clientHeight) - 80;\n        chartToolOption.chart = { zoomType: 'xy', height: elHeight ? elHeight : null };\n        chartToolOption.credits = { enabled: false };\n        chartToolOption.exporting = { enabled: true };\n        chartToolOption.title = {\n            text: null,\n            align: 'left'\n        };\n        chartToolOption.xAxis = [];\n        chartToolOption.yAxis = [];\n        chartToolOption.tooltip = {\n            shared: true,\n            crosshairs: true\n        };\n        chartToolOption.plotOptions = {\n            series: {\n                turboThreshold: 5000\n            },\n            column: {\n                stacking: 'normal'\n            }\n        };\n        chartToolOption.series = [];\n        var tickInterval = 24;\n        switch (chartParams.id_filter) {\n            case 'today':\n                if (chartParams.data_send_time == 1) {\n                    tickInterval = 24;\n                } else if (chartParams.data_send_time == 2) {\n                    tickInterval = 12;\n                } else if (chartParams.data_send_time == 3) {\n                    tickInterval = 2;\n                }\n\n                break;\n            case '3_day':\n                if (chartParams.data_send_time == 1) {\n                    tickInterval = 168;\n                } else if (chartParams.data_send_time == 2) {\n                    tickInterval = 57;\n                } else if (chartParams.data_send_time == 3) {\n                    tickInterval = 15;\n                }\n                break;\n            case 'last_month':\n            case 'this_month':\n                tickInterval = 4;\n                break;\n            case 'lifetime':\n            case '12_month':\n                tickInterval = 1;\n                break;\n        }\n\n        var paramerter = dataParameter.filter((item) => item.is_checked == 1);\n        if (!Libs.isArrayData(paramerter)) return;\n\n        AnalyticsService.instance.getChartByListDevice(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                var categories = [], series = [], yAxis = [];\n                var yAxisUnit = [];\n                for (var i = 0; i < paramerter.length; i++) {\n                    if (i === 0) {\n                        yAxisUnit.push(paramerter[i]);\n                        yAxis.push({\n                            gridLineWidth: 1,\n                            lineWidth: 1,\n                            labels: {\n                                enabled: true\n                            },\n                            title: {\n                                text: (!Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : ''),\n                                enabled: true\n                            },\n                            opposite: false\n                        });\n                    } else {\n                        var findyAxisUnit = Libs.find(yAxisUnit, 'unit', paramerter[i].unit);\n                        if (Libs.isObjectEmpty(findyAxisUnit)) {\n                            yAxisUnit.push(paramerter[i]);\n                            yAxis.push({\n                                gridLineWidth: 1,\n                                lineWidth: 1,\n                                labels: {\n                                    enabled: true\n                                },\n                                title: {\n                                    text: (!Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : ''),\n                                    enabled: true\n                                },\n                                opposite: true\n                            });\n                        }\n                    }\n\n                    var idyAxis = 0;\n\n                    if (Libs.isArrayData(yAxisUnit)) {\n                        yAxisUnit.map((h, index) => {\n                            if (paramerter[i].unit == h.unit) {\n                                idyAxis = index;\n                            }\n                        })\n                    }\n\n                    for (let k = 0, lenk = data.length; k < lenk; k++) {\n                        var seriesItem = {\n                            name: paramerter[i].name,\n                            type: 'spline',\n                            yAxis: idyAxis,\n                            tooltip: {\n                                valueSuffix: ' ' + (!Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : '')\n                            },\n                            data: [],\n                            gridLineWidth: 1,\n                            lineWidth: 1,\n                            marker: {\n                                radius: 1.5,\n                                enabled: false\n                            }\n                        };\n\n                        var dataRow = data[k].data;\n                        var itemData = [];\n                        if (Libs.isArrayData(dataRow)) {\n                            for (let j = 0; j < dataRow.length; j++) {\n                                // generate series\n                                var value = (!Libs.isBlank(dataRow[j][paramerter[i].slug]) && dataRow[j][paramerter[i].slug] > 0) ? dataRow[j][paramerter[i].slug] : null;\n                                itemData.push([dataRow[j].time_full, value]);\n                                if (k === 0) {\n                                    categories.push(dataRow[j].categories_time);\n                                }\n                            }\n                        }\n\n\n                        seriesItem.data = itemData;\n                        series.push(seriesItem);\n                    }\n                }\n\n                if (Libs.isArrayData(categories) && Libs.isArrayData(series) && Libs.isArrayData(yAxis)) {\n                    chartToolOption.xAxis = [\n                        {\n                            categories: categories,\n                            alignTicks: true,\n                            tickInterval: tickInterval\n                        }\n                    ];\n                    chartToolOption.series = series;\n                    chartToolOption.yAxis = yAxis;\n\n                    this.setState({\n                        chartToolOption: chartToolOption,\n                        dataExport: data\n                    });\n                    self.forceUpdate()\n                }\n            } else {\n                self.setState({\n                    chartToolOption: {},\n                    dataExport: []\n                });\n            }\n        });\n    }\n\n    downloadData = () => {\n        var { dataExport } = this.state;\n        if (Libs.isArrayData(dataExport)) {\n            var SheetNames = [], Sheets = {};\n            const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n            const fileExtension = '.xlsx';\n            for (var i = 0; i < dataExport.length; i++) {\n                SheetNames.push(dataExport[i].name);\n                var dataSheets = [];\n                var dataRows = dataExport[i].data;\n                if (Libs.isArrayData(dataRows)) {\n                    dataRows.map((item, index) => {\n                        dataSheets.push(item);\n                    })\n                }\n                const ws = XLSX.utils.json_to_sheet(dataSheets, { skipHeader: false });\n                Sheets[dataExport[i].name] = ws;\n            }\n\n            const wb = {\n                SheetNames: SheetNames,\n                Sheets: Sheets\n            };\n            const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n            const data = new Blob([excelBuffer], { type: fileType });\n            FileSaver.saveAs(data, \"export-charting-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n        }\n    }\n\n    render() {\n        return this.jsxTemplate.call(this)\n    }\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(DeviceCharting)\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}