{"ast":null,"code":"import MeterViewJsx from './MeterView.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport MainProjectService from '../../../../../../services/MainProjectService';\n\nclass MeterView extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      curItem: {},\n      showInfoWindow: false,\n      showIconHover: false,\n      mode: 'grid',\n      dataList: [],\n      dataListSummary: [],\n      searchParam: {\n        limit: 16,\n        offset: 0,\n        index: 1\n      },\n      formSearch: false\n    };\n    this.paging = {\n      total: 0,\n      current: 1,\n      currentInput: 1\n    };\n    this.jsxTemplate = MeterViewJsx;\n    this.inputChangedHandler = this.inputChangedHandler.bind(this);\n    this.inputChangedEnter = this.inputChangedEnter.bind(this);\n    this.inputChangedBlue = this.inputChangedBlue.bind(this);\n  }\n\n  componentDidMount() {\n    this.getListMeterByEmplpyee();\n  }\n  /**\n   * get list\n   * @author Long.Pham 2019-06-03\n   */\n\n\n  getListMeterByEmplpyee() {\n    let self = this;\n    let params = this.state.searchParam;\n    params.id_language = this.employee.id_language;\n    params.id_employee = this.employee.id_employee;\n    MainProjectService.instance.getListMeterByEmplpyee(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataList: data\n        });\n        var total = parseInt(total_row / self.state.searchParam.limit);\n\n        if (total_row % self.state.searchParam.limit > 0) {\n          total = total + 1;\n        }\n\n        self.paging.total = total;\n        self.paging.current = self.state.searchParam.index;\n        self.paging.currentInput = self.state.searchParam.index;\n        self.state.total_row = total_row;\n      } else {\n        self.setState({\n          dataList: [],\n          total_row: 0\n        });\n        self.paging.total = 0;\n        self.paging.current = 1;\n        self.paging.currentInput = 1;\n      }\n\n      self.forceUpdate();\n    });\n  }\n\n  inputChangedHandler(event) {\n    let self = this;\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (name === 'current') {\n      if (!Libs.isBlank(value)) {\n        var {\n          t\n        } = this.props;\n\n        if (!Libs.isNumber(value)) {\n          self.toast(t('common.page_is_number'), \"error\");\n          return;\n        }\n      }\n\n      self.paging.currentInput = value;\n      self.forceUpdate();\n    }\n\n    if (name === 'limit') {\n      var {\n        searchParam\n      } = this.state;\n      searchParam.limit = value;\n      this.setState({\n        searchParam: searchParam\n      }, () => {\n        self.getListMeterByEmplpyee();\n      });\n    }\n  }\n\n  inputChangedEnter(event) {\n    let self = this;\n\n    if (event.key === 'Enter') {\n      var currentInput = this.paging.currentInput;\n\n      if (!Libs.isBlank(currentInput)) {\n        var {\n          t\n        } = this.props;\n\n        if (!Libs.isNumber(currentInput)) {\n          self.toast(t('common.page_is_number'), \"error\");\n          return;\n        }\n      }\n\n      if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n\n      if (parseInt(currentInput) > this.paging.total) {\n        currentInput = self.paging.total;\n      }\n\n      if (currentInput <= 0) {\n        currentInput = 1;\n      }\n\n      self.paging.current = currentInput;\n      self.paging.currentInput = currentInput;\n      this.onSelectPage(currentInput);\n      self.forceUpdate();\n    }\n  }\n\n  inputChangedBlue(event) {\n    let self = this;\n    let target = event.target;\n    let name = target.name;\n\n    if (name === 'current') {\n      var currentInput = this.paging.currentInput;\n\n      if (!Libs.isBlank(currentInput)) {\n        var {\n          t\n        } = this.props;\n\n        if (!Libs.isNumber(currentInput)) {\n          self.toast(t('common.page_is_number'), \"error\");\n          return;\n        }\n      }\n\n      if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n\n      if (parseInt(currentInput) > this.paging.total) {\n        currentInput = self.paging.total;\n      }\n\n      if (currentInput <= 0) {\n        currentInput = 1;\n      }\n\n      self.paging.current = currentInput;\n      self.paging.currentInput = currentInput;\n      this.onSelectPage(currentInput);\n      self.forceUpdate();\n    }\n  }\n  /**\n   * @description Select page in pagging\n   * @author long.pham 09/05/2021\n   * @param {int} index\n   */\n\n\n  onSelectPage(index) {\n    let self = this;\n    self.state.searchParam.index = index;\n\n    if (index > 0) {\n      self.state.searchParam.offset = (index - 1) * self.state.searchParam.limit;\n    } else {\n      self.state.searchParam.offset = 0;\n    }\n\n    self.getListMeterByEmplpyee();\n  }\n  /**\n   * @description reload data\n   * @author long.pham 09/05/2021\n   * @param {int} index\n   */\n\n\n  onClickReload() {\n    let self = this;\n    self.getListMeterByEmplpyee();\n  }\n  /**\n  * Func filter table\n  * @author Long.Pham 12-05-2021\n  * @param  {Object} e\n  */\n\n\n  onSort(event, sortKey) {\n    this.state.searchParam.sort_column = sortKey;\n    this.state.searchParam.order_by = this.state.searchParam.order_by === '' || this.state.searchParam.order_by === 'asc' ? 'desc' : 'asc';\n    this.getListMeterByEmplpyee();\n  }\n  /**\n    * @description Call form search\n    * @author Long.Pham 12/05/2021\n    */\n\n\n  onSearch() {\n    let formSearch = this.state.formSearch === false ? true : false;\n    this.setState({\n      formSearch: formSearch\n    });\n  }\n\n  onResetSearch() {\n    let self = this;\n    let searchParam = this.state.searchParam;\n    searchParam.name = null;\n    searchParam.id = null;\n    searchParam.index = 1;\n    searchParam.offset = 0;\n    self.paging.current = 1;\n    self.paging.currentInput = 1;\n    self.paging.total = 1;\n    self.setState({\n      searchParam: searchParam\n    }, () => {\n      self.getListMeterByEmplpyee();\n    });\n  }\n  /**\n   * Func search\n   * @author Long.Pham 12/05/2021\n   * @param  {Object} e\n   */\n\n\n  handleSearch() {\n    this.getListMeterByEmplpyee();\n  }\n\n  render() {\n    return this.jsxTemplate.call(this);\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(MeterView);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/src/containers/views/desktop/ModulePrivate/Dashboard/MeterView/MeterView.js"],"names":["MeterViewJsx","BaseComponent","Libs","withTranslation","MainProjectService","MeterView","constructor","props","context","state","curItem","showInfoWindow","showIconHover","mode","dataList","dataListSummary","searchParam","limit","offset","index","formSearch","paging","total","current","currentInput","jsxTemplate","inputChangedHandler","bind","inputChangedEnter","inputChangedBlue","componentDidMount","getListMeterByEmplpyee","self","params","id_language","employee","id_employee","instance","data","total_row","isArrayData","setState","parseInt","forceUpdate","event","target","name","value","isBlank","t","isNumber","toast","key","onSelectPage","onClickReload","onSort","sortKey","sort_column","order_by","onSearch","onResetSearch","id","handleSearch","render","call","HighOrderComponentTranslated"],"mappings":"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","sourcesContent":["import MeterViewJsx from './MeterView.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport MainProjectService from '../../../../../../services/MainProjectService';\n\nclass MeterView extends BaseComponent {\n\n    constructor(props, context) {\n        super(props, context);\n        \n        this.state = {\n            curItem: {},\n            showInfoWindow: false,\n            showIconHover: false,\n            mode: 'grid',\n            dataList: [],\n            dataListSummary: [],\n            searchParam: {\n                limit: 16,\n                offset: 0,\n                index: 1,\n            },\n            formSearch: false\n        };\n\n        this.paging = {\n            total: 0,\n            current: 1,\n            currentInput: 1\n        };\n\n        this.jsxTemplate = MeterViewJsx;\n\n        this.inputChangedHandler = this.inputChangedHandler.bind(this);\n        this.inputChangedEnter = this.inputChangedEnter.bind(this);\n        this.inputChangedBlue = this.inputChangedBlue.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.getListMeterByEmplpyee();\n    }\n\n    /**\n     * get list\n     * @author Long.Pham 2019-06-03\n     */\n     getListMeterByEmplpyee() {\n        let self = this;\n        let params = this.state.searchParam;\n        params.id_language = this.employee.id_language;\n        params.id_employee = this.employee.id_employee;\n        MainProjectService.instance.getListMeterByEmplpyee(params, (data, total_row) => {\n\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataList: data\n                });\n\n                var total = parseInt(total_row / self.state.searchParam.limit);\n                if (total_row % self.state.searchParam.limit > 0) {\n                    total = total + 1;\n                }\n                self.paging.total = total;\n                self.paging.current = self.state.searchParam.index;\n                self.paging.currentInput = self.state.searchParam.index;\n                self.state.total_row = total_row;\n\n            } else {\n                self.setState({\n                    dataList: [],\n                    total_row: 0\n                });\n                self.paging.total = 0;\n                self.paging.current = 1;\n                self.paging.currentInput = 1;\n            }\n            self.forceUpdate();\n        });\n    }\n\n    inputChangedHandler(event) {\n        let self = this;\n        let target = event.target;\n        let name = target.name;\n        let value = target.value;\n        if (name === 'current') {\n            if (!Libs.isBlank(value)) {\n                var { t } = this.props;\n                if (!Libs.isNumber(value)) {\n                    self.toast(t('common.page_is_number'), \"error\");\n                    return;\n                }\n            }\n\n            self.paging.currentInput = value;\n            self.forceUpdate();\n        }\n\n        if (name === 'limit') {\n            var { searchParam } = this.state;\n            searchParam.limit = value;\n            this.setState({\n                searchParam: searchParam\n            }, () => {\n                self.getListMeterByEmplpyee();\n            })\n        }\n    }\n\n    inputChangedEnter(event) {\n        let self = this;\n        if (event.key === 'Enter') {\n            var currentInput = this.paging.currentInput;\n            if (!Libs.isBlank(currentInput)) {\n                var { t } = this.props;\n                if (!Libs.isNumber(currentInput)) {\n                    self.toast(t('common.page_is_number'), \"error\");\n                    return;\n                }\n            }\n\n            if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n            if (parseInt(currentInput) > this.paging.total) {\n                currentInput = self.paging.total;\n            }\n\n            if (currentInput <= 0) {\n                currentInput = 1;\n            }\n\n            self.paging.current = currentInput;\n            self.paging.currentInput = currentInput;\n            this.onSelectPage(currentInput);\n            self.forceUpdate();\n        }\n    }\n\n    inputChangedBlue(event) {\n        let self = this;\n        let target = event.target;\n        let name = target.name;\n        if (name === 'current') {\n            var currentInput = this.paging.currentInput;\n            if (!Libs.isBlank(currentInput)) {\n                var { t } = this.props;\n                if (!Libs.isNumber(currentInput)) {\n                    self.toast(t('common.page_is_number'), \"error\");\n                    return;\n                }\n            }\n\n            if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n            if (parseInt(currentInput) > this.paging.total) {\n                currentInput = self.paging.total;\n            }\n\n            if (currentInput <= 0) {\n                currentInput = 1;\n            }\n\n            self.paging.current = currentInput;\n            self.paging.currentInput = currentInput;\n            this.onSelectPage(currentInput);\n            self.forceUpdate();\n        }\n    }\n\n\n    /**\n     * @description Select page in pagging\n     * @author long.pham 09/05/2021\n     * @param {int} index\n     */\n    onSelectPage(index) {\n        let self = this;\n        self.state.searchParam.index = index;\n\n        if (index > 0) {\n            self.state.searchParam.offset = (index - 1) * self.state.searchParam.limit;\n        } else {\n            self.state.searchParam.offset = 0;\n        }\n        self.getListMeterByEmplpyee();\n    }\n\n\n    /**\n     * @description reload data\n     * @author long.pham 09/05/2021\n     * @param {int} index\n     */\n    onClickReload() {\n        let self = this;\n        self.getListMeterByEmplpyee();\n    }\n\n\n    /**\n    * Func filter table\n    * @author Long.Pham 12-05-2021\n    * @param  {Object} e\n    */\n\n    onSort(event, sortKey) {\n        this.state.searchParam.sort_column = sortKey;\n        this.state.searchParam.order_by = (this.state.searchParam.order_by === '' || this.state.searchParam.order_by === 'asc') ? 'desc' : 'asc';\n        this.getListMeterByEmplpyee();\n    }\n\n   /**\n     * @description Call form search\n     * @author Long.Pham 12/05/2021\n     */\n    onSearch() {\n        let formSearch = (this.state.formSearch === false) ? true : false;\n        this.setState({\n            formSearch: formSearch\n        });\n    }\n\n    onResetSearch() {\n        let self = this;\n        let searchParam = this.state.searchParam;\n        searchParam.name = null;\n        searchParam.id = null;\n        searchParam.index = 1;\n        searchParam.offset = 0;\n        self.paging.current = 1;\n        self.paging.currentInput = 1;\n        self.paging.total = 1;\n        self.setState({\n            searchParam: searchParam\n        }, () => {\n            self.getListMeterByEmplpyee();\n        });\n    }\n\n    /**\n     * Func search\n     * @author Long.Pham 12/05/2021\n     * @param  {Object} e\n     */\n    handleSearch() {\n        this.getListMeterByEmplpyee();\n    }\n\n    render() {\n        return this.jsxTemplate.call(this)\n    }\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(MeterView)\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}