{"ast":null,"code":"import BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport ControlCalendarJsx from './ControlCalendar.jsx';\nimport MainDeviceService from '../../../../../../services/MainDeviceService';\nimport ControlCalendarValidate from './ControlCalendarValidate';\nimport moment from 'moment';\nimport Constants from '../../../../../../utils/Constants';\n\nclass ControlCalendar extends BaseComponent {\n  constructor(props) {\n    super(props);\n\n    this.closeDeleteCalendar = status => {\n      if (status) {\n        this.getListControlCalendar();\n      }\n\n      this.setState({\n        deleteItemCalendar: false\n      }, () => {\n        document.body.classList.remove('on');\n      });\n    };\n\n    this.state = {\n      curItem: this.props.curItem,\n      itemCalendar: {},\n      deleteItemCalendar: false,\n      searchParam: {\n        date_from: moment().format(\"DD/MM/YYYY HH:mm\"),\n        min_date: moment().format(\"DD/MM/YYYY HH:mm\")\n      },\n      eventsList: []\n    };\n    this.jsxTemplate = ControlCalendarJsx;\n  }\n  /**\n   * @description Called immediately after the component is mounted in the DOM. Called after the render function\n   * @author Long.Pham 12/09/2021\n   */\n\n\n  componentDidMount() {\n    this.getListControlCalendar();\n  }\n  /**\n       * get list\n       * @author Long.Pham 2019-06-03\n       */\n\n\n  getListControlCalendar() {\n    let self = this;\n    var {\n      curItem\n    } = this.state;\n    let params = Object.assign({}, curItem);\n    params.id_device = curItem.id;\n    var eventsList = [];\n    MainDeviceService.instance.getListControlCalendar(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        data.map((item, index) => {\n          eventsList.push({\n            'title': item.title,\n            'start': new Date(item.start),\n            'end': new Date(item.end),\n            'index': index,\n            'id': item.id,\n            'id_device': item.id_device\n          });\n        });\n        self.setState({\n          eventsList: eventsList\n        });\n      } else {\n        self.setState({\n          eventsList: []\n        });\n      }\n    });\n  }\n  /**\n   * setValue method to Input\n   * @author Long.Pham 20/05/2021\n   */\n\n\n  handleInputDateChange(event) {\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (target.type === 'checkbox') {\n      value = target.checked ? 1 : 0;\n    }\n\n    if (name) {\n      let {\n        searchParam\n      } = this.state;\n      searchParam[name] = value;\n\n      if (name == 'date_from') {\n        searchParam.date_to = moment(Libs.dateFormat(value, 'YYYY-MM-DD HH:mm:ss', 'DD/MM/YYYY HH:mm')).add(2, 'hours').format('DD/MM/YYYY HH:mm');\n      }\n\n      this.setState({\n        searchParam\n      });\n    }\n  }\n\n  async onClickAddControlCalendarAction() {\n    var {\n      curItem,\n      searchParam\n    } = this.state,\n        self = this;\n    var params = Object.assign({}, searchParam);\n    let v = new ControlCalendarValidate(this.props);\n    let errors = await v.FLValidationAll(params);\n\n    if (errors) {\n      this.setValidateMessage(errors);\n      return;\n    } //remove message validation\n\n\n    this.removeAllValidateMessage();\n    params.screen_mode = Constants.SCREEN_MODE.ADD;\n    if (Libs.isBlank(curItem.id)) return;\n    params.id = curItem.id;\n    params.id_device = curItem.id;\n    params.deviceID = curItem.id_device;\n    params.date_from = Libs.dateFormat(searchParam.date_from, \"YYYY-MM-DD HH:mm:ss\", \"DD/MM/YYYY HH:mm:ss\");\n    params.date_to = Libs.dateFormat(searchParam.date_to, \"YYYY-MM-DD HH:mm:ss\", \"DD/MM/YYYY HH:mm:ss\");\n    params.hash_id = this.props.hash_id;\n    MainDeviceService.instance.saveControlCalendar(params, function (status, data, msg) {\n      if (status) {\n        self.toast(msg, \"info\");\n        searchParam.date_from = null;\n        searchParam.date_to = null;\n        self.setState({\n          searchParam: searchParam\n        }, () => {\n          self.getListControlCalendar();\n        });\n      } else if (data) {\n        self.setValidateMessage(data);\n      } else if (!Libs.isBlank(msg)) {\n        self.toast(msg, \"error\");\n      }\n    }, true);\n  }\n\n  onSelectEvent(event) {\n    if (Libs.isObjectEmpty(event)) return;\n    this.setState({\n      itemCalendar: event,\n      deleteItemCalendar: true\n    }, () => {\n      document.body.classList.add('on');\n    });\n  }\n\n  /**\n   * @description validate a field input\n   * @author Long.Pham 12/05/2021\n   * @param {*} event \n   */\n  async validateOne(event) {\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (name) {\n      let param = {\n        [name]: value\n      };\n      let v = new ControlCalendarValidate(this.props);\n      let error = await v.validateOne(param, name);\n\n      if (error != null) {\n        this.setValidateMessage(error, true);\n      }\n    }\n  }\n\n}\n\nexport default ControlCalendar;","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/src/containers/views/desktop/ModulePrivate/Control/Manual/ControlCalendar.js"],"names":["BaseComponent","Libs","ControlCalendarJsx","MainDeviceService","ControlCalendarValidate","moment","Constants","ControlCalendar","constructor","props","closeDeleteCalendar","status","getListControlCalendar","setState","deleteItemCalendar","document","body","classList","remove","state","curItem","itemCalendar","searchParam","date_from","format","min_date","eventsList","jsxTemplate","componentDidMount","self","params","Object","assign","id_device","id","instance","data","total_row","isArrayData","map","item","index","push","title","Date","start","end","handleInputDateChange","event","target","name","value","type","checked","date_to","dateFormat","add","onClickAddControlCalendarAction","v","errors","FLValidationAll","setValidateMessage","removeAllValidateMessage","screen_mode","SCREEN_MODE","ADD","isBlank","deviceID","hash_id","saveControlCalendar","msg","toast","onSelectEvent","isObjectEmpty","validateOne","param","error"],"mappings":"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","sourcesContent":["\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport ControlCalendarJsx from './ControlCalendar.jsx';\nimport MainDeviceService from '../../../../../../services/MainDeviceService';\nimport ControlCalendarValidate from './ControlCalendarValidate';\nimport moment from 'moment';\nimport Constants from '../../../../../../utils/Constants';\n\nclass ControlCalendar extends BaseComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            curItem: this.props.curItem,\n            itemCalendar: {},\n            deleteItemCalendar: false,\n            searchParam: {\n                date_from: moment().format(\"DD/MM/YYYY HH:mm\"),\n                min_date: moment().format(\"DD/MM/YYYY HH:mm\"),\n            },\n            eventsList: []\n        }\n\n        this.jsxTemplate = ControlCalendarJsx;\n    }\n    /**\n     * @description Called immediately after the component is mounted in the DOM. Called after the render function\n     * @author Long.Pham 12/09/2021\n     */\n    componentDidMount() {\n        this.getListControlCalendar();\n    }\n\n    /**\n         * get list\n         * @author Long.Pham 2019-06-03\n         */\n    getListControlCalendar() {\n        let self = this;\n        var { curItem } = this.state;\n        let params = Object.assign({}, curItem);\n        params.id_device = curItem.id;\n\n        var eventsList = [];\n        MainDeviceService.instance.getListControlCalendar(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                data.map((item, index) => {\n                    eventsList.push({\n                        'title': item.title,\n                        'start': new Date(item.start),\n                        'end': new Date(item.end),\n                        'index': index,\n                        'id': item.id,\n                        'id_device': item.id_device\n                    }\n                    );\n                })\n                self.setState({\n                    eventsList: eventsList\n                });\n\n            } else {\n                self.setState({\n                    eventsList: []\n                });\n            }\n        });\n    }\n\n    /**\n     * setValue method to Input\n     * @author Long.Pham 20/05/2021\n     */\n    handleInputDateChange(event) {\n        let target = event.target;\n        let name = target.name;\n        let value = target.value;\n        if (target.type === 'checkbox') {\n            value = target.checked ? 1 : 0;\n        }\n\n        if (name) {\n            let { searchParam } = this.state;\n            searchParam[name] = value;\n\n            if (name == 'date_from') {\n                searchParam.date_to = moment(Libs.dateFormat(value, 'YYYY-MM-DD HH:mm:ss', 'DD/MM/YYYY HH:mm')).add(2, 'hours').format('DD/MM/YYYY HH:mm')\n            }\n            this.setState({ searchParam });\n        }\n    }\n\n    async onClickAddControlCalendarAction() {\n        var { curItem, searchParam } = this.state, self = this;\n        var params = Object.assign({}, searchParam);\n        let v = new ControlCalendarValidate(this.props);\n        let errors = await v.FLValidationAll(params);\n        if (errors) {\n            this.setValidateMessage(errors);\n            return;\n        }\n\n        //remove message validation\n        this.removeAllValidateMessage();\n        params.screen_mode = Constants.SCREEN_MODE.ADD;\n        if (Libs.isBlank(curItem.id)) return;\n        params.id = curItem.id;\n        params.id_device = curItem.id;\n        params.deviceID = curItem.id_device;\n\n        params.date_from = Libs.dateFormat(searchParam.date_from, \"YYYY-MM-DD HH:mm:ss\", \"DD/MM/YYYY HH:mm:ss\");\n        params.date_to = Libs.dateFormat(searchParam.date_to, \"YYYY-MM-DD HH:mm:ss\", \"DD/MM/YYYY HH:mm:ss\");\n        params.hash_id = this.props.hash_id;\n\n        MainDeviceService.instance.saveControlCalendar(params, function (status, data, msg) {\n            if (status) {\n                self.toast(msg, \"info\");\n                searchParam.date_from = null;\n                searchParam.date_to = null;\n                self.setState({\n                    searchParam: searchParam\n                }, () => {\n                    self.getListControlCalendar();\n                })\n            }\n            else if (data) {\n                self.setValidateMessage(data);\n            }\n\n            else if (!Libs.isBlank(msg)) {\n                self.toast(msg, \"error\");\n            }\n        }, true);\n    }\n\n\n    onSelectEvent(event) {\n        if (Libs.isObjectEmpty(event)) return;\n        this.setState({\n            itemCalendar: event,\n            deleteItemCalendar: true\n        }, ()=>{\n            document.body.classList.add('on');\n        });\n    }\n\n    closeDeleteCalendar = (status) => {\n        if (status) {\n            this.getListControlCalendar();\n        }\n        this.setState({\n            deleteItemCalendar: false\n        }, () => {\n            document.body.classList.remove('on');\n        })\n    }\n\n    /**\n     * @description validate a field input\n     * @author Long.Pham 12/05/2021\n     * @param {*} event \n     */\n    async validateOne(event) {\n        let target = event.target;\n        let name = target.name;\n        let value = target.value;\n        if (name) {\n            let param = {\n                [name]: value\n            }\n            let v = new ControlCalendarValidate(this.props);\n            let error = await v.validateOne(param, name);\n            if (error != null) {\n                this.setValidateMessage(error, true);\n            }\n        }\n    }\n}\nexport default ControlCalendar;"]},"metadata":{},"sourceType":"module"}