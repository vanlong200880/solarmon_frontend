{"ast":null,"code":"import AutoJsx from './Auto.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport Constants from '../../../../../../utils/Constants';\nimport MainDeviceService from '../../../../../../services/MainDeviceService';\nimport ControlCalendarValidate from './ControlCalendarValidate';\nimport moment from 'moment';\n\nclass Auto extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.onClickCloseChangeMode = () => {\n      this.setState({\n        changeMode: false\n      });\n    };\n\n    this.calbackChangeMode = searchParam => {\n      var self = this;\n      var params = {\n        schedule_control_mode: searchParam.scheduled_mode,\n        hash_id: this.state.hash_id,\n        type: 'schedule_control'\n      };\n      MainDeviceService.instance.updateControlMode(params, function (status, msg) {\n        if (status) {\n          self.setState({\n            searchParam: searchParam,\n            changeMode: false\n          });\n        } else if (!Libs.isBlank(msg)) {\n          self.toast(msg, \"error\");\n        }\n      }, true);\n    };\n\n    this.closeDeleteCalendar = status => {\n      if (status) {\n        this.getListControlCalendar();\n      }\n\n      this.setState({\n        deleteItemCalendar: false\n      });\n    };\n\n    this.onClickCloseOnOff = status => {\n      if (status) {\n        this.getListInverter();\n      }\n\n      this.setState({\n        showOnOffPopup: false\n      });\n    };\n\n    this.onClickOnOff = index => {\n      var {\n        dataListInverter\n      } = this.state;\n      if (!Libs.isArrayData(dataListInverter)) return;\n      var item = dataListInverter[index];\n      if (Libs.isObjectEmpty(item)) return;\n      this.setState({\n        showOnOffPopup: true,\n        curItem: item\n      });\n    };\n\n    this.jsxTemplate = AutoJsx;\n    this.state = {\n      hash_id: this.props.hash_id,\n      curItem: {},\n      dataListInverter: [],\n      showOnOffPopup: false,\n      deleteItemCalendar: false,\n      changeMode: false,\n      itemCalendar: {},\n      searchParam: {\n        limit: Constants.COMMON.LIMIT,\n        offset: 0,\n        index: 1,\n        max_date: Libs.getCurrentDDMMYYYY(),\n        current_date: Libs.getCurrentDDMMYYYY(),\n        scheduled_mode: 1,\n        date_from: moment().format(\"DD/MM/YYYY HH:mm\"),\n        min_date: moment().format(\"DD/MM/YYYY HH:mm\")\n      },\n      eventsList: []\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleInputDateChange = this.handleInputDateChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.getListInverter();\n    this.getListControlCalendar();\n    this.getProjectDetail();\n  }\n\n  /**\n   * @description Item click event\n   * @author Long.Pham 12-05-2021\n   * @param index element in the list\n   */\n  getProjectDetail() {\n    var self = this;\n    var {\n      searchParam\n    } = this.state;\n    var params = {\n      hash_id: this.state.hash_id\n    };\n    MainDeviceService.instance.getProjectDetail(params, data => {\n      if (data) {\n        searchParam.scheduled_mode = data.schedule_control_mode;\n        self.setState({\n          curProject: data,\n          searchParam: searchParam\n        });\n      }\n    }, false);\n  }\n  /**\n   * setValue method to Input\n   * @author Long.Pham 20/05/2021\n   */\n\n\n  handleInputDateChange(event) {\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (target.type === 'checkbox') {\n      value = target.checked ? 1 : 0;\n    }\n\n    if (name) {\n      let {\n        searchParam\n      } = this.state;\n      searchParam[name] = value;\n\n      if (name == 'date_from') {\n        searchParam.date_to = moment(Libs.dateFormat(value, 'YYYY-MM-DD HH:mm:ss', 'DD/MM/YYYY HH:mm')).add(2, 'hours').format('DD/MM/YYYY HH:mm');\n      }\n\n      this.setState({\n        searchParam\n      });\n    }\n  }\n  /**\n   * @description validate a field input\n   * @author Long.Pham 12/05/2021\n   * @param {*} event \n   */\n\n\n  async validateOne(event) {\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (name) {\n      let param = {\n        [name]: value\n      };\n      let v = new ControlCalendarValidate(this.props);\n      let error = await v.validateOne(param, name);\n\n      if (error != null) {\n        this.setValidateMessage(error, true);\n      }\n    }\n  }\n\n  handleCheckedChange(index) {\n    var {\n      dataListInverter\n    } = this.state;\n    if (!Libs.isArrayData(dataListInverter)) return;\n    var item = dataListInverter[index];\n    if (Libs.isObjectEmpty(item)) return;\n    dataListInverter[index].checked = dataListInverter[index].checked == 1 ? 0 : 1;\n    this.setState({\n      dataListInverter: dataListInverter\n    });\n  }\n\n  /**\n   * setValue method to Input\n   * @author Long.Pham 20/05/2021\n   */\n  handleInputChange(event) {\n    let target = event.target,\n        self = this;\n    let name = target.name;\n    let value = target.value;\n\n    if (target.type === 'checkbox') {\n      value = target.checked ? 1 : 0;\n    }\n\n    if (name) {\n      var {\n        searchParam\n      } = this.state;\n\n      if (name == 'scheduled_mode_auto') {\n        if (searchParam.scheduled_mode == 2) {\n          return;\n        }\n\n        self.setState({\n          changeMode: true\n        });\n      }\n\n      if (name == 'scheduled_mode_manual') {\n        if (searchParam.scheduled_mode == 1) {\n          return;\n        }\n\n        self.setState({\n          changeMode: true\n        });\n      }\n    }\n  }\n\n  async onClickAddControlCalendarAction() {\n    var {\n      curItem,\n      searchParam,\n      dataListInverter\n    } = this.state,\n        self = this;\n    var params = Object.assign({}, searchParam);\n    let v = new ControlCalendarValidate(this.props);\n    let errors = await v.FLValidationAll(params);\n\n    if (errors) {\n      this.setValidateMessage(errors);\n      return;\n    } //remove message validation\n\n\n    this.removeAllValidateMessage();\n    params.screen_mode = Constants.SCREEN_MODE.ADD;\n    if (!Libs.isArrayData(dataListInverter)) return;\n    var dataDevices = dataListInverter.filter(item => item.checked == 1);\n\n    if (!Libs.isArrayData(dataDevices)) {\n      self.toast(\"You haven't selected a device\", \"error\");\n    }\n\n    params.dataDevices = dataDevices;\n    params.date_from = Libs.dateFormat(searchParam.date_from, \"YYYY-MM-DD HH:mm:ss\", \"DD/MM/YYYY HH:mm:ss\");\n    params.date_to = Libs.dateFormat(searchParam.date_to, \"YYYY-MM-DD HH:mm:ss\", \"DD/MM/YYYY HH:mm:ss\");\n    MainDeviceService.instance.saveArrControlCalendar(params, function (status, data, msg) {\n      if (status) {\n        self.toast(msg, \"info\");\n        searchParam.date_from = null;\n        searchParam.date_to = null;\n        self.setState({\n          searchParam: searchParam\n        }, () => {\n          self.getListControlCalendar();\n        });\n      } else if (data) {\n        self.setValidateMessage(data);\n      } else if (!Libs.isBlank(msg)) {\n        self.toast(msg, \"error\");\n      }\n    }, true);\n  }\n  /**\n      * get list\n      * @author Long.Pham 2019-06-03\n      */\n\n\n  getListControlCalendar() {\n    let self = this;\n    var {\n      curItem,\n      hash_id\n    } = this.state;\n    let params = Object.assign({}, curItem);\n    params.hash_id = hash_id;\n    var eventsList = [];\n    MainDeviceService.instance.getListBySiteControlCalendar(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        data.map((item, index) => {\n          eventsList.push({\n            'title': item.title,\n            'start': new Date(item.start),\n            'end': new Date(item.end),\n            'index': index,\n            'id': item.id,\n            'id_device': item.id_device,\n            'id_site': item.id_site,\n            'hash_id': item.hash_id,\n            'date_from': item.date_from,\n            'date_to': item.date_to\n          });\n        });\n        self.setState({\n          eventsList: eventsList\n        });\n      } else {\n        self.setState({\n          eventsList: []\n        });\n      }\n    });\n  }\n\n  onSelectEvent(event) {\n    if (Libs.isObjectEmpty(event)) return;\n    this.setState({\n      itemCalendar: event,\n      deleteItemCalendar: true\n    });\n  }\n\n  /**\n   * get list\n   * @author Long.Pham 2019-06-03\n   */\n  getListInverter() {\n    let self = this;\n    let params = this.state.searchParam;\n    params.id_language = this.employee.id_language;\n    params.id_employee = this.employee.id_employee;\n    params.hash_id = this.state.hash_id;\n    params.type = 'private';\n    MainDeviceService.instance.getListInverter(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataListInverter: data\n        });\n      } else {\n        self.setState({\n          dataListInverter: []\n        });\n      }\n\n      self.forceUpdate();\n    });\n  }\n\n  render() {\n    return this.jsxTemplate.call(this);\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(Auto);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/desktop/ModulePrivate/Control/Auto/Auto.js"],"names":["AutoJsx","BaseComponent","Libs","withTranslation","Constants","MainDeviceService","ControlCalendarValidate","moment","Auto","constructor","props","context","onClickCloseChangeMode","setState","changeMode","calbackChangeMode","searchParam","self","params","schedule_control_mode","scheduled_mode","hash_id","state","type","instance","updateControlMode","status","msg","isBlank","toast","closeDeleteCalendar","getListControlCalendar","deleteItemCalendar","onClickCloseOnOff","getListInverter","showOnOffPopup","onClickOnOff","index","dataListInverter","isArrayData","item","isObjectEmpty","curItem","jsxTemplate","itemCalendar","limit","COMMON","LIMIT","offset","max_date","getCurrentDDMMYYYY","current_date","date_from","format","min_date","eventsList","handleInputChange","bind","handleInputDateChange","componentDidMount","getProjectDetail","data","curProject","event","target","name","value","checked","date_to","dateFormat","add","validateOne","param","v","error","setValidateMessage","handleCheckedChange","onClickAddControlCalendarAction","Object","assign","errors","FLValidationAll","removeAllValidateMessage","screen_mode","SCREEN_MODE","ADD","dataDevices","filter","saveArrControlCalendar","getListBySiteControlCalendar","total_row","map","push","title","Date","start","end","id","id_device","id_site","onSelectEvent","id_language","employee","id_employee","forceUpdate","render","call","HighOrderComponentTranslated"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,IAAP,MAAiB,8BAAjB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,OAAOC,iBAAP,MAA8B,8CAA9B;AACA,OAAOC,uBAAP,MAAoC,2BAApC;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAGA,MAAMC,IAAN,SAAmBP,aAAnB,CAAiC;AAE7BQ,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AACxB,UAAMD,KAAN,EAAaC,OAAb;;AADwB,SAoC5BC,sBApC4B,GAoCH,MAAM;AAC3B,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAE;AADF,OAAd;AAGH,KAxC2B;;AAAA,SAyH5BC,iBAzH4B,GAyHPC,WAAD,IAAiB;AACjC,UAAIC,IAAI,GAAG,IAAX;AACA,UAAIC,MAAM,GAAG;AACTC,QAAAA,qBAAqB,EAAEH,WAAW,CAACI,cAD1B;AAETC,QAAAA,OAAO,EAAE,KAAKC,KAAL,CAAWD,OAFX;AAGTE,QAAAA,IAAI,EAAE;AAHG,OAAb;AAKAlB,MAAAA,iBAAiB,CAACmB,QAAlB,CAA2BC,iBAA3B,CAA6CP,MAA7C,EAAqD,UAAUQ,MAAV,EAAkBC,GAAlB,EAAuB;AACxE,YAAID,MAAJ,EAAY;AACRT,UAAAA,IAAI,CAACJ,QAAL,CAAc;AAAEG,YAAAA,WAAW,EAAEA,WAAf;AAA4BF,YAAAA,UAAU,EAAE;AAAxC,WAAd;AACH,SAFD,MAGK,IAAI,CAACZ,IAAI,CAAC0B,OAAL,CAAaD,GAAb,CAAL,EAAwB;AACzBV,UAAAA,IAAI,CAACY,KAAL,CAAWF,GAAX,EAAgB,OAAhB;AACH;AACJ,OAPD,EAOG,IAPH;AAQH,KAxI2B;;AAAA,SA8P5BG,mBA9P4B,GA8PLJ,MAAD,IAAY;AAC9B,UAAIA,MAAJ,EAAY;AACR,aAAKK,sBAAL;AACH;;AACD,WAAKlB,QAAL,CAAc;AACVmB,QAAAA,kBAAkB,EAAE;AADV,OAAd;AAGH,KArQ2B;;AAAA,SAwQ5BC,iBAxQ4B,GAwQPP,MAAD,IAAY;AAC5B,UAAIA,MAAJ,EAAY;AACR,aAAKQ,eAAL;AACH;;AACD,WAAKrB,QAAL,CAAc;AACVsB,QAAAA,cAAc,EAAE;AADN,OAAd;AAGH,KA/Q2B;;AAAA,SAkR5BC,YAlR4B,GAkRZC,KAAD,IAAW;AACtB,UAAI;AAAEC,QAAAA;AAAF,UAAuB,KAAKhB,KAAhC;AACA,UAAI,CAACpB,IAAI,CAACqC,WAAL,CAAiBD,gBAAjB,CAAL,EAAyC;AACzC,UAAIE,IAAI,GAAGF,gBAAgB,CAACD,KAAD,CAA3B;AACA,UAAInC,IAAI,CAACuC,aAAL,CAAmBD,IAAnB,CAAJ,EAA8B;AAC9B,WAAK3B,QAAL,CAAc;AACVsB,QAAAA,cAAc,EAAE,IADN;AAEVO,QAAAA,OAAO,EAAEF;AAFC,OAAd;AAKH,KA5R2B;;AAExB,SAAKG,WAAL,GAAmB3C,OAAnB;AACA,SAAKsB,KAAL,GAAa;AACTD,MAAAA,OAAO,EAAE,KAAKX,KAAL,CAAWW,OADX;AAETqB,MAAAA,OAAO,EAAE,EAFA;AAGTJ,MAAAA,gBAAgB,EAAE,EAHT;AAITH,MAAAA,cAAc,EAAE,KAJP;AAKTH,MAAAA,kBAAkB,EAAE,KALX;AAMTlB,MAAAA,UAAU,EAAE,KANH;AAOT8B,MAAAA,YAAY,EAAE,EAPL;AAQT5B,MAAAA,WAAW,EAAE;AACT6B,QAAAA,KAAK,EAAEzC,SAAS,CAAC0C,MAAV,CAAiBC,KADf;AAETC,QAAAA,MAAM,EAAE,CAFC;AAGTX,QAAAA,KAAK,EAAE,CAHE;AAITY,QAAAA,QAAQ,EAAE/C,IAAI,CAACgD,kBAAL,EAJD;AAKTC,QAAAA,YAAY,EAAEjD,IAAI,CAACgD,kBAAL,EALL;AAMT9B,QAAAA,cAAc,EAAE,CANP;AAOTgC,QAAAA,SAAS,EAAE7C,MAAM,GAAG8C,MAAT,CAAgB,kBAAhB,CAPF;AAQTC,QAAAA,QAAQ,EAAE/C,MAAM,GAAG8C,MAAT,CAAgB,kBAAhB;AARD,OARJ;AAkBTE,MAAAA,UAAU,EAAE;AAlBH,KAAb;AAqBA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BD,IAA3B,CAAgC,IAAhC,CAA7B;AAEH;;AAEDE,EAAAA,iBAAiB,GAAG;AAChB,SAAKzB,eAAL;AACA,SAAKH,sBAAL;AACA,SAAK6B,gBAAL;AACH;;AAQD;AACJ;AACA;AACA;AACA;AACIA,EAAAA,gBAAgB,GAAG;AACf,QAAI3C,IAAI,GAAG,IAAX;AACA,QAAI;AAAED,MAAAA;AAAF,QAAkB,KAAKM,KAA3B;AACA,QAAIJ,MAAM,GAAG;AACTG,MAAAA,OAAO,EAAE,KAAKC,KAAL,CAAWD;AADX,KAAb;AAGAhB,IAAAA,iBAAiB,CAACmB,QAAlB,CAA2BoC,gBAA3B,CAA4C1C,MAA5C,EAAoD2C,IAAI,IAAI;AACxD,UAAIA,IAAJ,EAAU;AACN7C,QAAAA,WAAW,CAACI,cAAZ,GAA6ByC,IAAI,CAAC1C,qBAAlC;AACAF,QAAAA,IAAI,CAACJ,QAAL,CAAc;AACViD,UAAAA,UAAU,EAAED,IADF;AAEV7C,UAAAA,WAAW,EAAEA;AAFH,SAAd;AAIH;AACJ,KARD,EAQG,KARH;AASH;AAED;AACJ;AACA;AACA;;;AACI0C,EAAAA,qBAAqB,CAACK,KAAD,EAAQ;AACzB,QAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;AACA,QAAIC,IAAI,GAAGD,MAAM,CAACC,IAAlB;AACA,QAAIC,KAAK,GAAGF,MAAM,CAACE,KAAnB;;AACA,QAAIF,MAAM,CAACzC,IAAP,KAAgB,UAApB,EAAgC;AAC5B2C,MAAAA,KAAK,GAAGF,MAAM,CAACG,OAAP,GAAiB,CAAjB,GAAqB,CAA7B;AACH;;AAED,QAAIF,IAAJ,EAAU;AACN,UAAI;AAAEjD,QAAAA;AAAF,UAAkB,KAAKM,KAA3B;AACAN,MAAAA,WAAW,CAACiD,IAAD,CAAX,GAAoBC,KAApB;;AAEA,UAAID,IAAI,IAAI,WAAZ,EAAyB;AACrBjD,QAAAA,WAAW,CAACoD,OAAZ,GAAsB7D,MAAM,CAACL,IAAI,CAACmE,UAAL,CAAgBH,KAAhB,EAAuB,qBAAvB,EAA8C,kBAA9C,CAAD,CAAN,CAA0EI,GAA1E,CAA8E,CAA9E,EAAiF,OAAjF,EAA0FjB,MAA1F,CAAiG,kBAAjG,CAAtB;AACH;;AACD,WAAKxC,QAAL,CAAc;AAAEG,QAAAA;AAAF,OAAd;AACH;AACJ;AAGD;AACJ;AACA;AACA;AACA;;;AACqB,QAAXuD,WAAW,CAACR,KAAD,EAAQ;AACrB,QAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;AACA,QAAIC,IAAI,GAAGD,MAAM,CAACC,IAAlB;AACA,QAAIC,KAAK,GAAGF,MAAM,CAACE,KAAnB;;AACA,QAAID,IAAJ,EAAU;AACN,UAAIO,KAAK,GAAG;AACR,SAACP,IAAD,GAAQC;AADA,OAAZ;AAGA,UAAIO,CAAC,GAAG,IAAInE,uBAAJ,CAA4B,KAAKI,KAAjC,CAAR;AACA,UAAIgE,KAAK,GAAG,MAAMD,CAAC,CAACF,WAAF,CAAcC,KAAd,EAAqBP,IAArB,CAAlB;;AACA,UAAIS,KAAK,IAAI,IAAb,EAAmB;AACf,aAAKC,kBAAL,CAAwBD,KAAxB,EAA+B,IAA/B;AACH;AACJ;AACJ;;AAGDE,EAAAA,mBAAmB,CAACvC,KAAD,EAAQ;AACvB,QAAI;AAAEC,MAAAA;AAAF,QAAuB,KAAKhB,KAAhC;AACA,QAAI,CAACpB,IAAI,CAACqC,WAAL,CAAiBD,gBAAjB,CAAL,EAAyC;AACzC,QAAIE,IAAI,GAAGF,gBAAgB,CAACD,KAAD,CAA3B;AACA,QAAInC,IAAI,CAACuC,aAAL,CAAmBD,IAAnB,CAAJ,EAA8B;AAE9BF,IAAAA,gBAAgB,CAACD,KAAD,CAAhB,CAAwB8B,OAAxB,GAAkC7B,gBAAgB,CAACD,KAAD,CAAhB,CAAwB8B,OAAxB,IAAmC,CAAnC,GAAuC,CAAvC,GAA2C,CAA7E;AACA,SAAKtD,QAAL,CAAc;AACVyB,MAAAA,gBAAgB,EAAEA;AADR,KAAd;AAGH;;AAkBD;AACJ;AACA;AACA;AACIkB,EAAAA,iBAAiB,CAACO,KAAD,EAAQ;AACrB,QAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;AAAA,QAA2B/C,IAAI,GAAG,IAAlC;AACA,QAAIgD,IAAI,GAAGD,MAAM,CAACC,IAAlB;AACA,QAAIC,KAAK,GAAGF,MAAM,CAACE,KAAnB;;AACA,QAAIF,MAAM,CAACzC,IAAP,KAAgB,UAApB,EAAgC;AAC5B2C,MAAAA,KAAK,GAAGF,MAAM,CAACG,OAAP,GAAiB,CAAjB,GAAqB,CAA7B;AACH;;AAED,QAAIF,IAAJ,EAAU;AACN,UAAI;AAAEjD,QAAAA;AAAF,UAAkB,KAAKM,KAA3B;;AACA,UAAI2C,IAAI,IAAI,qBAAZ,EAAmC;AAC/B,YAAIjD,WAAW,CAACI,cAAZ,IAA8B,CAAlC,EAAqC;AAAE;AAAS;;AAChDH,QAAAA,IAAI,CAACJ,QAAL,CAAc;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAAd;AACH;;AACD,UAAImD,IAAI,IAAI,uBAAZ,EAAqC;AACjC,YAAIjD,WAAW,CAACI,cAAZ,IAA8B,CAAlC,EAAqC;AAAE;AAAS;;AAChDH,QAAAA,IAAI,CAACJ,QAAL,CAAc;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAAd;AACH;AACJ;AACJ;;AAEoC,QAA/B+D,+BAA+B,GAAG;AACpC,QAAI;AAAEnC,MAAAA,OAAF;AAAW1B,MAAAA,WAAX;AAAwBsB,MAAAA;AAAxB,QAA6C,KAAKhB,KAAtD;AAAA,QAA6DL,IAAI,GAAG,IAApE;AACA,QAAIC,MAAM,GAAG4D,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB/D,WAAlB,CAAb;AACA,QAAIyD,CAAC,GAAG,IAAInE,uBAAJ,CAA4B,KAAKI,KAAjC,CAAR;AACA,QAAIsE,MAAM,GAAG,MAAMP,CAAC,CAACQ,eAAF,CAAkB/D,MAAlB,CAAnB;;AACA,QAAI8D,MAAJ,EAAY;AACR,WAAKL,kBAAL,CAAwBK,MAAxB;AACA;AACH,KARmC,CAUpC;;;AACA,SAAKE,wBAAL;AACAhE,IAAAA,MAAM,CAACiE,WAAP,GAAqB/E,SAAS,CAACgF,WAAV,CAAsBC,GAA3C;AAEA,QAAI,CAACnF,IAAI,CAACqC,WAAL,CAAiBD,gBAAjB,CAAL,EAAyC;AACzC,QAAIgD,WAAW,GAAGhD,gBAAgB,CAACiD,MAAjB,CAAyB/C,IAAD,IAAUA,IAAI,CAAC2B,OAAL,IAAgB,CAAlD,CAAlB;;AACA,QAAI,CAACjE,IAAI,CAACqC,WAAL,CAAiB+C,WAAjB,CAAL,EAAoC;AAAErE,MAAAA,IAAI,CAACY,KAAL,CAAW,+BAAX,EAA4C,OAA5C;AAAuD;;AAC7FX,IAAAA,MAAM,CAACoE,WAAP,GAAqBA,WAArB;AACApE,IAAAA,MAAM,CAACkC,SAAP,GAAmBlD,IAAI,CAACmE,UAAL,CAAgBrD,WAAW,CAACoC,SAA5B,EAAuC,qBAAvC,EAA8D,qBAA9D,CAAnB;AACAlC,IAAAA,MAAM,CAACkD,OAAP,GAAiBlE,IAAI,CAACmE,UAAL,CAAgBrD,WAAW,CAACoD,OAA5B,EAAqC,qBAArC,EAA4D,qBAA5D,CAAjB;AAEA/D,IAAAA,iBAAiB,CAACmB,QAAlB,CAA2BgE,sBAA3B,CAAkDtE,MAAlD,EAA0D,UAAUQ,MAAV,EAAkBmC,IAAlB,EAAwBlC,GAAxB,EAA6B;AACnF,UAAID,MAAJ,EAAY;AACRT,QAAAA,IAAI,CAACY,KAAL,CAAWF,GAAX,EAAgB,MAAhB;AACAX,QAAAA,WAAW,CAACoC,SAAZ,GAAwB,IAAxB;AACApC,QAAAA,WAAW,CAACoD,OAAZ,GAAsB,IAAtB;AACAnD,QAAAA,IAAI,CAACJ,QAAL,CAAc;AACVG,UAAAA,WAAW,EAAEA;AADH,SAAd,EAEG,MAAM;AACLC,UAAAA,IAAI,CAACc,sBAAL;AACH,SAJD;AAKH,OATD,MAUK,IAAI8B,IAAJ,EAAU;AACX5C,QAAAA,IAAI,CAAC0D,kBAAL,CAAwBd,IAAxB;AACH,OAFI,MAIA,IAAI,CAAC3D,IAAI,CAAC0B,OAAL,CAAaD,GAAb,CAAL,EAAwB;AACzBV,QAAAA,IAAI,CAACY,KAAL,CAAWF,GAAX,EAAgB,OAAhB;AACH;AACJ,KAlBD,EAkBG,IAlBH;AAmBH;AAID;AACJ;AACA;AACA;;;AACII,EAAAA,sBAAsB,GAAG;AACrB,QAAId,IAAI,GAAG,IAAX;AACA,QAAI;AAAEyB,MAAAA,OAAF;AAAWrB,MAAAA;AAAX,QAAuB,KAAKC,KAAhC;AACA,QAAIJ,MAAM,GAAG4D,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBrC,OAAlB,CAAb;AACAxB,IAAAA,MAAM,CAACG,OAAP,GAAiBA,OAAjB;AAEA,QAAIkC,UAAU,GAAG,EAAjB;AACAlD,IAAAA,iBAAiB,CAACmB,QAAlB,CAA2BiE,4BAA3B,CAAwDvE,MAAxD,EAAgE,CAAC2C,IAAD,EAAO6B,SAAP,KAAqB;AACjF,UAAIxF,IAAI,CAACqC,WAAL,CAAiBsB,IAAjB,CAAJ,EAA4B;AACxBA,QAAAA,IAAI,CAAC8B,GAAL,CAAS,CAACnD,IAAD,EAAOH,KAAP,KAAiB;AACtBkB,UAAAA,UAAU,CAACqC,IAAX,CAAgB;AACZ,qBAASpD,IAAI,CAACqD,KADF;AAEZ,qBAAS,IAAIC,IAAJ,CAAStD,IAAI,CAACuD,KAAd,CAFG;AAGZ,mBAAO,IAAID,IAAJ,CAAStD,IAAI,CAACwD,GAAd,CAHK;AAIZ,qBAAS3D,KAJG;AAKZ,kBAAMG,IAAI,CAACyD,EALC;AAMZ,yBAAazD,IAAI,CAAC0D,SANN;AAOZ,uBAAW1D,IAAI,CAAC2D,OAPJ;AAQZ,uBAAW3D,IAAI,CAACnB,OARJ;AASZ,yBAAamB,IAAI,CAACY,SATN;AAUZ,uBAAWZ,IAAI,CAAC4B;AAVJ,WAAhB;AAaH,SAdD;AAeAnD,QAAAA,IAAI,CAACJ,QAAL,CAAc;AACV0C,UAAAA,UAAU,EAAEA;AADF,SAAd;AAIH,OApBD,MAoBO;AACHtC,QAAAA,IAAI,CAACJ,QAAL,CAAc;AACV0C,UAAAA,UAAU,EAAE;AADF,SAAd;AAGH;AACJ,KA1BD;AA2BH;;AAED6C,EAAAA,aAAa,CAACrC,KAAD,EAAQ;AACjB,QAAI7D,IAAI,CAACuC,aAAL,CAAmBsB,KAAnB,CAAJ,EAA+B;AAC/B,SAAKlD,QAAL,CAAc;AACV+B,MAAAA,YAAY,EAAEmB,KADJ;AAEV/B,MAAAA,kBAAkB,EAAE;AAFV,KAAd;AAIH;;AAkCD;AACJ;AACA;AACA;AACIE,EAAAA,eAAe,GAAG;AACd,QAAIjB,IAAI,GAAG,IAAX;AACA,QAAIC,MAAM,GAAG,KAAKI,KAAL,CAAWN,WAAxB;AACAE,IAAAA,MAAM,CAACmF,WAAP,GAAqB,KAAKC,QAAL,CAAcD,WAAnC;AACAnF,IAAAA,MAAM,CAACqF,WAAP,GAAqB,KAAKD,QAAL,CAAcC,WAAnC;AACArF,IAAAA,MAAM,CAACG,OAAP,GAAiB,KAAKC,KAAL,CAAWD,OAA5B;AACAH,IAAAA,MAAM,CAACK,IAAP,GAAc,SAAd;AACAlB,IAAAA,iBAAiB,CAACmB,QAAlB,CAA2BU,eAA3B,CAA2ChB,MAA3C,EAAmD,CAAC2C,IAAD,EAAO6B,SAAP,KAAqB;AACpE,UAAIxF,IAAI,CAACqC,WAAL,CAAiBsB,IAAjB,CAAJ,EAA4B;AACxB5C,QAAAA,IAAI,CAACJ,QAAL,CAAc;AACVyB,UAAAA,gBAAgB,EAAEuB;AADR,SAAd;AAGH,OAJD,MAIO;AACH5C,QAAAA,IAAI,CAACJ,QAAL,CAAc;AACVyB,UAAAA,gBAAgB,EAAE;AADR,SAAd;AAGH;;AACDrB,MAAAA,IAAI,CAACuF,WAAL;AACH,KAXD;AAYH;;AAGDC,EAAAA,MAAM,GAAG;AACL,WAAO,KAAK9D,WAAL,CAAiB+D,IAAjB,CAAsB,IAAtB,CAAP;AACH;;AA5T4B;;AA+TjC,MAAMC,4BAA4B,GAAGxG,eAAe,CAAC,QAAD,CAAf,CAA0BK,IAA1B,CAArC;AACA,eAAemG,4BAAf","sourcesContent":["import AutoJsx from './Auto.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport Constants from '../../../../../../utils/Constants';\nimport MainDeviceService from '../../../../../../services/MainDeviceService';\nimport ControlCalendarValidate from './ControlCalendarValidate';\nimport moment from 'moment';\n\n\nclass Auto extends BaseComponent {\n\n    constructor(props, context) {\n        super(props, context);\n        this.jsxTemplate = AutoJsx;\n        this.state = {\n            hash_id: this.props.hash_id,\n            curItem: {},\n            dataListInverter: [],\n            showOnOffPopup: false,\n            deleteItemCalendar: false,\n            changeMode: false,\n            itemCalendar: {},\n            searchParam: {\n                limit: Constants.COMMON.LIMIT,\n                offset: 0,\n                index: 1,\n                max_date: Libs.getCurrentDDMMYYYY(),\n                current_date: Libs.getCurrentDDMMYYYY(),\n                scheduled_mode: 1,\n                date_from: moment().format(\"DD/MM/YYYY HH:mm\"),\n                min_date: moment().format(\"DD/MM/YYYY HH:mm\"),\n            },\n            eventsList: []\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleInputDateChange = this.handleInputDateChange.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.getListInverter();\n        this.getListControlCalendar();\n        this.getProjectDetail();\n    }\n\n\n    onClickCloseChangeMode = () => {\n        this.setState({\n            changeMode: false\n        });\n    }\n    /**\n     * @description Item click event\n     * @author Long.Pham 12-05-2021\n     * @param index element in the list\n     */\n    getProjectDetail() {\n        var self = this;\n        var { searchParam } = this.state;\n        var params = {\n            hash_id: this.state.hash_id\n        };\n        MainDeviceService.instance.getProjectDetail(params, data => {\n            if (data) {\n                searchParam.scheduled_mode = data.schedule_control_mode;\n                self.setState({\n                    curProject: data,\n                    searchParam: searchParam\n                });\n            }\n        }, false);\n    }\n\n    /**\n     * setValue method to Input\n     * @author Long.Pham 20/05/2021\n     */\n    handleInputDateChange(event) {\n        let target = event.target;\n        let name = target.name;\n        let value = target.value;\n        if (target.type === 'checkbox') {\n            value = target.checked ? 1 : 0;\n        }\n\n        if (name) {\n            let { searchParam } = this.state;\n            searchParam[name] = value;\n\n            if (name == 'date_from') {\n                searchParam.date_to = moment(Libs.dateFormat(value, 'YYYY-MM-DD HH:mm:ss', 'DD/MM/YYYY HH:mm')).add(2, 'hours').format('DD/MM/YYYY HH:mm')\n            }\n            this.setState({ searchParam });\n        }\n    }\n\n\n    /**\n     * @description validate a field input\n     * @author Long.Pham 12/05/2021\n     * @param {*} event \n     */\n    async validateOne(event) {\n        let target = event.target;\n        let name = target.name;\n        let value = target.value;\n        if (name) {\n            let param = {\n                [name]: value\n            }\n            let v = new ControlCalendarValidate(this.props);\n            let error = await v.validateOne(param, name);\n            if (error != null) {\n                this.setValidateMessage(error, true);\n            }\n        }\n    }\n\n\n    handleCheckedChange(index) {\n        var { dataListInverter } = this.state;\n        if (!Libs.isArrayData(dataListInverter)) return;\n        var item = dataListInverter[index];\n        if (Libs.isObjectEmpty(item)) return;\n\n        dataListInverter[index].checked = dataListInverter[index].checked == 1 ? 0 : 1;\n        this.setState({\n            dataListInverter: dataListInverter\n        })\n    }\n\n    calbackChangeMode = (searchParam) => {\n        var self = this;\n        var params = {\n            schedule_control_mode: searchParam.scheduled_mode,\n            hash_id: this.state.hash_id,\n            type: 'schedule_control'\n        };\n        MainDeviceService.instance.updateControlMode(params, function (status, msg) {\n            if (status) {\n                self.setState({ searchParam: searchParam, changeMode: false });\n            }\n            else if (!Libs.isBlank(msg)) {\n                self.toast(msg, \"error\");\n            }\n        }, true);\n    }\n    /**\n     * setValue method to Input\n     * @author Long.Pham 20/05/2021\n     */\n    handleInputChange(event) {\n        let target = event.target, self = this;\n        let name = target.name;\n        let value = target.value;\n        if (target.type === 'checkbox') {\n            value = target.checked ? 1 : 0;\n        }\n\n        if (name) {\n            var { searchParam } = this.state;\n            if (name == 'scheduled_mode_auto') {\n                if (searchParam.scheduled_mode == 2) { return; }\n                self.setState({ changeMode: true });\n            }\n            if (name == 'scheduled_mode_manual') {\n                if (searchParam.scheduled_mode == 1) { return; }\n                self.setState({ changeMode: true });\n            }\n        }\n    }\n\n    async onClickAddControlCalendarAction() {\n        var { curItem, searchParam, dataListInverter } = this.state, self = this;\n        var params = Object.assign({}, searchParam);\n        let v = new ControlCalendarValidate(this.props);\n        let errors = await v.FLValidationAll(params);\n        if (errors) {\n            this.setValidateMessage(errors);\n            return;\n        }\n\n        //remove message validation\n        this.removeAllValidateMessage();\n        params.screen_mode = Constants.SCREEN_MODE.ADD;\n\n        if (!Libs.isArrayData(dataListInverter)) return;\n        var dataDevices = dataListInverter.filter((item) => item.checked == 1);\n        if (!Libs.isArrayData(dataDevices)) { self.toast(\"You haven't selected a device\", \"error\"); }\n        params.dataDevices = dataDevices;\n        params.date_from = Libs.dateFormat(searchParam.date_from, \"YYYY-MM-DD HH:mm:ss\", \"DD/MM/YYYY HH:mm:ss\");\n        params.date_to = Libs.dateFormat(searchParam.date_to, \"YYYY-MM-DD HH:mm:ss\", \"DD/MM/YYYY HH:mm:ss\");\n\n        MainDeviceService.instance.saveArrControlCalendar(params, function (status, data, msg) {\n            if (status) {\n                self.toast(msg, \"info\");\n                searchParam.date_from = null;\n                searchParam.date_to = null;\n                self.setState({\n                    searchParam: searchParam\n                }, () => {\n                    self.getListControlCalendar();\n                })\n            }\n            else if (data) {\n                self.setValidateMessage(data);\n            }\n\n            else if (!Libs.isBlank(msg)) {\n                self.toast(msg, \"error\");\n            }\n        }, true);\n    }\n\n\n\n    /**\n        * get list\n        * @author Long.Pham 2019-06-03\n        */\n    getListControlCalendar() {\n        let self = this;\n        var { curItem, hash_id } = this.state;\n        let params = Object.assign({}, curItem);\n        params.hash_id = hash_id;\n\n        var eventsList = [];\n        MainDeviceService.instance.getListBySiteControlCalendar(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                data.map((item, index) => {\n                    eventsList.push({\n                        'title': item.title,\n                        'start': new Date(item.start),\n                        'end': new Date(item.end),\n                        'index': index,\n                        'id': item.id,\n                        'id_device': item.id_device,\n                        'id_site': item.id_site,\n                        'hash_id': item.hash_id,\n                        'date_from': item.date_from,\n                        'date_to': item.date_to\n                    }\n                    );\n                })\n                self.setState({\n                    eventsList: eventsList\n                });\n\n            } else {\n                self.setState({\n                    eventsList: []\n                });\n            }\n        });\n    }\n\n    onSelectEvent(event) {\n        if (Libs.isObjectEmpty(event)) return;\n        this.setState({\n            itemCalendar: event,\n            deleteItemCalendar: true\n        })\n    }\n\n    closeDeleteCalendar = (status) => {\n        if (status) {\n            this.getListControlCalendar();\n        }\n        this.setState({\n            deleteItemCalendar: false\n        })\n    }\n\n\n    onClickCloseOnOff = (status) => {\n        if (status) {\n            this.getListInverter();\n        }\n        this.setState({\n            showOnOffPopup: false\n        })\n    }\n\n\n    onClickOnOff = (index) => {\n        var { dataListInverter } = this.state;\n        if (!Libs.isArrayData(dataListInverter)) return;\n        var item = dataListInverter[index];\n        if (Libs.isObjectEmpty(item)) return;\n        this.setState({\n            showOnOffPopup: true,\n            curItem: item\n        })\n\n    }\n\n    /**\n     * get list\n     * @author Long.Pham 2019-06-03\n     */\n    getListInverter() {\n        let self = this;\n        let params = this.state.searchParam;\n        params.id_language = this.employee.id_language;\n        params.id_employee = this.employee.id_employee;\n        params.hash_id = this.state.hash_id;\n        params.type = 'private';\n        MainDeviceService.instance.getListInverter(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataListInverter: data\n                });\n            } else {\n                self.setState({\n                    dataListInverter: []\n                });\n            }\n            self.forceUpdate();\n        });\n    }\n\n\n    render() {\n        return this.jsxTemplate.call(this)\n    }\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(Auto)\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}