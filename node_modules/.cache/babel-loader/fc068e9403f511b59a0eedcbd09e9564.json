{"ast":null,"code":"import MapViewJsx from './MapView.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport MainProjectService from '../../../../../../services/MainProjectService';\n\nclass MapView extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleMouseOver = (marker, event) => {\n      this.setState({\n        showInfoWindow: marker\n      });\n    };\n\n    this.handleMouseExit = (marker, event) => {\n      this.setState({\n        showInfoWindow: false\n      });\n    };\n\n    this.onMouseoverMarker = (marker, event) => {\n      this.setState({\n        showIconHover: marker\n      });\n    };\n\n    this.mouseMoveOutOfMarker = (marker, event) => {\n      this.setState({\n        showIconHover: false\n      });\n    };\n\n    this.state = {\n      showInfoWindow: false,\n      showIconHover: false,\n      dataList: [],\n      searchParam: this.props.searchParam\n    };\n    this.paging = {\n      total: 0,\n      current: 1,\n      currentInput: 1\n    };\n    this.jsxTemplate = MapViewJsx;\n    this.inputChangedHandler = this.inputChangedHandler.bind(this);\n    this.inputChangedEnter = this.inputChangedEnter.bind(this);\n    this.inputChangedBlue = this.inputChangedBlue.bind(this);\n  }\n\n  componentDidMount() {\n    this.getList();\n  }\n\n  /**\n   * get list\n   * @author Long.Pham 2019-06-03\n   */\n  getList() {\n    let self = this;\n    let params = this.state.searchParam;\n    params.id_language = this.employee.id_language;\n    params.id_employee = this.employee.id_employee;\n    MainProjectService.instance.getListProjectByEmplpyee(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataList: data\n        });\n        var total = parseInt(total_row / self.state.searchParam.limit);\n\n        if (total_row % self.state.searchParam.limit > 0) {\n          total = total + 1;\n        }\n\n        self.paging.total = total;\n        self.paging.current = self.state.searchParam.index;\n        self.paging.currentInput = self.state.searchParam.index;\n        self.state.total_row = total_row;\n      } else {\n        self.setState({\n          dataList: [],\n          total_row: 0\n        });\n        self.paging.total = 0;\n        self.paging.current = 1;\n        self.paging.currentInput = 1;\n      }\n\n      self.forceUpdate();\n    });\n  }\n\n  inputChangedHandler(event) {\n    let self = this;\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (name === 'current') {\n      if (!Libs.isBlank(value)) {\n        var {\n          t\n        } = this.props;\n\n        if (!Libs.isNumber(value)) {\n          self.toast(t('common.page_is_number'), \"error\");\n          return;\n        }\n      }\n\n      self.paging.currentInput = value;\n      self.forceUpdate();\n    }\n\n    if (name === 'limit') {\n      var {\n        searchParam\n      } = this.state;\n      searchParam.limit = value;\n      this.setState({\n        searchParam: searchParam\n      }, () => {\n        self.getList();\n      });\n    }\n  }\n\n  inputChangedEnter(event) {\n    let self = this;\n\n    if (event.key === 'Enter') {\n      var currentInput = this.paging.currentInput;\n\n      if (!Libs.isBlank(currentInput)) {\n        var {\n          t\n        } = this.props;\n\n        if (!Libs.isNumber(currentInput)) {\n          self.toast(t('common.page_is_number'), \"error\");\n          return;\n        }\n      }\n\n      if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n\n      if (parseInt(currentInput) > this.paging.total) {\n        currentInput = self.paging.total;\n      }\n\n      if (currentInput <= 0) {\n        currentInput = 1;\n      }\n\n      self.paging.current = currentInput;\n      self.paging.currentInput = currentInput;\n      this.onSelectPage(currentInput);\n      self.forceUpdate();\n    }\n  }\n\n  inputChangedBlue(event) {\n    let self = this;\n    let target = event.target;\n    let name = target.name;\n\n    if (name === 'current') {\n      var currentInput = this.paging.currentInput;\n\n      if (!Libs.isBlank(currentInput)) {\n        var {\n          t\n        } = this.props;\n\n        if (!Libs.isNumber(currentInput)) {\n          self.toast(t('common.page_is_number'), \"error\");\n          return;\n        }\n      }\n\n      if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n\n      if (parseInt(currentInput) > this.paging.total) {\n        currentInput = self.paging.total;\n      }\n\n      if (currentInput <= 0) {\n        currentInput = 1;\n      }\n\n      self.paging.current = currentInput;\n      self.paging.currentInput = currentInput;\n      this.onSelectPage(currentInput);\n      self.forceUpdate();\n    }\n  }\n  /**\n   * @description Select page in pagging\n   * @author long.pham 09/05/2021\n   * @param {int} index\n   */\n\n\n  onSelectPage(index) {\n    let self = this;\n    self.state.searchParam.index = index;\n\n    if (index > 0) {\n      self.state.searchParam.offset = (index - 1) * self.state.searchParam.limit;\n    } else {\n      self.state.searchParam.offset = 0;\n    }\n\n    self.getList();\n  }\n  /**\n   * @description reload data\n   * @author long.pham 09/05/2021\n   * @param {int} index\n   */\n\n\n  onClickReload() {\n    let self = this;\n    self.getList();\n  }\n\n  render() {\n    return this.jsxTemplate.call(this);\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(MapView);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/desktop/ModulePrivate/Dashboard/MapView/MapView.js"],"names":["MapViewJsx","BaseComponent","Libs","withTranslation","MainProjectService","MapView","constructor","props","context","handleMouseOver","marker","event","setState","showInfoWindow","handleMouseExit","onMouseoverMarker","showIconHover","mouseMoveOutOfMarker","state","dataList","searchParam","paging","total","current","currentInput","jsxTemplate","inputChangedHandler","bind","inputChangedEnter","inputChangedBlue","componentDidMount","getList","self","params","id_language","employee","id_employee","instance","getListProjectByEmplpyee","data","total_row","isArrayData","parseInt","limit","index","forceUpdate","target","name","value","isBlank","t","isNumber","toast","key","onSelectPage","offset","onClickReload","render","call","HighOrderComponentTranslated"],"mappings":"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","sourcesContent":["import MapViewJsx from './MapView.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport MainProjectService from '../../../../../../services/MainProjectService';\n\nclass MapView extends BaseComponent {\n\n    constructor(props, context) {\n        super(props, context);\n        \n        this.state = {\n            showInfoWindow: false,\n            showIconHover: false,\n            dataList: [],\n            searchParam: this.props.searchParam\n        };\n\n        this.paging = {\n            total: 0,\n            current: 1,\n            currentInput: 1\n        };\n\n        this.jsxTemplate = MapViewJsx;\n\n        this.inputChangedHandler = this.inputChangedHandler.bind(this);\n        this.inputChangedEnter = this.inputChangedEnter.bind(this);\n        this.inputChangedBlue = this.inputChangedBlue.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.getList();\n    }\n\n    handleMouseOver = (marker, event) => {\n        this.setState({\n          showInfoWindow: marker\n        });\n      };\n      handleMouseExit = (marker, event) => {\n        this.setState({\n          showInfoWindow: false\n        });\n      };\n    \n      onMouseoverMarker = (marker, event) => {\n        this.setState({\n          showIconHover: marker\n        });\n      };\n    \n      mouseMoveOutOfMarker = (marker, event) => {\n        this.setState({\n          showIconHover: false\n        });\n      };\n\n    /**\n     * get list\n     * @author Long.Pham 2019-06-03\n     */\n    getList() {\n        let self = this;\n        let params = this.state.searchParam;\n        params.id_language = this.employee.id_language;\n        params.id_employee = this.employee.id_employee;\n        MainProjectService.instance.getListProjectByEmplpyee(params, (data, total_row) => {\n\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataList: data\n                });\n\n                var total = parseInt(total_row / self.state.searchParam.limit);\n                if (total_row % self.state.searchParam.limit > 0) {\n                    total = total + 1;\n                }\n                self.paging.total = total;\n                self.paging.current = self.state.searchParam.index;\n                self.paging.currentInput = self.state.searchParam.index;\n                self.state.total_row = total_row;\n\n            } else {\n                self.setState({\n                    dataList: [],\n                    total_row: 0\n                });\n                self.paging.total = 0;\n                self.paging.current = 1;\n                self.paging.currentInput = 1;\n            }\n            self.forceUpdate();\n        });\n    }\n\n    inputChangedHandler(event) {\n        let self = this;\n        let target = event.target;\n        let name = target.name;\n        let value = target.value;\n        if (name === 'current') {\n            if (!Libs.isBlank(value)) {\n                var { t } = this.props;\n                if (!Libs.isNumber(value)) {\n                    self.toast(t('common.page_is_number'), \"error\");\n                    return;\n                }\n            }\n\n            self.paging.currentInput = value;\n            self.forceUpdate();\n        }\n\n        if (name === 'limit') {\n            var { searchParam } = this.state;\n            searchParam.limit = value;\n            this.setState({\n                searchParam: searchParam\n            }, () => {\n                self.getList();\n            })\n        }\n    }\n\n    inputChangedEnter(event) {\n        let self = this;\n        if (event.key === 'Enter') {\n            var currentInput = this.paging.currentInput;\n            if (!Libs.isBlank(currentInput)) {\n                var { t } = this.props;\n                if (!Libs.isNumber(currentInput)) {\n                    self.toast(t('common.page_is_number'), \"error\");\n                    return;\n                }\n            }\n\n            if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n            if (parseInt(currentInput) > this.paging.total) {\n                currentInput = self.paging.total;\n            }\n\n            if (currentInput <= 0) {\n                currentInput = 1;\n            }\n\n            self.paging.current = currentInput;\n            self.paging.currentInput = currentInput;\n            this.onSelectPage(currentInput);\n            self.forceUpdate();\n        }\n    }\n\n    inputChangedBlue(event) {\n        let self = this;\n        let target = event.target;\n        let name = target.name;\n        if (name === 'current') {\n            var currentInput = this.paging.currentInput;\n            if (!Libs.isBlank(currentInput)) {\n                var { t } = this.props;\n                if (!Libs.isNumber(currentInput)) {\n                    self.toast(t('common.page_is_number'), \"error\");\n                    return;\n                }\n            }\n\n            if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n            if (parseInt(currentInput) > this.paging.total) {\n                currentInput = self.paging.total;\n            }\n\n            if (currentInput <= 0) {\n                currentInput = 1;\n            }\n\n            self.paging.current = currentInput;\n            self.paging.currentInput = currentInput;\n            this.onSelectPage(currentInput);\n            self.forceUpdate();\n        }\n    }\n\n\n    /**\n     * @description Select page in pagging\n     * @author long.pham 09/05/2021\n     * @param {int} index\n     */\n    onSelectPage(index) {\n        let self = this;\n        self.state.searchParam.index = index;\n\n        if (index > 0) {\n            self.state.searchParam.offset = (index - 1) * self.state.searchParam.limit;\n        } else {\n            self.state.searchParam.offset = 0;\n        }\n        self.getList();\n    }\n\n\n    /**\n     * @description reload data\n     * @author long.pham 09/05/2021\n     * @param {int} index\n     */\n    onClickReload() {\n        let self = this;\n        self.getList();\n    }\n\n    render() {\n        return this.jsxTemplate.call(this)\n    }\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(MapView)\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}