{"ast":null,"code":"/**\n * emitter\n * @author ydr.me\n * @create 2015-11-14 12:32\n */\nvar allocation = require('./allocation.js');\n\nvar dato = require('./dato.js');\n\nvar typeis = require('./typeis.js');\n\nvar klass = require('./class.js');\n\nvar regSpace = /\\s+/g;\nvar emitterId = 0;\nvar Emitter = klass.create({\n  /**\n   * @constructor Emitter\n   * @type {Function}\n   */\n  constructor: function () {\n    var the = this; // 监听的事件 map\n\n    the._emitterListener = {}; // 全局事件监听列表\n\n    the._emitterCallbacks = []; // 监听的事件长度\n\n    the._emitterLimit = 999;\n    the.className = 'emitter';\n  },\n\n  /**\n   * 添加事件回调\n   * @method on\n   * @param {String} eventType 事件类型，多个事件类型使用空格分开\n   * @param {Function} listener 事件回调\n   * @returns {Emitter}\n   *\n   * @example\n   * var emitter = new Emitter();\n   * emitter.on('hi', fn);\n   */\n  on: function (eventType, listener) {\n    var the = this;\n    var args = allocation.args(arguments);\n\n    if (args.length === 1) {\n      listener = args[0];\n      eventType = null;\n    }\n\n    if (!typeis.function(listener)) {\n      return the;\n    }\n\n    if (!eventType) {\n      the._emitterCallbacks.push(listener);\n\n      return the;\n    }\n\n    _middleware(eventType, function (et) {\n      if (!the._emitterListener[et]) {\n        the._emitterListener[et] = [];\n      }\n\n      if (the._emitterListener[et].length === the._emitterLimit) {\n        throw new Error('instance event `' + et + '` pool is full as ' + this._emitterLimit);\n      }\n\n      if (typeis.function(listener)) {\n        the._emitterListener[et].push(listener);\n\n        the.emit('newListener', eventType);\n      }\n    });\n\n    return the;\n  },\n\n  /**\n   * 添加事件触发前事件\n   * @param eventType {String} 事件，只有 emit beforesomeevent 的事件才可以被监听\n   * @param listener {Function} 事件回调\n   * @returns {Emitter}\n   */\n  before: function (eventType, listener) {\n    return this.on('before' + eventType, listener);\n  },\n\n  /**\n   * 添加事件触发后事件\n   * @param eventType {String} 事件，只有 emit beforesomeevent 的事件才可以被监听\n   * @param listener {Function} 事件回调\n   * @returns {Emitter}\n   */\n  after: function (eventType, listener) {\n    return this.on('after' + eventType, listener);\n  },\n\n  /**\n   * 移除事件回调\n   * @method un\n   * @param {String} eventType 事件类型，多个事件类型使用空格分开\n   * @param {Function} [listener] 事件回调，缺省时将移除该事件类型上的所有事件回调\n   * @returns {Emitter}\n   *\n   * @example\n   * var emitter = new Emitter();\n   * emitter.un('hi', fn);\n   * emitter.un('hi');\n   */\n  un: function (eventType, listener) {\n    var the = this;\n\n    _middleware(eventType, function (et) {\n      if (the._emitterListener[et] && listener) {\n        dato.each(the._emitterListener, function (index, _listener) {\n          if (listener === _listener) {\n            the._emitterListener.splice(index, 1);\n\n            the.emit('removeListener', eventType);\n            return false;\n          }\n        });\n      } else {\n        the._emitterListener = [];\n      }\n    });\n\n    return the;\n  },\n\n  /**\n   * 事件触发，只要有一个事件返回false，那么就返回false，非链式调用\n   * @method emit\n   * @param {String} [eventType] 事件类型，多个事件类型使用空格分开\n   * @returns {*} 函数执行结果\n   *\n   * @example\n   * var emitter = new Emitter();\n   * emitter.emit('hi', 1, 2, 3);\n   * emitter.emit('hi', 1, 2);\n   * emitter.emit('hi', 1);\n   * emitter.emit('hi');\n   *\n   * // 为 before* 的事件可以被派发到 before 回调\n   * // 为 after* 的开头的事件可以被派发到 after 回调\n   */\n  emit: function (eventType\n  /*arguments*/\n  ) {\n    var the = this;\n    var emitArgs = dato.toArray(arguments).slice(1);\n    var ret = true;\n\n    _middleware(eventType, function (et) {\n      var time = Date.now();\n      dato.each(the._emitterCallbacks, function (index, callback) {\n        the.alienEmitter = {\n          type: et,\n          timestamp: time,\n          id: emitterId++\n        };\n        callback.apply(the, emitArgs);\n      });\n\n      if (the._emitterListener[et]) {\n        dato.each(the._emitterListener[et], function (index, listener) {\n          the.alienEmitter = {\n            type: et,\n            timestamp: time,\n            id: emitterId++\n          };\n\n          if (listener.apply(the, emitArgs) === false) {\n            ret = false;\n          }\n        });\n      }\n    });\n\n    return ret;\n  }\n});\n/**\n * 事件传输\n * @param source {Object} 事件来源\n * @param target {Object} 事件目标\n * @param [types] {Array} 允许和禁止的事件类型\n *\n * @example\n * name 与 ['name'] 匹配\n * name 与 ['!name'] 不匹配\n */\n\nEmitter.pipe = function (source, target, types) {\n  source.on(function () {\n    var type = this.alienEmitter.type;\n\n    if (_matches(type, types)) {\n      var args = dato.toArray(arguments);\n      args.unshift(this.alienEmitter.type);\n      target.emit.apply(target, args);\n    }\n  });\n};\n\nmodule.exports = Emitter;\n/**\n * 中间件，处理事件分发\n * @param {String} eventTypes 事件类型\n * @param {Function} callback 回调处理\n * @private\n */\n\nfunction _middleware(eventTypes, callback) {\n  dato.each(eventTypes.trim().split(regSpace), function (index, eventType) {\n    callback(eventType);\n  });\n}\n/**\n * 判断是否匹配\n * @param name {String} 待匹配字符串\n * @param [names] {Array} 被匹配字符串数组\n * @returns {boolean}\n * @private\n */\n\n\nfunction _matches(name, names) {\n  names = names || [];\n\n  if (!names.length) {\n    return true;\n  }\n\n  var matched = true;\n  dato.each(names, function (index, _name) {\n    var flag = _name[0]; // !name\n\n    if (flag === '!') {\n      matched = true;\n\n      if (name === _name.slice(1)) {\n        matched = false;\n        return false;\n      }\n    } // name\n    else {\n        matched = false;\n\n        if (name === _name) {\n          matched = true;\n          return false;\n        }\n      }\n  });\n  return matched;\n}","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/src/validator/libs/emitter.js"],"names":["allocation","require","dato","typeis","klass","regSpace","emitterId","Emitter","create","constructor","the","_emitterListener","_emitterCallbacks","_emitterLimit","className","on","eventType","listener","args","arguments","length","function","push","_middleware","et","Error","emit","before","after","un","each","index","_listener","splice","emitArgs","toArray","slice","ret","time","Date","now","callback","alienEmitter","type","timestamp","id","apply","pipe","source","target","types","_matches","unshift","module","exports","eventTypes","trim","split","name","names","matched","_name","flag"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAIA,IAAIA,UAAU,GAAGC,OAAO,CAAC,iBAAD,CAAxB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,WAAD,CAAlB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,aAAD,CAApB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,YAAD,CAAnB;;AAEA,IAAII,QAAQ,GAAG,MAAf;AACA,IAAIC,SAAS,GAAG,CAAhB;AAGA,IAAIC,OAAO,GAAGH,KAAK,CAACI,MAAN,CAAa;AACvB;AACJ;AACA;AACA;AACIC,EAAAA,WAAW,EAAE,YAAY;AACrB,QAAIC,GAAG,GAAG,IAAV,CADqB,CAGrB;;AACAA,IAAAA,GAAG,CAACC,gBAAJ,GAAuB,EAAvB,CAJqB,CAKrB;;AACAD,IAAAA,GAAG,CAACE,iBAAJ,GAAwB,EAAxB,CANqB,CAOrB;;AACAF,IAAAA,GAAG,CAACG,aAAJ,GAAoB,GAApB;AACAH,IAAAA,GAAG,CAACI,SAAJ,GAAgB,SAAhB;AACH,GAfsB;;AAgBvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,EAAE,EAAE,UAAUC,SAAV,EAAqBC,QAArB,EAA+B;AAC/B,QAAIP,GAAG,GAAG,IAAV;AACA,QAAIQ,IAAI,GAAGlB,UAAU,CAACkB,IAAX,CAAgBC,SAAhB,CAAX;;AAEA,QAAID,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;AACnBH,MAAAA,QAAQ,GAAGC,IAAI,CAAC,CAAD,CAAf;AACAF,MAAAA,SAAS,GAAG,IAAZ;AACH;;AAED,QAAI,CAACb,MAAM,CAACkB,QAAP,CAAgBJ,QAAhB,CAAL,EAAgC;AAC5B,aAAOP,GAAP;AACH;;AAED,QAAI,CAACM,SAAL,EAAgB;AACZN,MAAAA,GAAG,CAACE,iBAAJ,CAAsBU,IAAtB,CAA2BL,QAA3B;;AACA,aAAOP,GAAP;AACH;;AAEDa,IAAAA,WAAW,CAACP,SAAD,EAAY,UAAUQ,EAAV,EAAc;AACjC,UAAI,CAACd,GAAG,CAACC,gBAAJ,CAAqBa,EAArB,CAAL,EAA+B;AAC3Bd,QAAAA,GAAG,CAACC,gBAAJ,CAAqBa,EAArB,IAA2B,EAA3B;AACH;;AAED,UAAId,GAAG,CAACC,gBAAJ,CAAqBa,EAArB,EAAyBJ,MAAzB,KAAoCV,GAAG,CAACG,aAA5C,EAA2D;AACvD,cAAM,IAAIY,KAAJ,CAAU,qBAAqBD,EAArB,GAA0B,oBAA1B,GAAiD,KAAKX,aAAhE,CAAN;AACH;;AAED,UAAIV,MAAM,CAACkB,QAAP,CAAgBJ,QAAhB,CAAJ,EAA+B;AAC3BP,QAAAA,GAAG,CAACC,gBAAJ,CAAqBa,EAArB,EAAyBF,IAAzB,CAA8BL,QAA9B;;AACAP,QAAAA,GAAG,CAACgB,IAAJ,CAAS,aAAT,EAAwBV,SAAxB;AACH;AACJ,KAbU,CAAX;;AAeA,WAAON,GAAP;AACH,GA7DsB;;AAgEvB;AACJ;AACA;AACA;AACA;AACA;AACIiB,EAAAA,MAAM,EAAE,UAAUX,SAAV,EAAqBC,QAArB,EAA+B;AACnC,WAAO,KAAKF,EAAL,CAAQ,WAAWC,SAAnB,EAA8BC,QAA9B,CAAP;AACH,GAxEsB;;AA2EvB;AACJ;AACA;AACA;AACA;AACA;AACIW,EAAAA,KAAK,EAAE,UAAUZ,SAAV,EAAqBC,QAArB,EAA+B;AAClC,WAAO,KAAKF,EAAL,CAAQ,UAAUC,SAAlB,EAA6BC,QAA7B,CAAP;AACH,GAnFsB;;AAsFvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIY,EAAAA,EAAE,EAAE,UAAUb,SAAV,EAAqBC,QAArB,EAA+B;AAC/B,QAAIP,GAAG,GAAG,IAAV;;AAEAa,IAAAA,WAAW,CAACP,SAAD,EAAY,UAAUQ,EAAV,EAAc;AACjC,UAAId,GAAG,CAACC,gBAAJ,CAAqBa,EAArB,KAA4BP,QAAhC,EAA0C;AACtCf,QAAAA,IAAI,CAAC4B,IAAL,CAAUpB,GAAG,CAACC,gBAAd,EAAgC,UAAUoB,KAAV,EAAiBC,SAAjB,EAA4B;AACxD,cAAIf,QAAQ,KAAKe,SAAjB,EAA4B;AACxBtB,YAAAA,GAAG,CAACC,gBAAJ,CAAqBsB,MAArB,CAA4BF,KAA5B,EAAmC,CAAnC;;AACArB,YAAAA,GAAG,CAACgB,IAAJ,CAAS,gBAAT,EAA2BV,SAA3B;AACA,mBAAO,KAAP;AACH;AACJ,SAND;AAOH,OARD,MAQO;AACHN,QAAAA,GAAG,CAACC,gBAAJ,GAAuB,EAAvB;AACH;AACJ,KAZU,CAAX;;AAcA,WAAOD,GAAP;AACH,GApHsB;;AAuHvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIgB,EAAAA,IAAI,EAAE,UAAUV;AAAS;AAAnB,IAAkC;AACpC,QAAIN,GAAG,GAAG,IAAV;AACA,QAAIwB,QAAQ,GAAGhC,IAAI,CAACiC,OAAL,CAAahB,SAAb,EAAwBiB,KAAxB,CAA8B,CAA9B,CAAf;AACA,QAAIC,GAAG,GAAG,IAAV;;AAEAd,IAAAA,WAAW,CAACP,SAAD,EAAY,UAAUQ,EAAV,EAAc;AACjC,UAAIc,IAAI,GAAGC,IAAI,CAACC,GAAL,EAAX;AAEAtC,MAAAA,IAAI,CAAC4B,IAAL,CAAUpB,GAAG,CAACE,iBAAd,EAAiC,UAAUmB,KAAV,EAAiBU,QAAjB,EAA2B;AACxD/B,QAAAA,GAAG,CAACgC,YAAJ,GAAmB;AACfC,UAAAA,IAAI,EAAEnB,EADS;AAEfoB,UAAAA,SAAS,EAAEN,IAFI;AAGfO,UAAAA,EAAE,EAAEvC,SAAS;AAHE,SAAnB;AAMAmC,QAAAA,QAAQ,CAACK,KAAT,CAAepC,GAAf,EAAoBwB,QAApB;AACH,OARD;;AAUA,UAAIxB,GAAG,CAACC,gBAAJ,CAAqBa,EAArB,CAAJ,EAA8B;AAC1BtB,QAAAA,IAAI,CAAC4B,IAAL,CAAUpB,GAAG,CAACC,gBAAJ,CAAqBa,EAArB,CAAV,EAAoC,UAAUO,KAAV,EAAiBd,QAAjB,EAA2B;AAC3DP,UAAAA,GAAG,CAACgC,YAAJ,GAAmB;AACfC,YAAAA,IAAI,EAAEnB,EADS;AAEfoB,YAAAA,SAAS,EAAEN,IAFI;AAGfO,YAAAA,EAAE,EAAEvC,SAAS;AAHE,WAAnB;;AAMA,cAAIW,QAAQ,CAAC6B,KAAT,CAAepC,GAAf,EAAoBwB,QAApB,MAAkC,KAAtC,EAA6C;AACzCG,YAAAA,GAAG,GAAG,KAAN;AACH;AACJ,SAVD;AAWH;AACJ,KA1BU,CAAX;;AA4BA,WAAOA,GAAP;AACH;AAzKsB,CAAb,CAAd;AA6KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA9B,OAAO,CAACwC,IAAR,GAAe,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,KAA1B,EAAiC;AAC5CF,EAAAA,MAAM,CAACjC,EAAP,CAAU,YAAY;AAClB,QAAI4B,IAAI,GAAG,KAAKD,YAAL,CAAkBC,IAA7B;;AAEA,QAAIQ,QAAQ,CAACR,IAAD,EAAOO,KAAP,CAAZ,EAA2B;AACvB,UAAIhC,IAAI,GAAGhB,IAAI,CAACiC,OAAL,CAAahB,SAAb,CAAX;AAEAD,MAAAA,IAAI,CAACkC,OAAL,CAAa,KAAKV,YAAL,CAAkBC,IAA/B;AACAM,MAAAA,MAAM,CAACvB,IAAP,CAAYoB,KAAZ,CAAkBG,MAAlB,EAA0B/B,IAA1B;AACH;AACJ,GATD;AAUH,CAXD;;AAcAmC,MAAM,CAACC,OAAP,GAAiB/C,OAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASgB,WAAT,CAAqBgC,UAArB,EAAiCd,QAAjC,EAA2C;AACvCvC,EAAAA,IAAI,CAAC4B,IAAL,CAAUyB,UAAU,CAACC,IAAX,GAAkBC,KAAlB,CAAwBpD,QAAxB,CAAV,EAA6C,UAAU0B,KAAV,EAAiBf,SAAjB,EAA4B;AACrEyB,IAAAA,QAAQ,CAACzB,SAAD,CAAR;AACH,GAFD;AAGH;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmC,QAAT,CAAkBO,IAAlB,EAAwBC,KAAxB,EAA+B;AAC3BA,EAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;;AAEA,MAAI,CAACA,KAAK,CAACvC,MAAX,EAAmB;AACf,WAAO,IAAP;AACH;;AAED,MAAIwC,OAAO,GAAG,IAAd;AAEA1D,EAAAA,IAAI,CAAC4B,IAAL,CAAU6B,KAAV,EAAiB,UAAU5B,KAAV,EAAiB8B,KAAjB,EAAwB;AACrC,QAAIC,IAAI,GAAGD,KAAK,CAAC,CAAD,CAAhB,CADqC,CAGrC;;AACA,QAAIC,IAAI,KAAK,GAAb,EAAkB;AACdF,MAAAA,OAAO,GAAG,IAAV;;AAEA,UAAIF,IAAI,KAAKG,KAAK,CAACzB,KAAN,CAAY,CAAZ,CAAb,EAA6B;AACzBwB,QAAAA,OAAO,GAAG,KAAV;AACA,eAAO,KAAP;AACH;AACJ,KAPD,CAQA;AARA,SASK;AACDA,QAAAA,OAAO,GAAG,KAAV;;AAEA,YAAIF,IAAI,KAAKG,KAAb,EAAoB;AAChBD,UAAAA,OAAO,GAAG,IAAV;AACA,iBAAO,KAAP;AACH;AACJ;AACJ,GArBD;AAuBA,SAAOA,OAAP;AACH","sourcesContent":["/**\n * emitter\n * @author ydr.me\n * @create 2015-11-14 12:32\n */\n\n\n\nvar allocation = require('./allocation.js');\nvar dato = require('./dato.js');\nvar typeis = require('./typeis.js');\nvar klass = require('./class.js');\n\nvar regSpace = /\\s+/g;\nvar emitterId = 0;\n\n\nvar Emitter = klass.create({\n    /**\n     * @constructor Emitter\n     * @type {Function}\n     */\n    constructor: function () {\n        var the = this;\n\n        // 监听的事件 map\n        the._emitterListener = {};\n        // 全局事件监听列表\n        the._emitterCallbacks = [];\n        // 监听的事件长度\n        the._emitterLimit = 999;\n        the.className = 'emitter';\n    },\n    /**\n     * 添加事件回调\n     * @method on\n     * @param {String} eventType 事件类型，多个事件类型使用空格分开\n     * @param {Function} listener 事件回调\n     * @returns {Emitter}\n     *\n     * @example\n     * var emitter = new Emitter();\n     * emitter.on('hi', fn);\n     */\n    on: function (eventType, listener) {\n        var the = this;\n        var args = allocation.args(arguments);\n\n        if (args.length === 1) {\n            listener = args[0];\n            eventType = null;\n        }\n\n        if (!typeis.function(listener)) {\n            return the;\n        }\n\n        if (!eventType) {\n            the._emitterCallbacks.push(listener);\n            return the;\n        }\n\n        _middleware(eventType, function (et) {\n            if (!the._emitterListener[et]) {\n                the._emitterListener[et] = [];\n            }\n\n            if (the._emitterListener[et].length === the._emitterLimit) {\n                throw new Error('instance event `' + et + '` pool is full as ' + this._emitterLimit);\n            }\n\n            if (typeis.function(listener)) {\n                the._emitterListener[et].push(listener);\n                the.emit('newListener', eventType);\n            }\n        });\n\n        return the;\n    },\n\n\n    /**\n     * 添加事件触发前事件\n     * @param eventType {String} 事件，只有 emit beforesomeevent 的事件才可以被监听\n     * @param listener {Function} 事件回调\n     * @returns {Emitter}\n     */\n    before: function (eventType, listener) {\n        return this.on('before' + eventType, listener);\n    },\n\n\n    /**\n     * 添加事件触发后事件\n     * @param eventType {String} 事件，只有 emit beforesomeevent 的事件才可以被监听\n     * @param listener {Function} 事件回调\n     * @returns {Emitter}\n     */\n    after: function (eventType, listener) {\n        return this.on('after' + eventType, listener);\n    },\n\n\n    /**\n     * 移除事件回调\n     * @method un\n     * @param {String} eventType 事件类型，多个事件类型使用空格分开\n     * @param {Function} [listener] 事件回调，缺省时将移除该事件类型上的所有事件回调\n     * @returns {Emitter}\n     *\n     * @example\n     * var emitter = new Emitter();\n     * emitter.un('hi', fn);\n     * emitter.un('hi');\n     */\n    un: function (eventType, listener) {\n        var the = this;\n\n        _middleware(eventType, function (et) {\n            if (the._emitterListener[et] && listener) {\n                dato.each(the._emitterListener, function (index, _listener) {\n                    if (listener === _listener) {\n                        the._emitterListener.splice(index, 1);\n                        the.emit('removeListener', eventType);\n                        return false;\n                    }\n                });\n            } else {\n                the._emitterListener = [];\n            }\n        });\n\n        return the;\n    },\n\n\n    /**\n     * 事件触发，只要有一个事件返回false，那么就返回false，非链式调用\n     * @method emit\n     * @param {String} [eventType] 事件类型，多个事件类型使用空格分开\n     * @returns {*} 函数执行结果\n     *\n     * @example\n     * var emitter = new Emitter();\n     * emitter.emit('hi', 1, 2, 3);\n     * emitter.emit('hi', 1, 2);\n     * emitter.emit('hi', 1);\n     * emitter.emit('hi');\n     *\n     * // 为 before* 的事件可以被派发到 before 回调\n     * // 为 after* 的开头的事件可以被派发到 after 回调\n     */\n    emit: function (eventType/*arguments*/) {\n        var the = this;\n        var emitArgs = dato.toArray(arguments).slice(1);\n        var ret = true;\n\n        _middleware(eventType, function (et) {\n            var time = Date.now();\n\n            dato.each(the._emitterCallbacks, function (index, callback) {\n                the.alienEmitter = {\n                    type: et,\n                    timestamp: time,\n                    id: emitterId++\n                };\n\n                callback.apply(the, emitArgs);\n            });\n\n            if (the._emitterListener[et]) {\n                dato.each(the._emitterListener[et], function (index, listener) {\n                    the.alienEmitter = {\n                        type: et,\n                        timestamp: time,\n                        id: emitterId++\n                    };\n\n                    if (listener.apply(the, emitArgs) === false) {\n                        ret = false;\n                    }\n                });\n            }\n        });\n\n        return ret;\n    }\n});\n\n\n/**\n * 事件传输\n * @param source {Object} 事件来源\n * @param target {Object} 事件目标\n * @param [types] {Array} 允许和禁止的事件类型\n *\n * @example\n * name 与 ['name'] 匹配\n * name 与 ['!name'] 不匹配\n */\nEmitter.pipe = function (source, target, types) {\n    source.on(function () {\n        var type = this.alienEmitter.type;\n\n        if (_matches(type, types)) {\n            var args = dato.toArray(arguments);\n\n            args.unshift(this.alienEmitter.type);\n            target.emit.apply(target, args);\n        }\n    });\n};\n\n\nmodule.exports = Emitter;\n\n/**\n * 中间件，处理事件分发\n * @param {String} eventTypes 事件类型\n * @param {Function} callback 回调处理\n * @private\n */\nfunction _middleware(eventTypes, callback) {\n    dato.each(eventTypes.trim().split(regSpace), function (index, eventType) {\n        callback(eventType);\n    });\n}\n\n\n/**\n * 判断是否匹配\n * @param name {String} 待匹配字符串\n * @param [names] {Array} 被匹配字符串数组\n * @returns {boolean}\n * @private\n */\nfunction _matches(name, names) {\n    names = names || [];\n\n    if (!names.length) {\n        return true;\n    }\n\n    var matched = true;\n\n    dato.each(names, function (index, _name) {\n        var flag = _name[0];\n\n        // !name\n        if (flag === '!') {\n            matched = true;\n\n            if (name === _name.slice(1)) {\n                matched = false;\n                return false;\n            }\n        }\n        // name\n        else {\n            matched = false;\n\n            if (name === _name) {\n                matched = true;\n                return false;\n            }\n        }\n    });\n\n    return matched;\n}\n\n\n"]},"metadata":{},"sourceType":"module"}