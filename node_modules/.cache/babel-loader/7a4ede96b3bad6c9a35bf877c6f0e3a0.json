{"ast":null,"code":"import BaseComponent from '../../BaseComponent';\nimport ResetPasswordJsx from './ResetPassword.jsx';\nimport { withTranslation } from 'react-i18next';\nimport ResetPasswordValidate from './ResetPasswordValidate';\nimport Libs from '../../../utils/Libs';\nimport Constants from '../../../utils/Constants';\nimport EmployeeService from '../../../services/EmployeeService';\n\nclass ResetPassword extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n    this.jsxTemplate = ResetPasswordJsx;\n    this.state = {\n      curItem: {}\n    };\n  }\n\n  async onSaveAction() {\n    var {\n      t\n    } = this.props;\n    let curItem = this.state.curItem,\n        self = this;\n    var errorFlag = false;\n    var token = '';\n\n    if (Libs.isBlank(this.props) || Libs.isBlank(this.props.location) || Libs.isBlank(this.props.location.search)) {\n      window.location.href = Constants.SITE_URL.LOGIN;\n    }\n\n    token = this.props.location.search;\n    token = token.replace(\"?token=\", \"\");\n\n    if (Libs.isBlank(token)) {\n      window.location.href = Constants.SITE_URL.LOGIN;\n    }\n\n    let user = {\n      password: Libs.SHA3(curItem.password),\n      token: token\n    };\n    let v = new ResetPasswordValidate(this.props);\n    let errors = await v.FLValidationAll(curItem);\n\n    if (!Libs.isBlank(curItem.password) || !Libs.isBlank(curItem.password_confirm)) {\n      const regexp = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$/;\n      var password = curItem.password;\n\n      if (password.length < 8 || regexp.exec(password) === null) {\n        errors = Object.assign(Libs.isObjectEmpty(errors) ? {} : errors, {\n          password: t('employee.password_valid_min_8character')\n        });\n        errorFlag = true;\n      } else {\n        if (!Libs.isObjectEmpty(errors)) {\n          delete errors[password];\n        }\n\n        errorFlag = false;\n      }\n\n      var password_confirm = curItem.password_confirm;\n\n      if (password_confirm !== password || Libs.isBlank(curItem.password_confirm)) {\n        errors = Object.assign(Libs.isObjectEmpty(errors) ? {} : errors, {\n          password_confirm: t('employee.password_incorrect')\n        });\n        errorFlag = true;\n      } else {\n        errorFlag = false;\n\n        if (!Libs.isObjectEmpty(errors)) {\n          delete errors[password_confirm];\n        }\n      }\n    }\n\n    if (errors) {\n      this.setValidateMessage(errors, true);\n      errorFlag = true;\n      return;\n    } //remove message validation\n\n\n    this.removeAllValidateMessage();\n\n    if (errorFlag) {\n      return;\n    }\n\n    EmployeeService.instance.getResetPassword(user, function (data, status, mess) {\n      if (!Libs.isObjectEmpty(data)) {\n        self.toast(mess, \"info\");\n        setTimeout(function () {\n          window.location.href = Constants.SITE_URL.LOGIN;\n        }.bind(this), 2000);\n      } else {\n        self.toast(mess, \"error\");\n      }\n    }, false);\n  }\n  /**\r\n   * @description validate a field input\r\n   * @author Long.Pham 13/06/2021\r\n   * @param {*} event \r\n   */\n\n\n  async validateOne(event) {\n    var {\n      t\n    } = this.props;\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n    var curItem = this.state.curItem;\n\n    if (name) {\n      let param = {\n        [name]: value\n      };\n      let v = new ResetPasswordValidate(this.props);\n      let error = await v.validateOne(param, name);\n      const regexp = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$/;\n\n      if (name === 'password') {\n        if (value.length < 8 || regexp.exec(value) === null) {\n          error = {\n            password: t('employee.password_valid_min_8character')\n          };\n        } else {\n          error = {\n            password: ''\n          };\n        }\n      }\n\n      if (name === 'password_confirm' && Libs.isBlank(error.password_confirm)) {\n        if (curItem.password !== value) {\n          error = {\n            password_confirm: t('employee.password_incorrect')\n          };\n        } else {\n          error = {\n            password_confirm: ''\n          };\n        }\n      }\n\n      if (error != null) {\n        this.setValidateMessage(error, true);\n      }\n    }\n  }\n\n  render() {\n    return this.jsxTemplate.call(this);\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(ResetPassword);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/ResetPassword/ResetPassword.js"],"names":["BaseComponent","ResetPasswordJsx","withTranslation","ResetPasswordValidate","Libs","Constants","EmployeeService","ResetPassword","constructor","props","context","jsxTemplate","state","curItem","onSaveAction","t","self","errorFlag","token","isBlank","location","search","window","href","SITE_URL","LOGIN","replace","user","password","SHA3","v","errors","FLValidationAll","password_confirm","regexp","length","exec","Object","assign","isObjectEmpty","setValidateMessage","removeAllValidateMessage","instance","getResetPassword","data","status","mess","toast","setTimeout","bind","validateOne","event","target","name","value","param","error","render","call","HighOrderComponentTranslated"],"mappings":"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","sourcesContent":["import BaseComponent from '../../BaseComponent';\r\nimport ResetPasswordJsx from './ResetPassword.jsx';\r\nimport { withTranslation } from 'react-i18next';\r\nimport ResetPasswordValidate from './ResetPasswordValidate';\r\nimport Libs from '../../../utils/Libs';\r\nimport Constants from '../../../utils/Constants';\r\nimport EmployeeService from '../../../services/EmployeeService';\r\n\r\nclass ResetPassword extends BaseComponent {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.jsxTemplate = ResetPasswordJsx;\r\n        this.state = {\r\n            curItem: {}\r\n        };\r\n    }\r\n\r\n    async onSaveAction() {\r\n        var { t } = this.props;\r\n        let curItem = this.state.curItem, self = this;\r\n        var errorFlag = false;\r\n        var token = '';\r\n        if (Libs.isBlank(this.props) || Libs.isBlank(this.props.location) || Libs.isBlank(this.props.location.search)) {\r\n            window.location.href = Constants.SITE_URL.LOGIN;\r\n        }\r\n        token = this.props.location.search;\r\n        token = token.replace(\"?token=\", \"\");\r\n\r\n        if (Libs.isBlank(token)) {\r\n            window.location.href = Constants.SITE_URL.LOGIN;\r\n        }\r\n\r\n        let user = {\r\n            password: Libs.SHA3(curItem.password),\r\n            token: token\r\n        };\r\n\r\n        let v = new ResetPasswordValidate(this.props);\r\n        let errors = await v.FLValidationAll(curItem);\r\n        if (!Libs.isBlank(curItem.password) || !Libs.isBlank(curItem.password_confirm)) {\r\n            const regexp = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$/;\r\n            var password = curItem.password;\r\n            if (password.length < 8 || regexp.exec(password) === null) {\r\n                errors = Object.assign(Libs.isObjectEmpty(errors) ? {} : errors, { password: t('employee.password_valid_min_8character') });\r\n                errorFlag = true;\r\n            } else {\r\n                if (!Libs.isObjectEmpty(errors)) {\r\n                    delete errors[password];\r\n                }\r\n                errorFlag = false;\r\n            }\r\n\r\n            var password_confirm = curItem.password_confirm;\r\n            if (password_confirm !== password || Libs.isBlank(curItem.password_confirm)) {\r\n                errors = Object.assign(Libs.isObjectEmpty(errors) ? {} : errors, { password_confirm: t('employee.password_incorrect') });\r\n                errorFlag = true;\r\n            } else {\r\n                errorFlag = false;\r\n                if (!Libs.isObjectEmpty(errors)) {\r\n                    delete errors[password_confirm];\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if (errors) {\r\n            this.setValidateMessage(errors, true);\r\n            errorFlag = true;\r\n            return;\r\n        }\r\n        //remove message validation\r\n        this.removeAllValidateMessage();\r\n        if (errorFlag) {\r\n            return;\r\n        }\r\n\r\n\r\n        EmployeeService.instance.getResetPassword(user, function (data, status, mess) {\r\n            if (!Libs.isObjectEmpty(data)) {\r\n                self.toast(mess, \"info\");\r\n                setTimeout(\r\n                    function () { window.location.href = Constants.SITE_URL.LOGIN; }.bind(this), 2000\r\n                );\r\n            }\r\n            else {\r\n                self.toast(mess, \"error\");\r\n            }\r\n        }, false);\r\n    }\r\n\r\n\r\n    /**\r\n     * @description validate a field input\r\n     * @author Long.Pham 13/06/2021\r\n     * @param {*} event \r\n     */\r\n    async validateOne(event) {\r\n        var { t } = this.props;\r\n        let target = event.target;\r\n        let name = target.name;\r\n        let value = target.value;\r\n        var curItem = this.state.curItem;\r\n        if (name) {\r\n            let param = {\r\n                [name]: value\r\n            }\r\n            let v = new ResetPasswordValidate(this.props);\r\n            let error = await v.validateOne(param, name);\r\n            const regexp = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$/;\r\n            if (name === 'password') {\r\n                if (value.length < 8 || regexp.exec(value) === null) {\r\n                    error = { password: t('employee.password_valid_min_8character') };\r\n                } else {\r\n                    error = { password: '' };\r\n                }\r\n            }\r\n\r\n            if (name === 'password_confirm' && Libs.isBlank(error.password_confirm)) {\r\n                if (curItem.password !== value) {\r\n                    error = { password_confirm: t('employee.password_incorrect') };\r\n                } else {\r\n                    error = { password_confirm: '' };\r\n                }\r\n            }\r\n\r\n            if (error != null) {\r\n                this.setValidateMessage(error, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.jsxTemplate.call(this);\r\n    }\r\n\r\n}\r\n\r\nconst HighOrderComponentTranslated = withTranslation('common')(ResetPassword)\r\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}