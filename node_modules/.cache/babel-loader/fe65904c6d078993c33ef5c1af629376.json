{"ast":null,"code":"import BaseComponent from '../../../BaseComponent';\nimport Libs from '../../../../utils/Libs';\nimport Constants from '../../../../utils/Constants';\nimport AddChangePasswordJsx from './AddChangePassword.jsx';\nimport AddChangePasswordValidate from './AddChangePasswordValidate';\nimport EmployeeService from '../../../../services/EmployeeService';\n\nclass AddChangePassword extends BaseComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      curItem: {}\n    };\n    this.jsxTemplate = AddChangePasswordJsx;\n  }\n\n  generatePassword() {\n    var curItem = this.state.curItem;\n    var password = Libs.generateStrRandom(2, 2, 2, 2);\n    curItem.password = password;\n    curItem.password_confirm = password;\n    this.setState({\n      curItem: curItem\n    });\n    this.setValidateMessage({\n      password: ''\n    }, true);\n    this.setValidateMessage({\n      password_confirm: ''\n    }, true);\n  }\n  /**\n   * @description validate a field input\n   * @author Long.Pham 12/05/2021\n   * @param {*} event \n   */\n\n\n  async validateOne(event) {\n    var {\n      t\n    } = this.props;\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n    var curItem = this.state.curItem;\n\n    if (name) {\n      let param = {\n        [name]: value\n      };\n      let v = new AddChangePasswordValidate(this.props);\n      let error = await v.validateOne(param, name);\n      const regexp = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$/;\n\n      if (name === 'password') {\n        if (value.length < 8 || regexp.exec(value) === null) {\n          error = {\n            password: t('employee.password_valid_min_8character')\n          };\n        } else {\n          error = {\n            password: ''\n          };\n        }\n      }\n\n      if (name === 'password_confirm' && Libs.isBlank(error.password_confirm)) {\n        if (curItem.password !== value) {\n          error = {\n            password_confirm: t('employee.password_incorrect')\n          };\n        } else {\n          error = {\n            password_confirm: ''\n          };\n        }\n      }\n\n      if (error != null) {\n        this.setValidateMessage(error, true);\n      }\n    }\n  }\n  /**\n   * @description save data\n   * @author long.pham 12/05/2021\n   */\n\n\n  async onSave() {\n    var {\n      t\n    } = this.props;\n    var curItem = this.state.curItem,\n        self = this;\n    var params = Object.assign({}, this.state.curItem);\n    var screenMode = Constants.SCREEN_MODE.EDIT;\n    let v = new AddChangePasswordValidate(this.props);\n    let errors = await v.FLValidationAll(params);\n\n    if (!Libs.isBlank(curItem.password) || !Libs.isBlank(curItem.password_confirm)) {\n      const regexp = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$/;\n      var password = curItem.password;\n\n      if (password.length < 8 || regexp.exec(password) === null) {\n        errors = Object.assign(Libs.isObjectEmpty(errors) ? {} : errors, {\n          password: t('employee.password_valid_min_8character')\n        });\n      } else {\n        if (!Libs.isObjectEmpty(errors)) {\n          delete errors[password];\n        }\n      }\n\n      var password_confirm = curItem.password_confirm;\n\n      if (password_confirm !== password || Libs.isBlank(curItem.password_confirm)) {\n        errors = Object.assign(Libs.isObjectEmpty(errors) ? {} : errors, {\n          password_confirm: t('employee.password_incorrect')\n        });\n      } else {\n        if (!Libs.isObjectEmpty(errors)) {\n          delete errors[password_confirm];\n        }\n      }\n    }\n\n    if (errors) {\n      this.setValidateMessage(errors);\n      return;\n    } //remove message validation\n\n\n    this.removeAllValidateMessage();\n    params.screen_mode = screenMode;\n    params.iso_code = this.employee.iso_code;\n    params.email = this.employee.email;\n    params.password = Libs.SHA3(curItem.password);\n    params.current_password = Libs.SHA3(curItem.current_password);\n    params.id = this.employee.id_employee;\n    delete params.password_confirm;\n    EmployeeService.instance.employeeChangePassword(params, (status, data, msg) => {\n      if (status) {\n        self.toast(msg, 'info');\n        self.props.onCloseChangePassword();\n      } else {\n        if (data) {\n          self.setValidateMessage(data);\n        } else {\n          if (!Libs.isBlank(msg)) {\n            self.toast(msg, 'error');\n          }\n        }\n      }\n    }, true);\n  }\n\n}\n\nexport default AddChangePassword;","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/src/containers/views/desktop/Account/AddChangePassword.js"],"names":["BaseComponent","Libs","Constants","AddChangePasswordJsx","AddChangePasswordValidate","EmployeeService","AddChangePassword","constructor","props","state","curItem","jsxTemplate","generatePassword","password","generateStrRandom","password_confirm","setState","setValidateMessage","validateOne","event","t","target","name","value","param","v","error","regexp","length","exec","isBlank","onSave","self","params","Object","assign","screenMode","SCREEN_MODE","EDIT","errors","FLValidationAll","isObjectEmpty","removeAllValidateMessage","screen_mode","iso_code","employee","email","SHA3","current_password","id","id_employee","instance","employeeChangePassword","status","data","msg","toast","onCloseChangePassword"],"mappings":"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","sourcesContent":["\nimport BaseComponent from '../../../BaseComponent';\nimport Libs from '../../../../utils/Libs';\nimport Constants from '../../../../utils/Constants';\nimport AddChangePasswordJsx from './AddChangePassword.jsx';\nimport AddChangePasswordValidate from './AddChangePasswordValidate';\nimport EmployeeService from '../../../../services/EmployeeService';\n\nclass AddChangePassword extends BaseComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            curItem: {}\n        }\n\n        this.jsxTemplate = AddChangePasswordJsx;\n    }\n\n\n    generatePassword() {\n        var curItem = this.state.curItem;\n        var password = Libs.generateStrRandom(2, 2, 2, 2);\n        curItem.password = password;\n        curItem.password_confirm = password;\n        this.setState({ curItem: curItem });\n        this.setValidateMessage({ password: '' }, true);\n        this.setValidateMessage({ password_confirm: '' }, true);\n    }\n\n\n\n    /**\n     * @description validate a field input\n     * @author Long.Pham 12/05/2021\n     * @param {*} event \n     */\n    async validateOne(event) {\n        var { t } = this.props;\n        let target = event.target;\n        let name = target.name;\n        let value = target.value;\n        var curItem = this.state.curItem;\n        if (name) {\n            let param = {\n                [name]: value\n            }\n            let v = new AddChangePasswordValidate(this.props);\n            let error = await v.validateOne(param, name);\n            const regexp = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$/;\n            if (name === 'password') {\n                if (value.length < 8 || regexp.exec(value) === null) {\n                    error = { password: t('employee.password_valid_min_8character') };\n                } else {\n                    error = { password: '' };\n                }\n            }\n\n            if (name === 'password_confirm' && Libs.isBlank(error.password_confirm)) {\n                if (curItem.password !== value) {\n                    error = { password_confirm: t('employee.password_incorrect') };\n                } else {\n                    error = { password_confirm: '' };\n                }\n            }\n\n            if (error != null) {\n                this.setValidateMessage(error, true);\n            }\n        }\n    }\n\n    /**\n     * @description save data\n     * @author long.pham 12/05/2021\n     */\n    async onSave() {\n        var { t } = this.props;\n        var curItem = this.state.curItem, self = this;\n        var params = Object.assign({}, this.state.curItem);\n        var screenMode = Constants.SCREEN_MODE.EDIT;\n        let v = new AddChangePasswordValidate(this.props);\n        let errors = await v.FLValidationAll(params);\n\n        if (!Libs.isBlank(curItem.password) || !Libs.isBlank(curItem.password_confirm)) {\n            const regexp = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$/;\n            var password = curItem.password;\n            if (password.length < 8 || regexp.exec(password) === null) {\n                errors = Object.assign(Libs.isObjectEmpty(errors) ? {} : errors, { password: t('employee.password_valid_min_8character') });\n            } else {\n                if (!Libs.isObjectEmpty(errors)) {\n                    delete errors[password];\n                }\n            }\n\n            var password_confirm = curItem.password_confirm;\n            if (password_confirm !== password || Libs.isBlank(curItem.password_confirm)) {\n                errors = Object.assign(Libs.isObjectEmpty(errors) ? {} : errors, { password_confirm: t('employee.password_incorrect') });\n            } else {\n                if (!Libs.isObjectEmpty(errors)) {\n                    delete errors[password_confirm];\n                }\n            }\n        }\n\n        if (errors) {\n            this.setValidateMessage(errors);\n            return;\n        }\n\n        //remove message validation\n        this.removeAllValidateMessage();\n        params.screen_mode = screenMode;\n        params.iso_code = this.employee.iso_code;\n        params.email = this.employee.email;\n        params.password = Libs.SHA3(curItem.password);\n        params.current_password = Libs.SHA3(curItem.current_password);\n        params.id = this.employee.id_employee;\n\n        delete params.password_confirm;\n        EmployeeService.instance.employeeChangePassword(params, (status, data, msg) => {\n            if (status) {\n                self.toast(msg, 'info');\n                self.props.onCloseChangePassword();\n            } else {\n                if (data) {\n                    self.setValidateMessage(data);\n                } else {\n                    if (!Libs.isBlank(msg)) {\n                        self.toast(msg, 'error');\n                    }\n                }\n\n            }\n        }, true);\n    }\n}\nexport default AddChangePassword;"]},"metadata":{},"sourceType":"module"}