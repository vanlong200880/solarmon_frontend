{"ast":null,"code":"import BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport Constants from '../../../../../utils/Constants';\nimport AddPopupJsx from './AddPopup.jsx';\nimport AddPopupValidate from './AddPopupValidate';\nimport ProjectGroupService from '../../../../../services/ProjectGroupService';\n\nclass AddPopup extends BaseComponent {\n  constructor(props) {\n    super(props);\n\n    this.onClickShowTab = (e, tabActive) => {\n      var curItem = this.state.curItem;\n      if (Libs.isBlank(tabActive)) return;\n      curItem.tabActive = tabActive;\n      this.setState({\n        curItem: curItem\n      });\n    };\n\n    this.handleInputTranslateChange = event => {\n      var target = event.target;\n      var name = target.name;\n      var value = target.value;\n\n      if (target.type === 'checkbox') {\n        value = target.checked ? 1 : 0;\n      }\n\n      if (name) {\n        let item = this.state.curItem;\n        let allLanguage = this.state.allLanguage;\n        let isoCode = name.substr(-2, 2),\n            dataName = name.substr(0, 4),\n            dataDescription = name.substr(0, 11);\n        allLanguage.map((language, index) => {\n          if (isoCode === language.iso_code && dataName === 'name') {\n            item.data[index].name = event.target.validity.valid ? value : this.state.curItem.data[index].name;\n          }\n\n          if (isoCode === language.iso_code && dataDescription === 'description') {\n            item.data[index].description = event.target.validity.valid ? value : this.state.curItem.data[index].description;\n          }\n\n          return 1;\n        });\n        item[name] = event.target.validity.valid ? value : this.state.curItem[name];\n        this.setState({\n          curItem: item\n        });\n      }\n    };\n\n    this.state = {\n      curItem: this.props.curItem,\n      allLanguage: this.props.allLanguage\n    };\n    this.jsxTemplate = AddPopupJsx;\n  }\n  /**\n   * @description Called immediately after the component is mounted in the DOM. Called after the render function\n   * @author Long.Pham 12/05/2021\n   */\n\n\n  componentDidMount() {\n    var curItem = this.state.curItem;\n\n    if (curItem.screen_mode === Constants.SCREEN_MODE.ADD) {\n      curItem.status = 1;\n    }\n  }\n\n  /**\n   * @description validate a field input\n   * @author Long.Pham 12/05/2021\n   * @param {*} event \n   */\n  async validateOne(event) {\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (name) {\n      let param = {\n        [name]: value\n      };\n      let v = new AddPopupValidate(this.props);\n      let error = await v.validateOne(param, name);\n\n      if (error != null) {\n        this.setValidateMessage(error, true);\n      }\n    }\n  }\n  /**\n   * @description select change\n   * @author Long.Pham 12/05/2021\n   * @param {*} event \n   */\n\n\n  /**\n   * @description save data\n   * @author long.pham 12/05/2021\n   */\n  async onSave() {\n    var curItem = this.state.curItem,\n        self = this;\n    var params = Object.assign({}, this.state.curItem);\n    var screenMode = !Libs.isBlank(curItem.id) ? Constants.SCREEN_MODE.EDIT : !Libs.isBlank(this.props.curItem.screen_mode) ? this.props.curItem.screen_mode : Constants.SCREEN_MODE.ADD;\n    let v = new AddPopupValidate(this.props);\n    let errors = await v.FLValidationAll(curItem);\n\n    if (errors) {\n      this.setValidateMessage(errors);\n      return;\n    } //remove message validation\n\n\n    this.removeAllValidateMessage();\n    params.screen_mode = screenMode;\n    params.iso_code_lang = this.employee.lang;\n    params.id_language = this.employee.id_language;\n\n    if (Libs.isArrayData(params.data)) {\n      let itemLanguageDefault = Libs.find(params.data, 'is_default', 1);\n      if (!itemLanguageDefault) return;\n      params.data.map((item, index) => {\n        params.data[index].name = item.name === '' ? itemLanguageDefault.name : item.name;\n        params.data[index].description = item.description === '' ? itemLanguageDefault.description : item.description;\n        return params;\n      });\n    } else {\n      return false;\n    }\n\n    ProjectGroupService.instance.save(params, function (status, data, msg) {\n      if (status) {\n        self.toast(msg, \"info\");\n        self.props.onClickCloseAdd(true);\n      } else if (data) {\n        self.setValidateMessage(data);\n      } else if (!Libs.isBlank(msg)) {\n        self.toast(msg, \"error\");\n      }\n    }, true);\n  }\n\n}\n\nexport default AddPopup;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/desktop/ModuleSystem/ProjectGroup/AddPopup.js"],"names":["BaseComponent","Libs","Constants","AddPopupJsx","AddPopupValidate","ProjectGroupService","AddPopup","constructor","props","onClickShowTab","e","tabActive","curItem","state","isBlank","setState","handleInputTranslateChange","event","target","name","value","type","checked","item","allLanguage","isoCode","substr","dataName","dataDescription","map","language","index","iso_code","data","validity","valid","description","jsxTemplate","componentDidMount","screen_mode","SCREEN_MODE","ADD","status","validateOne","param","v","error","setValidateMessage","onSave","self","params","Object","assign","screenMode","id","EDIT","errors","FLValidationAll","removeAllValidateMessage","iso_code_lang","employee","lang","id_language","isArrayData","itemLanguageDefault","find","instance","save","msg","toast","onClickCloseAdd"],"mappings":"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","sourcesContent":["\nimport BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport Constants from '../../../../../utils/Constants';\nimport AddPopupJsx from './AddPopup.jsx';\nimport AddPopupValidate from './AddPopupValidate';\nimport ProjectGroupService from '../../../../../services/ProjectGroupService';\n\nclass AddPopup extends BaseComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            curItem: this.props.curItem,\n            allLanguage: this.props.allLanguage\n        }\n\n        this.jsxTemplate = AddPopupJsx;\n    }\n    /**\n     * @description Called immediately after the component is mounted in the DOM. Called after the render function\n     * @author Long.Pham 12/05/2021\n     */\n    componentDidMount() {\n        var curItem = this.state.curItem;\n        if (curItem.screen_mode === Constants.SCREEN_MODE.ADD) {\n            curItem.status = 1;\n        }\n    }\n\n    onClickShowTab = (e, tabActive) => {\n        var curItem = this.state.curItem;\n        if (Libs.isBlank(tabActive)) return;\n        curItem.tabActive = tabActive;\n\n        this.setState({\n            curItem: curItem\n        });\n    }\n\n\n    /**\n     * @description validate a field input\n     * @author Long.Pham 12/05/2021\n     * @param {*} event \n     */\n    async validateOne(event) {\n        let target = event.target;\n        let name = target.name;\n        let value = target.value\n        if (name) {\n            let param = {\n                [name]: value\n            }\n            let v = new AddPopupValidate(this.props);\n            let error = await v.validateOne(param, name);\n            if (error != null) {\n                this.setValidateMessage(error, true);\n            }\n        }\n    }\n\n    /**\n     * @description select change\n     * @author Long.Pham 12/05/2021\n     * @param {*} event \n     */\n\n    handleInputTranslateChange = (event) => {\n        var target = event.target;\n        var name = target.name;\n        var value = target.value;\n        if (target.type === 'checkbox') {\n            value = target.checked ? 1 : 0;\n        }\n        if (name) {\n            let item = this.state.curItem;\n            let allLanguage = this.state.allLanguage;\n            let isoCode = name.substr(-2, 2),\n                dataName = name.substr(0, 4),\n                dataDescription = name.substr(0, 11);\n\n            allLanguage.map((language, index) => {\n                if (isoCode === language.iso_code && dataName === 'name') {\n                    item.data[index].name = (event.target.validity.valid) ? value : this.state.curItem.data[index].name;\n                }\n\n                if (isoCode === language.iso_code && dataDescription === 'description') {\n                    item.data[index].description = (event.target.validity.valid) ? value : this.state.curItem.data[index].description;\n                }\n                return 1;\n            });\n\n            item[name] = (event.target.validity.valid) ? value : this.state.curItem[name];\n\n            this.setState({ curItem: item });\n        }\n    }\n\n\n\n    /**\n     * @description save data\n     * @author long.pham 12/05/2021\n     */\n    async onSave() {\n        var curItem = this.state.curItem, self = this;\n        var params = Object.assign({}, this.state.curItem);\n        var screenMode = (!Libs.isBlank(curItem.id)) ? Constants.SCREEN_MODE.EDIT : ((!Libs.isBlank(this.props.curItem.screen_mode)) ? this.props.curItem.screen_mode : Constants.SCREEN_MODE.ADD);\n        let v = new AddPopupValidate(this.props);\n        let errors = await v.FLValidationAll(curItem);\n        if (errors) {\n            this.setValidateMessage(errors);\n            return;\n        }\n        //remove message validation\n        this.removeAllValidateMessage();\n        params.screen_mode = screenMode;\n        params.iso_code_lang = this.employee.lang;\n        params.id_language = this.employee.id_language;\n\n        if (Libs.isArrayData(params.data)) {\n            let itemLanguageDefault = Libs.find(params.data, 'is_default', 1);\n            if (!itemLanguageDefault) return;\n\n            params.data.map((item, index) => {\n                params.data[index].name = (item.name === '') ? itemLanguageDefault.name : item.name;\n                params.data[index].description = (item.description === '') ? itemLanguageDefault.description : item.description;\n                return params;\n\n            });\n        } else { return false; }\n\n\n        ProjectGroupService.instance.save( params, function (status, data, msg) {\n            if (status) {\n                self.toast(msg, \"info\");\n                self.props.onClickCloseAdd(true);\n            }\n            else if (data) {\n                self.setValidateMessage(data);\n            }\n\n            else if (!Libs.isBlank(msg)) {\n                self.toast(msg, \"error\");\n            }\n        }, true);\n    }\n}\nexport default AddPopup;"]},"metadata":{},"sourceType":"module"}