{"ast":null,"code":"var _jsxFileName = \"/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/desktop/ModulePrivate/Config/PVModelSetting/PVModelSetting.js\";\nimport PVModelSettingJsx from './PVModelSetting.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport Constants from '../../../../../../utils/Constants';\nimport MainConfigService from '../../../../../../services/MainConfigService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PVModelSetting extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleDropdownChange = (item, name) => {\n      var self = this;\n      let curItem = self.state.curItem;\n\n      if (Libs.isObjectEmpty(item)) {\n        if (name == 'poa_irradiance') {\n          curItem.poa_irradiance = null;\n        } else if (name == 'panel_temperature') {\n          curItem.panel_temperature = null;\n        }\n      } else {\n        var value = item.value;\n        curItem[name] = value;\n      }\n\n      self.setState({\n        curItem: curItem\n      });\n    };\n\n    this.state = {\n      curItem: {},\n      itemDevice: this.props.itemDevice,\n      dataListSensor: []\n    };\n    this.jsxTemplate = PVModelSettingJsx;\n    this.handleDropdownChange = this.handleDropdownChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.getListDeviceSensor();\n    this.getDeviceDetail();\n  }\n\n  getListDeviceSensor() {\n    let self = this;\n    let params = {\n      hash_id: this.state.hash_id\n    };\n    MainConfigService.instance.getListDeviceSensor(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataListSensor: data\n        });\n      } else {\n        self.setState({\n          dataListSensor: []\n        });\n      }\n    });\n  }\n\n  getDeviceDetail() {\n    let self = this,\n        itemDevice = this.props.itemDevice;\n    var params = {\n      id: itemDevice.id,\n      id_employee: this.employee.id_employee,\n      id_language: this.employee.id_language\n    };\n    MainConfigService.instance.getDeviceDetail(params, data => {\n      if (data) {\n        self.setState({\n          curItem: data\n        });\n      }\n    }, false);\n  }\n\n  async onSave() {\n    var self = this;\n    var params = Object.assign({}, this.state.curItem);\n    params.screen_mode = Constants.SCREEN_MODE.EDIT;\n    params.id_language = this.employee.id_language;\n    MainConfigService.instance.updateDevice(params, function (status, data, msg) {\n      if (status) {\n        self.toast(msg, \"info\");\n      } else if (data) {\n        self.setValidateMessage(data);\n      } else if (!Libs.isBlank(msg)) {\n        self.toast(msg, \"error\");\n      }\n    }, true);\n  }\n\n  render() {\n    var {\n      itemDevice\n    } = this.state;\n\n    switch (parseInt(itemDevice.id_device_group)) {\n      case 18: // innvert \n\n      case 19: // innvert\n\n      case 20: // innvert\n\n      case 21: // 6 string \n\n      case 22: // innvert\n\n      case 28: // 12 string\n\n      case 29: // emeter\n\n      case 30:\n        // emeter\n        return this.jsxTemplate.call(this);\n\n      default:\n        return Libs.isObjectEmpty(itemDevice) ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-empty\",\n          children: \"Device is not selected \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 57\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-empty\",\n          children: \"There is no configuration for this device\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 117\n        }, this);\n    }\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(PVModelSetting);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/desktop/ModulePrivate/Config/PVModelSetting/PVModelSetting.js"],"names":["PVModelSettingJsx","BaseComponent","Libs","withTranslation","Constants","MainConfigService","PVModelSetting","constructor","props","context","handleDropdownChange","item","name","self","curItem","state","isObjectEmpty","poa_irradiance","panel_temperature","value","setState","itemDevice","dataListSensor","jsxTemplate","bind","componentDidMount","getListDeviceSensor","getDeviceDetail","params","hash_id","instance","data","total_row","isArrayData","id","id_employee","employee","id_language","onSave","Object","assign","screen_mode","SCREEN_MODE","EDIT","updateDevice","status","msg","toast","setValidateMessage","isBlank","render","parseInt","id_device_group","call","HighOrderComponentTranslated"],"mappings":"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","sourcesContent":["import PVModelSettingJsx from './PVModelSetting.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport Constants from '../../../../../../utils/Constants';\nimport MainConfigService from '../../../../../../services/MainConfigService';\n\nclass PVModelSetting extends BaseComponent {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            curItem: {},\n            itemDevice: this.props.itemDevice,\n            dataListSensor: []\n\n        };\n\n        this.jsxTemplate = PVModelSettingJsx;\n        this.handleDropdownChange = this.handleDropdownChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.getListDeviceSensor();\n        this.getDeviceDetail();\n    }\n\n    handleDropdownChange = (item, name) => {\n        var self = this;\n        let curItem = self.state.curItem;\n\n        if (Libs.isObjectEmpty(item)) {\n            if (name == 'poa_irradiance') {\n                curItem.poa_irradiance = null;\n            } else if (name == 'panel_temperature') {\n                curItem.panel_temperature = null;\n            }\n\n        } else {\n            var value = item.value;\n            curItem[name] = value;\n        }\n\n        self.setState({\n            curItem: curItem\n        });\n    }\n\n    getListDeviceSensor() {\n        let self = this;\n        let params = {\n            hash_id: this.state.hash_id\n        };\n\n        MainConfigService.instance.getListDeviceSensor(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataListSensor: data\n                });\n            } else {\n                self.setState({\n                    dataListSensor: []\n                });\n            }\n        });\n    }\n\n    getDeviceDetail() {\n        let self = this, itemDevice = this.props.itemDevice;\n        var params = {\n            id: itemDevice.id,\n            id_employee: this.employee.id_employee,\n            id_language: this.employee.id_language\n        };\n\n        MainConfigService.instance.getDeviceDetail(params, data => {\n            if (data) {\n                self.setState({\n                    curItem: data\n                });\n            }\n        }, false);\n\n    }\n\n\n    async onSave() {\n        var self = this;\n        var params = Object.assign({}, this.state.curItem);\n        params.screen_mode = Constants.SCREEN_MODE.EDIT;\n        params.id_language = this.employee.id_language;\n\n        MainConfigService.instance.updateDevice(params, function (status, data, msg) {\n            if (status) {\n                self.toast(msg, \"info\");\n            }\n            else if (data) {\n                self.setValidateMessage(data);\n            }\n\n            else if (!Libs.isBlank(msg)) {\n                self.toast(msg, \"error\");\n            }\n        }, true);\n    }\n\n    render() {\n        var { itemDevice } = this.state;\n        switch (parseInt(itemDevice.id_device_group)) {\n            case 18: // innvert \n            case 19: // innvert\n            case 20: // innvert\n            case 21: // 6 string \n            case 22: // innvert\n            case 28: // 12 string\n            case 29: // emeter\n            case 30: // emeter\n                return this.jsxTemplate.call(this);\n            default:\n                return Libs.isObjectEmpty(itemDevice) ? <div className=\"data-empty\">Device is not selected </div> : <div className=\"data-empty\">There is no configuration for this device</div>;\n        }\n    }\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(PVModelSetting)\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}