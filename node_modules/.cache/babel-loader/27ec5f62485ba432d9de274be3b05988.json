{"ast":null,"code":"/**\n * emitter\n * @author ydr.me\n * @create 2015-11-14 12:32\n */var allocation=require('./allocation.js');var dato=require('./dato.js');var typeis=require('./typeis.js');var klass=require('./class.js');var regSpace=/\\s+/g;var emitterId=0;var Emitter=klass.create({/**\n     * @constructor Emitter\n     * @type {Function}\n     */constructor:function constructor(){var the=this;// 监听的事件 map\nthe._emitterListener={};// 全局事件监听列表\nthe._emitterCallbacks=[];// 监听的事件长度\nthe._emitterLimit=999;the.className='emitter';},/**\n     * 添加事件回调\n     * @method on\n     * @param {String} eventType 事件类型，多个事件类型使用空格分开\n     * @param {Function} listener 事件回调\n     * @returns {Emitter}\n     *\n     * @example\n     * var emitter = new Emitter();\n     * emitter.on('hi', fn);\n     */on:function on(eventType,listener){var the=this;var args=allocation.args(arguments);if(args.length===1){listener=args[0];eventType=null;}if(!typeis.function(listener)){return the;}if(!eventType){the._emitterCallbacks.push(listener);return the;}_middleware(eventType,function(et){if(!the._emitterListener[et]){the._emitterListener[et]=[];}if(the._emitterListener[et].length===the._emitterLimit){throw new Error('instance event `'+et+'` pool is full as '+this._emitterLimit);}if(typeis.function(listener)){the._emitterListener[et].push(listener);the.emit('newListener',eventType);}});return the;},/**\n     * 添加事件触发前事件\n     * @param eventType {String} 事件，只有 emit beforesomeevent 的事件才可以被监听\n     * @param listener {Function} 事件回调\n     * @returns {Emitter}\n     */before:function before(eventType,listener){return this.on('before'+eventType,listener);},/**\n     * 添加事件触发后事件\n     * @param eventType {String} 事件，只有 emit beforesomeevent 的事件才可以被监听\n     * @param listener {Function} 事件回调\n     * @returns {Emitter}\n     */after:function after(eventType,listener){return this.on('after'+eventType,listener);},/**\n     * 移除事件回调\n     * @method un\n     * @param {String} eventType 事件类型，多个事件类型使用空格分开\n     * @param {Function} [listener] 事件回调，缺省时将移除该事件类型上的所有事件回调\n     * @returns {Emitter}\n     *\n     * @example\n     * var emitter = new Emitter();\n     * emitter.un('hi', fn);\n     * emitter.un('hi');\n     */un:function un(eventType,listener){var the=this;_middleware(eventType,function(et){if(the._emitterListener[et]&&listener){dato.each(the._emitterListener,function(index,_listener){if(listener===_listener){the._emitterListener.splice(index,1);the.emit('removeListener',eventType);return false;}});}else{the._emitterListener=[];}});return the;},/**\n     * 事件触发，只要有一个事件返回false，那么就返回false，非链式调用\n     * @method emit\n     * @param {String} [eventType] 事件类型，多个事件类型使用空格分开\n     * @returns {*} 函数执行结果\n     *\n     * @example\n     * var emitter = new Emitter();\n     * emitter.emit('hi', 1, 2, 3);\n     * emitter.emit('hi', 1, 2);\n     * emitter.emit('hi', 1);\n     * emitter.emit('hi');\n     *\n     * // 为 before* 的事件可以被派发到 before 回调\n     * // 为 after* 的开头的事件可以被派发到 after 回调\n     */emit:function emit(eventType/*arguments*/){var the=this;var emitArgs=dato.toArray(arguments).slice(1);var ret=true;_middleware(eventType,function(et){var time=Date.now();dato.each(the._emitterCallbacks,function(index,callback){the.alienEmitter={type:et,timestamp:time,id:emitterId++};callback.apply(the,emitArgs);});if(the._emitterListener[et]){dato.each(the._emitterListener[et],function(index,listener){the.alienEmitter={type:et,timestamp:time,id:emitterId++};if(listener.apply(the,emitArgs)===false){ret=false;}});}});return ret;}});/**\n * 事件传输\n * @param source {Object} 事件来源\n * @param target {Object} 事件目标\n * @param [types] {Array} 允许和禁止的事件类型\n *\n * @example\n * name 与 ['name'] 匹配\n * name 与 ['!name'] 不匹配\n */Emitter.pipe=function(source,target,types){source.on(function(){var type=this.alienEmitter.type;if(_matches(type,types)){var args=dato.toArray(arguments);args.unshift(this.alienEmitter.type);target.emit.apply(target,args);}});};module.exports=Emitter;/**\n * 中间件，处理事件分发\n * @param {String} eventTypes 事件类型\n * @param {Function} callback 回调处理\n * @private\n */function _middleware(eventTypes,callback){dato.each(eventTypes.trim().split(regSpace),function(index,eventType){callback(eventType);});}/**\n * 判断是否匹配\n * @param name {String} 待匹配字符串\n * @param [names] {Array} 被匹配字符串数组\n * @returns {boolean}\n * @private\n */function _matches(name,names){names=names||[];if(!names.length){return true;}var matched=true;dato.each(names,function(index,_name){var flag=_name[0];// !name\nif(flag==='!'){matched=true;if(name===_name.slice(1)){matched=false;return false;}}// name\nelse{matched=false;if(name===_name){matched=true;return false;}}});return matched;}","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/src/validator/libs/emitter.js"],"names":["allocation","require","dato","typeis","klass","regSpace","emitterId","Emitter","create","constructor","the","_emitterListener","_emitterCallbacks","_emitterLimit","className","on","eventType","listener","args","arguments","length","function","push","_middleware","et","Error","emit","before","after","un","each","index","_listener","splice","emitArgs","toArray","slice","ret","time","Date","now","callback","alienEmitter","type","timestamp","id","apply","pipe","source","target","types","_matches","unshift","module","exports","eventTypes","trim","split","name","names","matched","_name","flag"],"mappings":"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","sourcesContent":["/**\n * emitter\n * @author ydr.me\n * @create 2015-11-14 12:32\n */\n\n\n\nvar allocation = require('./allocation.js');\nvar dato = require('./dato.js');\nvar typeis = require('./typeis.js');\nvar klass = require('./class.js');\n\nvar regSpace = /\\s+/g;\nvar emitterId = 0;\n\n\nvar Emitter = klass.create({\n    /**\n     * @constructor Emitter\n     * @type {Function}\n     */\n    constructor: function () {\n        var the = this;\n\n        // 监听的事件 map\n        the._emitterListener = {};\n        // 全局事件监听列表\n        the._emitterCallbacks = [];\n        // 监听的事件长度\n        the._emitterLimit = 999;\n        the.className = 'emitter';\n    },\n    /**\n     * 添加事件回调\n     * @method on\n     * @param {String} eventType 事件类型，多个事件类型使用空格分开\n     * @param {Function} listener 事件回调\n     * @returns {Emitter}\n     *\n     * @example\n     * var emitter = new Emitter();\n     * emitter.on('hi', fn);\n     */\n    on: function (eventType, listener) {\n        var the = this;\n        var args = allocation.args(arguments);\n\n        if (args.length === 1) {\n            listener = args[0];\n            eventType = null;\n        }\n\n        if (!typeis.function(listener)) {\n            return the;\n        }\n\n        if (!eventType) {\n            the._emitterCallbacks.push(listener);\n            return the;\n        }\n\n        _middleware(eventType, function (et) {\n            if (!the._emitterListener[et]) {\n                the._emitterListener[et] = [];\n            }\n\n            if (the._emitterListener[et].length === the._emitterLimit) {\n                throw new Error('instance event `' + et + '` pool is full as ' + this._emitterLimit);\n            }\n\n            if (typeis.function(listener)) {\n                the._emitterListener[et].push(listener);\n                the.emit('newListener', eventType);\n            }\n        });\n\n        return the;\n    },\n\n\n    /**\n     * 添加事件触发前事件\n     * @param eventType {String} 事件，只有 emit beforesomeevent 的事件才可以被监听\n     * @param listener {Function} 事件回调\n     * @returns {Emitter}\n     */\n    before: function (eventType, listener) {\n        return this.on('before' + eventType, listener);\n    },\n\n\n    /**\n     * 添加事件触发后事件\n     * @param eventType {String} 事件，只有 emit beforesomeevent 的事件才可以被监听\n     * @param listener {Function} 事件回调\n     * @returns {Emitter}\n     */\n    after: function (eventType, listener) {\n        return this.on('after' + eventType, listener);\n    },\n\n\n    /**\n     * 移除事件回调\n     * @method un\n     * @param {String} eventType 事件类型，多个事件类型使用空格分开\n     * @param {Function} [listener] 事件回调，缺省时将移除该事件类型上的所有事件回调\n     * @returns {Emitter}\n     *\n     * @example\n     * var emitter = new Emitter();\n     * emitter.un('hi', fn);\n     * emitter.un('hi');\n     */\n    un: function (eventType, listener) {\n        var the = this;\n\n        _middleware(eventType, function (et) {\n            if (the._emitterListener[et] && listener) {\n                dato.each(the._emitterListener, function (index, _listener) {\n                    if (listener === _listener) {\n                        the._emitterListener.splice(index, 1);\n                        the.emit('removeListener', eventType);\n                        return false;\n                    }\n                });\n            } else {\n                the._emitterListener = [];\n            }\n        });\n\n        return the;\n    },\n\n\n    /**\n     * 事件触发，只要有一个事件返回false，那么就返回false，非链式调用\n     * @method emit\n     * @param {String} [eventType] 事件类型，多个事件类型使用空格分开\n     * @returns {*} 函数执行结果\n     *\n     * @example\n     * var emitter = new Emitter();\n     * emitter.emit('hi', 1, 2, 3);\n     * emitter.emit('hi', 1, 2);\n     * emitter.emit('hi', 1);\n     * emitter.emit('hi');\n     *\n     * // 为 before* 的事件可以被派发到 before 回调\n     * // 为 after* 的开头的事件可以被派发到 after 回调\n     */\n    emit: function (eventType/*arguments*/) {\n        var the = this;\n        var emitArgs = dato.toArray(arguments).slice(1);\n        var ret = true;\n\n        _middleware(eventType, function (et) {\n            var time = Date.now();\n\n            dato.each(the._emitterCallbacks, function (index, callback) {\n                the.alienEmitter = {\n                    type: et,\n                    timestamp: time,\n                    id: emitterId++\n                };\n\n                callback.apply(the, emitArgs);\n            });\n\n            if (the._emitterListener[et]) {\n                dato.each(the._emitterListener[et], function (index, listener) {\n                    the.alienEmitter = {\n                        type: et,\n                        timestamp: time,\n                        id: emitterId++\n                    };\n\n                    if (listener.apply(the, emitArgs) === false) {\n                        ret = false;\n                    }\n                });\n            }\n        });\n\n        return ret;\n    }\n});\n\n\n/**\n * 事件传输\n * @param source {Object} 事件来源\n * @param target {Object} 事件目标\n * @param [types] {Array} 允许和禁止的事件类型\n *\n * @example\n * name 与 ['name'] 匹配\n * name 与 ['!name'] 不匹配\n */\nEmitter.pipe = function (source, target, types) {\n    source.on(function () {\n        var type = this.alienEmitter.type;\n\n        if (_matches(type, types)) {\n            var args = dato.toArray(arguments);\n\n            args.unshift(this.alienEmitter.type);\n            target.emit.apply(target, args);\n        }\n    });\n};\n\n\nmodule.exports = Emitter;\n\n/**\n * 中间件，处理事件分发\n * @param {String} eventTypes 事件类型\n * @param {Function} callback 回调处理\n * @private\n */\nfunction _middleware(eventTypes, callback) {\n    dato.each(eventTypes.trim().split(regSpace), function (index, eventType) {\n        callback(eventType);\n    });\n}\n\n\n/**\n * 判断是否匹配\n * @param name {String} 待匹配字符串\n * @param [names] {Array} 被匹配字符串数组\n * @returns {boolean}\n * @private\n */\nfunction _matches(name, names) {\n    names = names || [];\n\n    if (!names.length) {\n        return true;\n    }\n\n    var matched = true;\n\n    dato.each(names, function (index, _name) {\n        var flag = _name[0];\n\n        // !name\n        if (flag === '!') {\n            matched = true;\n\n            if (name === _name.slice(1)) {\n                matched = false;\n                return false;\n            }\n        }\n        // name\n        else {\n            matched = false;\n\n            if (name === _name) {\n                matched = true;\n                return false;\n            }\n        }\n    });\n\n    return matched;\n}\n\n\n"]},"metadata":{},"sourceType":"module"}