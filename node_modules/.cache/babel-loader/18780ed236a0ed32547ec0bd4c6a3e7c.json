{"ast":null,"code":"import React from 'react';\nimport ChartDeviceDiagnosticsJsx from './ChartDeviceDiagnostics.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport Constants from '../../../../../../utils/Constants';\nimport MainAnalyticsService from '../../../../../../services/MainAnalyticsService';\nimport moment from 'moment';\n\nclass ChartDeviceDiagnostics extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleClickOutside = event => {\n      const {\n        target\n      } = event;\n      var {\n        chartParams\n      } = this.state,\n          self = this;\n\n      if (!this.wrapperRef.current.contains(target)) {\n        if (chartParams.show_filter) {\n          chartParams.show_filter = false;\n          self.setState({\n            chartParams: chartParams\n          });\n        }\n      }\n    };\n\n    this.onClickShowFilter = () => {\n      var {\n        chartParams\n      } = this.state;\n      chartParams.show_filter = true;\n      this.setState({\n        chartParams: chartParams\n      });\n    };\n\n    this.changeViewMinute = value => {\n      var chartParams = this.state.chartParams,\n          self = this;\n      if (Libs.isBlank(value)) return;\n      chartParams.data_send_time = value;\n      this.setState({\n        chartParams: chartParams\n      }, () => {\n        self.loadDataChart();\n      });\n    };\n\n    this.onClickFilter = value => {\n      var {\n        chartParams,\n        dataFilter,\n        curItem\n      } = this.state;\n      var self = this;\n      if (!Libs.isArrayData(dataFilter)) return;\n      var item = Libs.find(dataFilter, 'id', value);\n      if (Libs.isObjectEmpty(item)) return;\n      chartParams.id_filter = item.id;\n      chartParams.text_filter = item.text;\n      chartParams.show_filter = false;\n      chartParams.showNextBtn = false;\n\n      switch (value) {\n        case 'today':\n          chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n          chartParams.max_date = Libs.getCurrentMMDDYYYYHI();\n          break;\n\n        case '3_day':\n          chartParams.end_date = Libs.getCurrentDDMMYYYY();\n          chartParams.start_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n          chartParams.start_max_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n          chartParams.max_date = Libs.getCurrentDDMMYYYY();\n          break;\n\n        case 'this_month':\n          chartParams.max_date = moment().format('MM/YYYY');\n          chartParams.end_date = moment().format('MM/YYYY');\n          break;\n\n        case 'last_month':\n          chartParams.max_date = moment().format('MM/YYYY');\n          var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n          var ylast = tlast.getFullYear(),\n              mlast = tlast.getMonth();\n          chartParams.end_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).endOf('month').format('MM/YYYY');\n          chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).format('MM/YYYY');\n          break;\n\n        case 'lifetime':\n        case '12_month':\n          chartParams.max_date = moment().format('MM/YYYY');\n          chartParams.end_date = moment().format('MM/YYYY');\n          chartParams.start_date = moment(Libs.addMonths(Libs.getCurrentMMDDYYYYHI(), -12)).format('MM/YYYY');\n          break;\n        // case 'lifetime':\n        //     chartParams.start_date = moment(curItem.commissioning).format('MM/DD/YYYY HH:mm:ss');\n        //     chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n        //     break;\n      }\n\n      this.setState({\n        chartParams: chartParams\n      }, () => {\n        self.loadDataChart();\n      });\n    };\n\n    this.handleDeviceInputChange = (e, index) => {\n      var {\n        dataListDevice\n      } = this.state;\n      var self = this;\n      if (!Libs.isArrayData(dataListDevice)) return;\n      var item = dataListDevice[index];\n      if (Libs.isObjectEmpty(item)) return;\n      dataListDevice[index].is_checked = dataListDevice[index].is_checked ? 0 : 1;\n      this.setState({\n        dataListDevice: dataListDevice\n      }, () => {\n        self.loadDataChart();\n      });\n    };\n\n    this.handleDropdownChange = (item, name) => {\n      var self = this;\n      let {\n        curItem\n      } = self.state;\n\n      if (Libs.isObjectEmpty(item) && name == 'type_diagnostics') {\n        curItem.type_diagnostics = '';\n      } else if (Libs.isObjectEmpty(item) && name == 'type_string_index') {\n        curItem.type_string_index = '';\n      } else {\n        var value = item.value;\n        curItem[name] = value;\n      }\n\n      var dataStringIndex = [];\n\n      if (name == 'type_diagnostics') {\n        if (value == 1) {\n          dataStringIndex = [{\n            id: 1,\n            value: 1,\n            label: \"Power\"\n          }, {\n            id: 2,\n            value: 2,\n            label: \"Voltage\"\n          }, {\n            id: 3,\n            value: 3,\n            label: \"Current\"\n          }, {\n            id: 4,\n            value: 4,\n            label: \"Energy\"\n          }];\n          curItem.type_string_index = 1;\n        } else if (value == 2) {\n          dataStringIndex = [{\n            id: 1,\n            value: 1,\n            label: \"Power\"\n          }, {\n            id: 2,\n            value: 2,\n            label: \"Voltage\"\n          }];\n          curItem.type_string_index = 1;\n        } else if (value == 3) {\n          dataStringIndex = [{\n            id: 1,\n            value: 1,\n            label: \"Power\"\n          }, {\n            id: 2,\n            value: 2,\n            label: \"Voltage\"\n          }, {\n            id: 3,\n            value: 3,\n            label: \"Current\"\n          }];\n          curItem.type_string_index = 1;\n        }\n\n        self.setState({\n          curItem: curItem,\n          dataStringIndex: dataStringIndex\n        }, () => {\n          self.loadDataChart();\n        });\n      } else {\n        self.setState({\n          curItem: curItem\n        }, () => {\n          self.loadDataChart();\n        });\n      }\n    };\n\n    this.state = {\n      hash_id: this.props.hash_id,\n      curItem: {\n        data_send_time: 1,\n        type: 2,\n        type_diagnostics: 1,\n        type_string_index: 1\n      },\n      dataParameter: [],\n      chartToolOption: {},\n      dataFilter: [{\n        id: \"today\",\n        text: \"Today\"\n      }, {\n        id: \"3_day\",\n        text: \"3 days\"\n      }, {\n        id: \"this_month\",\n        text: \"This month\"\n      }, {\n        id: \"last_month\",\n        text: \"Last month\"\n      }, {\n        id: \"12_month\",\n        text: \"Last 12 months\"\n      }, {\n        id: \"lifetime\",\n        text: \"Lifetime\"\n      }],\n      dataListDevice: [],\n      dataDiagnostics: [{\n        id: 1,\n        value: 1,\n        label: \"AC Output\"\n      }, {\n        id: 2,\n        value: 2,\n        label: \"DC Input\"\n      }, {\n        id: 3,\n        value: 3,\n        label: \"DC Input Channel\"\n      }],\n      dataStringIndex: [{\n        id: 1,\n        value: 1,\n        label: \"Power\"\n      }, {\n        id: 2,\n        value: 2,\n        label: \"Voltage\"\n      }, {\n        id: 3,\n        value: 3,\n        label: \"Current\"\n      }, {\n        id: 4,\n        value: 4,\n        label: \"Energy\"\n      }],\n      dataList: [],\n      searchParam: {\n        limit: Constants.COMMON.LIMIT,\n        offset: 0,\n        index: 1\n      },\n      allLanguage: Libs.isBlank(this.employee) ? [] : this.employee.languages,\n      chartParams: {\n        id_site: null,\n        id_filter: 'today',\n        text_filter: 'Today',\n        show_filter: false,\n        showNextBtn: false,\n        current_time: Libs.getCurrentMMDDYYYYHI(),\n        end_date: Libs.getCurrentMMDDYYYYHI(),\n        start_date: Libs.getCurrentMMDDYYYYHI(),\n        data_send_time: 2\n      }\n    };\n    this.jsxTemplate = ChartDeviceDiagnosticsJsx;\n    this.wrapperRef = /*#__PURE__*/React.createRef();\n    this.myRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this.getListDeviceByProject();\n    document.addEventListener('click', this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleClickOutside);\n  }\n\n  /**\n   * get list\n   * @author Long.Pham 2019-06-03\n   */\n  getListDeviceByProject() {\n    let self = this;\n    let params = {\n      hash_id: this.state.hash_id,\n      id_employee: this.employee.id_employee,\n      id_language: this.employee.id_language,\n      type: 'private'\n    };\n    MainAnalyticsService.instance.getListDeviceByProject(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        for (var i in data) {\n          data[i].is_checked = 1;\n        }\n\n        self.setState({\n          dataListDevice: data.filter(item => item.id_device_type == 1)\n        });\n      } else {\n        self.setState({\n          dataListDevice: []\n        });\n      }\n\n      self.forceUpdate();\n      this.loadDataChart();\n    });\n  }\n\n  loadDataChart() {\n    var {\n      chartParams,\n      dataListDevice,\n      curItem\n    } = this.state,\n        self = this;\n    var dataParameter = [];\n    if (!Libs.isArrayData(dataListDevice)) return;\n    var dataDeviceChecked = dataListDevice.filter(item => item.is_checked == 1);\n\n    switch (parseInt(curItem.type_diagnostics)) {\n      case 1:\n        for (let i = 0; i < dataDeviceChecked.length; i++) {\n          var listParameter = dataDeviceChecked[i].dataParameter;\n\n          if (Libs.isArrayData(listParameter)) {\n            for (let j = 0; j < listParameter.length; j++) {\n              listParameter[j].is_checked = 0;\n\n              if (curItem.type_string_index == 1 && listParameter[j].slug == \"activePower\") {\n                listParameter[j].is_checked = 1;\n              }\n\n              if (curItem.type_string_index == 2 && listParameter[j].slug == \"dcVoltage\") {\n                listParameter[j].is_checked = 1;\n              }\n\n              if (curItem.type_string_index == 3 && listParameter[j].slug == \"acCurrent\") {\n                listParameter[j].is_checked = 1;\n              }\n\n              if (curItem.type_string_index == 4 && listParameter[j].slug == \"activeEnergy\") {\n                listParameter[j].is_checked = 1;\n              }\n            }\n          }\n\n          dataDeviceChecked[i].dataParameter = listParameter;\n          let findItem = Libs.find(dataParameter, 'id_device_group', dataDeviceChecked[i].id_device_group);\n\n          if (Libs.isObjectEmpty(findItem)) {\n            dataParameter.push(dataDeviceChecked[i]);\n          }\n        }\n\n        break;\n\n      case 2:\n        for (let i = 0; i < dataDeviceChecked.length; i++) {\n          var listParameter = dataDeviceChecked[i].dataParameter;\n\n          if (Libs.isArrayData(listParameter)) {\n            for (let j = 0; j < listParameter.length; j++) {\n              listParameter[j].is_checked = 0;\n\n              if (curItem.type_string_index == 1 && listParameter[j].slug == \"dcPower\") {\n                listParameter[j].is_checked = 1;\n              }\n\n              if (curItem.type_string_index == 2 && listParameter[j].slug == \"dcVoltage\") {\n                listParameter[j].is_checked = 1;\n              }\n\n              if (curItem.type_string_index == 3 && listParameter[j].slug == \"dcCurrent\") {\n                listParameter[j].is_checked = 1;\n              }\n            }\n          }\n\n          dataDeviceChecked[i].dataParameter = listParameter;\n          let findItem = Libs.find(dataParameter, 'id_device_group', dataDeviceChecked[i].id_device_group);\n\n          if (Libs.isObjectEmpty(findItem)) {\n            dataParameter.push(dataDeviceChecked[i]);\n          }\n        }\n\n        break;\n\n      case 3:\n        for (let i = 0; i < dataDeviceChecked.length; i++) {\n          var listParameter = dataDeviceChecked[i].dataParameter;\n\n          if (Libs.isArrayData(listParameter)) {\n            for (let j = 0; j < listParameter.length; j++) {\n              listParameter[j].is_checked = 0;\n\n              if (curItem.type_string_index == 1 && listParameter[j].slug == \"activePower\") {\n                listParameter[j].is_checked = 1;\n              }\n\n              if (curItem.type_string_index == 2 && listParameter[j].slug == \"dcVoltage\") {\n                listParameter[j].is_checked = 1;\n              }\n\n              if (curItem.type_string_index == 3 && listParameter[j].slug == \"acCurrent\") {\n                listParameter[j].is_checked = 1;\n              }\n            }\n          }\n\n          dataDeviceChecked[i].dataParameter = listParameter;\n          let findItem = Libs.find(dataParameter, 'id_device_group', dataDeviceChecked[i].id_device_group);\n\n          if (Libs.isObjectEmpty(findItem)) {\n            dataParameter.push(dataDeviceChecked[i]);\n          }\n        }\n\n        break;\n    }\n\n    if (!Libs.isArrayData(dataParameter)) return;\n    var chartToolOption = {};\n    var params = {};\n\n    switch (chartParams.id_filter) {\n      case 'today':\n        params.start_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\");\n        params.end_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\");\n        break;\n\n      case '3_day':\n        params.start_date = Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\";\n        params.end_date = Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\";\n        break;\n\n      case 'last_month':\n      case 'this_month':\n        params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n        params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n        break;\n\n      case 'lifetime':\n      case '12_month':\n        params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n        params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n        break;\n    }\n\n    params.id_language = this.employee.id_language;\n    params.id_employee = this.employee.id_employee;\n    params.dataDevice = dataDeviceChecked;\n    params.filterBy = chartParams.id_filter;\n    params.data_send_time = chartParams.data_send_time;\n    let elHeight = document.getElementById('main-chart-view').clientHeight - 60;\n    chartToolOption.chart = {\n      zoomType: 'xy',\n      height: elHeight ? elHeight : null\n    };\n    chartToolOption.credits = {\n      enabled: false\n    };\n    chartToolOption.exporting = {\n      enabled: true\n    };\n    chartToolOption.title = {\n      text: null,\n      align: 'left'\n    };\n    chartToolOption.xAxis = [];\n    chartToolOption.yAxis = [];\n    chartToolOption.tooltip = {\n      shared: true,\n      crosshairs: true\n    };\n    chartToolOption.plotOptions = {\n      series: {\n        turboThreshold: 5000\n      },\n      column: {\n        stacking: 'normal'\n      }\n    };\n    chartToolOption.series = [];\n    var tickInterval = 24;\n\n    switch (chartParams.id_filter) {\n      case 'today':\n        if (chartParams.data_send_time == 1) {\n          tickInterval = 24;\n        } else if (chartParams.data_send_time == 2) {\n          tickInterval = 12;\n        } else if (chartParams.data_send_time == 3) {\n          tickInterval = 2;\n        }\n\n        break;\n\n      case '3_day':\n        if (chartParams.data_send_time == 1) {\n          tickInterval = 168;\n        } else if (chartParams.data_send_time == 2) {\n          tickInterval = 57;\n        } else if (chartParams.data_send_time == 3) {\n          tickInterval = 15;\n        }\n\n        break;\n\n      case 'last_month':\n      case 'this_month':\n        tickInterval = 4;\n        break;\n\n      case 'lifetime':\n      case '12_month':\n        tickInterval = 1;\n        break;\n    }\n\n    var paramerter = [];\n\n    for (var j = 0, leng = dataParameter.length; j < leng; j++) {\n      var childs = dataParameter[j].dataParameter;\n      if (!Libs.isArrayData(childs)) return;\n      var dataChildTmp = childs.filter(item => item.is_checked == 1);\n\n      if (Libs.isArrayData(dataChildTmp)) {\n        paramerter.push(...dataChildTmp);\n      }\n    }\n\n    if (!Libs.isArrayData(paramerter)) return;\n    params.type = 'private';\n    MainAnalyticsService.instance.getChartByListDevice(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        var categories = [],\n            series = [],\n            yAxis = [];\n        var yAxisUnit = [];\n\n        for (var i = 0; i < paramerter.length; i++) {\n          if (i === 0) {\n            yAxisUnit.push(paramerter[i]);\n            yAxis.push({\n              gridLineWidth: 1,\n              lineWidth: 1,\n              labels: {\n                enabled: true\n              },\n              title: {\n                text: !Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : '',\n                enabled: true\n              },\n              opposite: false\n            });\n          } else {\n            var findyAxisUnit = Libs.find(yAxisUnit, 'unit', paramerter[i].unit);\n\n            if (Libs.isObjectEmpty(findyAxisUnit)) {\n              yAxisUnit.push(paramerter[i]);\n              yAxis.push({\n                gridLineWidth: 1,\n                lineWidth: 1,\n                labels: {\n                  enabled: true\n                },\n                title: {\n                  text: !Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : '',\n                  enabled: true\n                },\n                opposite: true\n              });\n            }\n          }\n\n          var idyAxis = 0;\n\n          if (Libs.isArrayData(yAxisUnit)) {\n            yAxisUnit.map((h, index) => {\n              if (paramerter[i].unit == h.unit) {\n                idyAxis = index;\n              }\n            });\n          }\n\n          for (let k = 0, lenk = data.length; k < lenk; k++) {\n            var findSeries = Libs.find(series, 'id', data[k].id);\n\n            if (Libs.isObjectEmpty(findSeries)) {\n              var seriesItem = {\n                id: data[k].id,\n                name: data[k].device_name + \" - \" + paramerter[i].name,\n                type: 'spline',\n                yAxis: idyAxis,\n                tooltip: {\n                  valueSuffix: ' ' + (!Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : '')\n                },\n                data: [],\n                gridLineWidth: 1,\n                lineWidth: 1,\n                marker: {\n                  radius: 1.5,\n                  enabled: false\n                }\n              };\n              var dataRow = data[k].data;\n              var itemData = [];\n\n              for (let j = 0; j < dataRow.length; j++) {\n                // generate series\n                var value = !Libs.isBlank(dataRow[j][paramerter[i].slug]) && dataRow[j][paramerter[i].slug] > 0 ? dataRow[j][paramerter[i].slug] : null;\n                itemData.push([dataRow[j].time_full, value]);\n                categories.push(dataRow[j].categories_time);\n              }\n\n              seriesItem.data = itemData;\n              series.push(seriesItem);\n            }\n          }\n        }\n\n        if (Libs.isArrayData(categories) && Libs.isArrayData(series) && Libs.isArrayData(yAxis)) {\n          chartToolOption.xAxis = [{\n            categories: categories,\n            alignTicks: true,\n            tickInterval: tickInterval\n          }];\n          chartToolOption.series = series;\n          chartToolOption.yAxis = yAxis;\n          this.setState({\n            chartToolOption: chartToolOption,\n            dataChartDevice: data,\n            dataExport: data\n          });\n        }\n      } else {\n        self.setState({\n          chartToolOption: {},\n          dataChartDevice: [],\n          dataExport: []\n        });\n      }\n    });\n  }\n  /**\n   * setValue method to Input\n   * @author Long.Pham 20/05/2021\n   */\n\n\n  handleInputDateChange(event) {\n    let target = event.target;\n    let name = target.name;\n    var self = this;\n    let value = target.value;\n\n    if (target.type === 'checkbox') {\n      value = target.checked ? 1 : 0;\n    }\n\n    if (name) {\n      let {\n        chartParams\n      } = this.state;\n\n      switch (chartParams.id_filter) {\n        case 'today':\n        case 'last_month':\n        case 'this_month':\n          chartParams.start_date = value;\n          chartParams[name] = value;\n          break;\n\n        case '3_day':\n          if (name == 'start_date') {\n            chartParams.start_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n              chartParams.end_date = moment(Libs.addDays(currentDate, 2)).format('DD/MM/YYYY');\n            }\n          }\n\n          if (name == 'end_date') {\n            chartParams.end_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n              chartParams.start_date = moment(Libs.addDays(currentDate, -2)).format('DD/MM/YYYY');\n            }\n          }\n\n          break;\n\n        case '12_month':\n          if (name == 'start_date') {\n            chartParams.start_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n              const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n              chartParams.end_date = moment(Libs.addMonths(startOfMonth, 12)).format('MM/YYYY');\n            }\n          }\n\n          if (name == 'end_date') {\n            chartParams.end_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n              const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n              chartParams.start_date = moment(Libs.addMonths(startOfMonth, -12)).format('MM/YYYY');\n            }\n          }\n\n          break;\n      }\n\n      self.setState({\n        chartParams: chartParams\n      });\n      self.loadDataChart();\n    }\n  }\n\n  render() {\n    return this.jsxTemplate.call(this);\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(ChartDeviceDiagnostics);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/src/containers/views/desktop/ModulePrivate/Analytics/ChartDeviceDiagnostics/ChartDeviceDiagnostics.js"],"names":["React","ChartDeviceDiagnosticsJsx","BaseComponent","Libs","withTranslation","Constants","MainAnalyticsService","moment","ChartDeviceDiagnostics","constructor","props","context","handleClickOutside","event","target","chartParams","state","self","wrapperRef","current","contains","show_filter","setState","onClickShowFilter","changeViewMinute","value","isBlank","data_send_time","loadDataChart","onClickFilter","dataFilter","curItem","isArrayData","item","find","isObjectEmpty","id_filter","id","text_filter","text","showNextBtn","end_date","getCurrentMMDDYYYYHI","max_date","getCurrentDDMMYYYY","start_date","addDays","format","start_max_date","tlast","Date","ylast","getFullYear","mlast","getMonth","addMonths","endOf","handleDeviceInputChange","e","index","dataListDevice","is_checked","handleDropdownChange","name","type_diagnostics","type_string_index","dataStringIndex","label","hash_id","type","dataParameter","chartToolOption","dataDiagnostics","dataList","searchParam","limit","COMMON","LIMIT","offset","allLanguage","employee","languages","id_site","current_time","jsxTemplate","createRef","myRef","componentDidMount","getListDeviceByProject","document","addEventListener","componentWillUnmount","removeEventListener","params","id_employee","id_language","instance","data","total_row","i","filter","id_device_type","forceUpdate","dataDeviceChecked","parseInt","length","listParameter","j","slug","findItem","id_device_group","push","convertAllFormatDate","dateFormat","dataDevice","filterBy","elHeight","getElementById","clientHeight","chart","zoomType","height","credits","enabled","exporting","title","align","xAxis","yAxis","tooltip","shared","crosshairs","plotOptions","series","turboThreshold","column","stacking","tickInterval","paramerter","leng","childs","dataChildTmp","getChartByListDevice","categories","yAxisUnit","gridLineWidth","lineWidth","labels","unit","opposite","findyAxisUnit","idyAxis","map","h","k","lenk","findSeries","seriesItem","device_name","valueSuffix","marker","radius","dataRow","itemData","time_full","categories_time","alignTicks","dataChartDevice","dataExport","handleInputDateChange","checked","arrDate","split","currentDate","startOfMonth","startOf","render","call","HighOrderComponentTranslated"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ChartDeviceDiagnosticsJsx from './ChartDeviceDiagnostics.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport Constants from '../../../../../../utils/Constants';\nimport MainAnalyticsService from '../../../../../../services/MainAnalyticsService';\n\nimport moment from 'moment';\nclass ChartDeviceDiagnostics extends BaseComponent {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            hash_id: this.props.hash_id,\n            curItem: {\n                data_send_time: 1,\n                type: 2,\n                type_diagnostics: 1,\n                type_string_index: 1\n            },\n            dataParameter: [],\n            chartToolOption: {},\n            dataFilter: [\n                { id: \"today\", text: \"Today\" },\n                { id: \"3_day\", text: \"3 days\" },\n                { id: \"this_month\", text: \"This month\" },\n                { id: \"last_month\", text: \"Last month\" },\n                { id: \"12_month\", text: \"Last 12 months\" },\n                { id: \"lifetime\", text: \"Lifetime\" }\n            ],\n\n\n            dataListDevice: [],\n            dataDiagnostics: [\n                {\n                    id: 1,\n                    value: 1,\n                    label: \"AC Output\"\n                },\n                {\n                    id: 2,\n                    value: 2,\n                    label: \"DC Input\"\n                },\n                {\n                    id: 3,\n                    value: 3,\n                    label: \"DC Input Channel\"\n                }\n            ],\n\n            dataStringIndex: [\n                {\n                    id: 1,\n                    value: 1,\n                    label: \"Power\"\n                },\n                {\n                    id: 2,\n                    value: 2,\n                    label: \"Voltage\"\n                },\n                {\n                    id: 3,\n                    value: 3,\n                    label: \"Current\"\n                },\n                {\n                    id: 4,\n                    value: 4,\n                    label: \"Energy\"\n                }\n            ],\n\n            dataList: [],\n            searchParam: {\n                limit: Constants.COMMON.LIMIT,\n                offset: 0,\n                index: 1,\n            },\n            allLanguage: Libs.isBlank(this.employee) ? [] : this.employee.languages,\n\n            chartParams: {\n                id_site: null,\n                id_filter: 'today',\n                text_filter: 'Today',\n                show_filter: false,\n                showNextBtn: false,\n                current_time: Libs.getCurrentMMDDYYYYHI(),\n                end_date: Libs.getCurrentMMDDYYYYHI(),\n                start_date: Libs.getCurrentMMDDYYYYHI(),\n                data_send_time: 2\n            },\n        };\n\n        this.jsxTemplate = ChartDeviceDiagnosticsJsx;\n        this.wrapperRef = React.createRef();\n        this.myRef = React.createRef();\n\n    }\n\n    componentDidMount() {\n        this.getListDeviceByProject();\n        document.addEventListener('click', this.handleClickOutside);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('click', this.handleClickOutside)\n    }\n\n    handleClickOutside = (event) => {\n        const { target } = event;\n        var { chartParams } = this.state, self = this;\n        if (!this.wrapperRef.current.contains(target)) {\n            if (chartParams.show_filter) {\n                chartParams.show_filter = false;\n                self.setState({\n                    chartParams: chartParams\n                })\n            }\n        }\n    }\n\n    onClickShowFilter = () => {\n        var { chartParams } = this.state;\n        chartParams.show_filter = true;\n        this.setState({\n            chartParams: chartParams\n        });\n    }\n\n\n    changeViewMinute = (value) => {\n        var chartParams = this.state.chartParams, self = this;\n        if (Libs.isBlank(value)) return;\n        chartParams.data_send_time = value;\n        this.setState({ chartParams: chartParams }, () => {\n            self.loadDataChart();\n        });\n    }\n\n\n    onClickFilter = (value) => {\n        var { chartParams, dataFilter, curItem } = this.state;\n        var self = this;\n        if (!Libs.isArrayData(dataFilter)) return;\n        var item = Libs.find(dataFilter, 'id', value);\n        if (Libs.isObjectEmpty(item)) return;\n\n        chartParams.id_filter = item.id;\n        chartParams.text_filter = item.text;\n        chartParams.show_filter = false;\n        chartParams.showNextBtn = false;\n\n        switch (value) {\n            case 'today':\n                chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n                chartParams.max_date = Libs.getCurrentMMDDYYYYHI();\n                break;\n            case '3_day':\n                chartParams.end_date = Libs.getCurrentDDMMYYYY();\n                chartParams.start_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n                chartParams.start_max_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n                chartParams.max_date = Libs.getCurrentDDMMYYYY();\n                break;\n\n            case 'this_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                chartParams.end_date = moment().format('MM/YYYY');\n                break;\n            case 'last_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n                var ylast = tlast.getFullYear(), mlast = tlast.getMonth();\n                chartParams.end_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).endOf('month').format('MM/YYYY');\n                chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).format('MM/YYYY');\n                break;\n\n            case 'lifetime':\n            case '12_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                chartParams.end_date = moment().format('MM/YYYY');\n                chartParams.start_date = moment(Libs.addMonths(Libs.getCurrentMMDDYYYYHI(), -12)).format('MM/YYYY');\n\n                break;\n            // case 'lifetime':\n            //     chartParams.start_date = moment(curItem.commissioning).format('MM/DD/YYYY HH:mm:ss');\n            //     chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n            //     break;\n        }\n\n        this.setState({\n            chartParams: chartParams\n        }, () => {\n            self.loadDataChart();\n        });\n    }\n\n\n    handleDeviceInputChange = (e, index) => {\n        var { dataListDevice } = this.state;\n        var self = this;\n        if (!Libs.isArrayData(dataListDevice)) return;\n        var item = dataListDevice[index];\n        if (Libs.isObjectEmpty(item)) return;\n        dataListDevice[index].is_checked = dataListDevice[index].is_checked ? 0 : 1;\n        this.setState({\n            dataListDevice: dataListDevice\n        }, () => {\n            self.loadDataChart();\n        });\n    }\n\n\n    /**\n     * get list\n     * @author Long.Pham 2019-06-03\n     */\n    getListDeviceByProject() {\n        let self = this;\n        let params = {\n            hash_id: this.state.hash_id,\n            id_employee: this.employee.id_employee,\n            id_language: this.employee.id_language,\n            type: 'private'\n        };\n\n        MainAnalyticsService.instance.getListDeviceByProject(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                for (var i in data) { data[i].is_checked = 1; }\n                self.setState({\n                    dataListDevice: data.filter((item) => item.id_device_type == 1)\n                });\n            } else {\n                self.setState({\n                    dataListDevice: []\n                });\n            }\n            self.forceUpdate();\n            this.loadDataChart();\n        });\n    }\n\n\n\n    handleDropdownChange = (item, name) => {\n        var self = this;\n        let { curItem } = self.state;\n        if (Libs.isObjectEmpty(item) && name == 'type_diagnostics') {\n            curItem.type_diagnostics = '';\n        } else if (Libs.isObjectEmpty(item) && name == 'type_string_index') {\n            curItem.type_string_index = '';\n        } else {\n            var value = item.value;\n            curItem[name] = value;\n        }\n\n        var dataStringIndex = [];\n\n        if (name == 'type_diagnostics') {\n            if (value == 1) {\n                dataStringIndex = [\n                    { id: 1, value: 1, label: \"Power\" },\n                    { id: 2, value: 2, label: \"Voltage\" },\n                    { id: 3, value: 3, label: \"Current\" },\n                    { id: 4, value: 4, label: \"Energy\" }\n                ];\n                curItem.type_string_index = 1;\n            } else if (value == 2) {\n                dataStringIndex = [\n                    { id: 1, value: 1, label: \"Power\" },\n                    { id: 2, value: 2, label: \"Voltage\" }\n                ];\n                curItem.type_string_index = 1;\n            } else if (value == 3) {\n                dataStringIndex = [\n                    { id: 1, value: 1, label: \"Power\" },\n                    { id: 2, value: 2, label: \"Voltage\" },\n                    { id: 3, value: 3, label: \"Current\" }\n                ];\n                curItem.type_string_index = 1;\n            }\n\n            self.setState({\n                curItem: curItem,\n                dataStringIndex: dataStringIndex\n            }, () => {\n                self.loadDataChart();\n            });\n        } else {\n            self.setState({\n                curItem: curItem\n            }, () => {\n                self.loadDataChart();\n            });\n        }\n\n    }\n\n\n    loadDataChart() {\n        var { chartParams, dataListDevice, curItem } = this.state, self = this;\n        var dataParameter = [];\n        if (!Libs.isArrayData(dataListDevice)) return;\n        var dataDeviceChecked = dataListDevice.filter((item) => item.is_checked == 1);\n\n\n        switch (parseInt(curItem.type_diagnostics)) {\n            case 1:\n                for (let i = 0; i < dataDeviceChecked.length; i++) {\n                    var listParameter = dataDeviceChecked[i].dataParameter;\n                    if (Libs.isArrayData(listParameter)) {\n                        for (let j = 0; j < listParameter.length; j++) {\n                            listParameter[j].is_checked = 0;\n                            if (curItem.type_string_index == 1 && listParameter[j].slug == \"activePower\") {\n                                listParameter[j].is_checked = 1;\n                            }\n\n                            if (curItem.type_string_index == 2 && listParameter[j].slug == \"dcVoltage\") {\n                                listParameter[j].is_checked = 1;\n                            }\n\n                            if (curItem.type_string_index == 3 && listParameter[j].slug == \"acCurrent\") {\n                                listParameter[j].is_checked = 1;\n                            }\n\n                            if (curItem.type_string_index == 4 && listParameter[j].slug == \"activeEnergy\") {\n                                listParameter[j].is_checked = 1;\n                            }\n\n\n                        }\n                    }\n                    dataDeviceChecked[i].dataParameter = listParameter;\n                    let findItem = Libs.find(dataParameter, 'id_device_group', dataDeviceChecked[i].id_device_group);\n                    if (Libs.isObjectEmpty(findItem)) {\n                        dataParameter.push(dataDeviceChecked[i]);\n                    }\n                }\n\n\n                break;\n            case 2:\n                for (let i = 0; i < dataDeviceChecked.length; i++) {\n                    var listParameter = dataDeviceChecked[i].dataParameter;\n                    if (Libs.isArrayData(listParameter)) {\n                        for (let j = 0; j < listParameter.length; j++) {\n                            listParameter[j].is_checked = 0;\n                            if (curItem.type_string_index == 1 && listParameter[j].slug == \"dcPower\") {\n                                listParameter[j].is_checked = 1;\n                            }\n\n                            if (curItem.type_string_index == 2 && listParameter[j].slug == \"dcVoltage\") {\n                                listParameter[j].is_checked = 1;\n                            }\n\n                            if (curItem.type_string_index == 3 && listParameter[j].slug == \"dcCurrent\") {\n                                listParameter[j].is_checked = 1;\n                            }\n                        }\n                    }\n                    dataDeviceChecked[i].dataParameter = listParameter;\n                    let findItem = Libs.find(dataParameter, 'id_device_group', dataDeviceChecked[i].id_device_group);\n                    if (Libs.isObjectEmpty(findItem)) {\n                        dataParameter.push(dataDeviceChecked[i]);\n                    }\n                }\n                break;\n            case 3:\n\n                for (let i = 0; i < dataDeviceChecked.length; i++) {\n                    var listParameter = dataDeviceChecked[i].dataParameter;\n                    if (Libs.isArrayData(listParameter)) {\n                        for (let j = 0; j < listParameter.length; j++) {\n                            listParameter[j].is_checked = 0;\n                            if (curItem.type_string_index == 1 && listParameter[j].slug == \"activePower\") {\n                                listParameter[j].is_checked = 1;\n                            }\n\n                            if (curItem.type_string_index == 2 && listParameter[j].slug == \"dcVoltage\") {\n                                listParameter[j].is_checked = 1;\n                            }\n\n                            if (curItem.type_string_index == 3 && listParameter[j].slug == \"acCurrent\") {\n                                listParameter[j].is_checked = 1;\n                            }\n                        }\n                    }\n                    dataDeviceChecked[i].dataParameter = listParameter;\n                    let findItem = Libs.find(dataParameter, 'id_device_group', dataDeviceChecked[i].id_device_group);\n                    if (Libs.isObjectEmpty(findItem)) {\n                        dataParameter.push(dataDeviceChecked[i]);\n                    }\n                }\n                break;\n        }\n\n        if (!Libs.isArrayData(dataParameter)) return;\n        var chartToolOption = {};\n        var params = {};\n        switch (chartParams.id_filter) {\n            case 'today':\n                params.start_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\");\n                params.end_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\");\n                break;\n            case '3_day':\n                params.start_date = Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\";\n                params.end_date = Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\";\n                break;\n            case 'last_month':\n            case 'this_month':\n                params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n                params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n                break;\n            case 'lifetime':\n            case '12_month':\n                params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n                params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n                break;\n        }\n\n\n\n        params.id_language = this.employee.id_language;\n        params.id_employee = this.employee.id_employee;\n        params.dataDevice = dataDeviceChecked;\n        params.filterBy = chartParams.id_filter;\n        params.data_send_time = chartParams.data_send_time;\n\n        let elHeight = (document.getElementById('main-chart-view').clientHeight) - 60;\n\n        chartToolOption.chart = { zoomType: 'xy', height: elHeight ? elHeight : null };\n        chartToolOption.credits = { enabled: false };\n        chartToolOption.exporting = { enabled: true };\n        chartToolOption.title = {\n            text: null,\n            align: 'left'\n        };\n        chartToolOption.xAxis = [];\n        chartToolOption.yAxis = [];\n        chartToolOption.tooltip = {\n            shared: true,\n            crosshairs: true\n        };\n        chartToolOption.plotOptions = {\n            series: {\n                turboThreshold: 5000\n            },\n            column: {\n                stacking: 'normal'\n            }\n        };\n        chartToolOption.series = [];\n        var tickInterval = 24;\n        switch (chartParams.id_filter) {\n            case 'today':\n                if (chartParams.data_send_time == 1) {\n                    tickInterval = 24;\n                } else if (chartParams.data_send_time == 2) {\n                    tickInterval = 12;\n                } else if (chartParams.data_send_time == 3) {\n                    tickInterval = 2;\n                }\n\n                break;\n            case '3_day':\n                if (chartParams.data_send_time == 1) {\n                    tickInterval = 168;\n                } else if (chartParams.data_send_time == 2) {\n                    tickInterval = 57;\n                } else if (chartParams.data_send_time == 3) {\n                    tickInterval = 15;\n                }\n                break;\n            case 'last_month':\n            case 'this_month':\n                tickInterval = 4;\n                break;\n            case 'lifetime':\n            case '12_month':\n                tickInterval = 1;\n                break;\n        }\n\n        var paramerter = [];\n        for (var j = 0, leng = dataParameter.length; j < leng; j++) {\n            var childs = dataParameter[j].dataParameter;\n            if (!Libs.isArrayData(childs)) return;\n            var dataChildTmp = childs.filter((item) => item.is_checked == 1);\n            if (Libs.isArrayData(dataChildTmp)) {\n                paramerter.push(...dataChildTmp);\n            }\n        }\n\n        if (!Libs.isArrayData(paramerter)) return;\n        params.type = 'private';\n        MainAnalyticsService.instance.getChartByListDevice(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                var categories = [], series = [], yAxis = [];\n                var yAxisUnit = [];\n                for (var i = 0; i < paramerter.length; i++) {\n                    if (i === 0) {\n                        yAxisUnit.push(paramerter[i]);\n                        yAxis.push({\n                            gridLineWidth: 1,\n                            lineWidth: 1,\n                            labels: {\n                                enabled: true\n                            },\n                            title: {\n                                text: (!Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : ''),\n                                enabled: true\n                            },\n                            opposite: false\n                        });\n                    } else {\n                        var findyAxisUnit = Libs.find(yAxisUnit, 'unit', paramerter[i].unit);\n                        if (Libs.isObjectEmpty(findyAxisUnit)) {\n                            yAxisUnit.push(paramerter[i]);\n                            yAxis.push({\n                                gridLineWidth: 1,\n                                lineWidth: 1,\n                                labels: {\n                                    enabled: true\n                                },\n                                title: {\n                                    text: (!Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : ''),\n                                    enabled: true\n                                },\n                                opposite: true\n                            });\n                        }\n                    }\n\n                    var idyAxis = 0;\n\n                    if (Libs.isArrayData(yAxisUnit)) {\n                        yAxisUnit.map((h, index) => {\n                            if (paramerter[i].unit == h.unit) {\n                                idyAxis = index;\n                            }\n                        })\n                    }\n\n                    for (let k = 0, lenk = data.length; k < lenk; k++) {\n                        var findSeries = Libs.find(series, 'id', data[k].id);\n                        if (Libs.isObjectEmpty(findSeries)) {\n                            var seriesItem = {\n                                id: data[k].id,\n                                name: data[k].device_name + \" - \" + paramerter[i].name,\n                                type: 'spline',\n                                yAxis: idyAxis,\n                                tooltip: {\n                                    valueSuffix: ' ' + (!Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : '')\n                                },\n                                data: [],\n                                gridLineWidth: 1,\n                                lineWidth: 1,\n                                marker: {\n                                    radius: 1.5,\n                                    enabled: false\n                                }\n                            };\n\n                            var dataRow = data[k].data;\n                            var itemData = [];\n                            for (let j = 0; j < dataRow.length; j++) {\n                                // generate series\n                                var value = (!Libs.isBlank(dataRow[j][paramerter[i].slug]) && dataRow[j][paramerter[i].slug] > 0) ? dataRow[j][paramerter[i].slug] : null;\n                                itemData.push([dataRow[j].time_full, value]);\n                                categories.push(dataRow[j].categories_time);\n                            }\n\n                            seriesItem.data = itemData;\n                            series.push(seriesItem);\n                        }\n\n                    }\n                }\n\n                if (Libs.isArrayData(categories) && Libs.isArrayData(series) && Libs.isArrayData(yAxis)) {\n                    chartToolOption.xAxis = [\n                        {\n                            categories: categories,\n                            alignTicks: true,\n                            tickInterval: tickInterval\n                        }\n                    ];\n                    chartToolOption.series = series;\n                    chartToolOption.yAxis = yAxis;\n\n                    this.setState({\n                        chartToolOption: chartToolOption,\n                        dataChartDevice: data,\n                        dataExport: data\n                    })\n                }\n            } else {\n                self.setState({\n                    chartToolOption: {},\n                    dataChartDevice: [],\n                    dataExport: []\n                });\n            }\n        });\n    }\n\n\n    /**\n     * setValue method to Input\n     * @author Long.Pham 20/05/2021\n     */\n    handleInputDateChange(event) {\n        let target = event.target;\n        let name = target.name;\n        var self = this;\n        let value = target.value;\n        if (target.type === 'checkbox') {\n            value = target.checked ? 1 : 0;\n        }\n\n        if (name) {\n            let { chartParams } = this.state;\n            switch (chartParams.id_filter) {\n                case 'today':\n                case 'last_month':\n                case 'this_month':\n                    chartParams.start_date = value;\n                    chartParams[name] = value;\n                    break;\n                case '3_day':\n                    if (name == 'start_date') {\n                        chartParams.start_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n                            chartParams.end_date = moment(Libs.addDays(currentDate, 2)).format('DD/MM/YYYY');\n                        }\n                    }\n\n                    if (name == 'end_date') {\n                        chartParams.end_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n                            chartParams.start_date = moment(Libs.addDays(currentDate, -2)).format('DD/MM/YYYY');\n                        }\n                    }\n\n                    break;\n                case '12_month':\n                    if (name == 'start_date') {\n                        chartParams.start_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n                            const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n                            chartParams.end_date = moment(Libs.addMonths(startOfMonth, 12)).format('MM/YYYY');\n                        }\n                    }\n\n                    if (name == 'end_date') {\n                        chartParams.end_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n                            const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n                            chartParams.start_date = moment(Libs.addMonths(startOfMonth, -12)).format('MM/YYYY');\n                        }\n                    }\n                    break;\n            }\n\n            self.setState({\n                chartParams: chartParams\n            });\n            self.loadDataChart();\n        }\n    }\n\n    render() {\n        return this.jsxTemplate.call(this)\n    }\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(ChartDeviceDiagnostics)\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}