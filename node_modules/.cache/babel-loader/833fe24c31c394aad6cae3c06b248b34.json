{"ast":null,"code":"import Validation from './libs/validation';\nimport Libs from '../utils/Libs';\n\nclass BaseValidate {\n  constructor() {\n    // Check if all instance methods are implemented.\n    if (this.setRule === BaseValidate.prototype.setRule) {\n      throw new TypeError(\"Please implement abstract method setRule.\");\n    }\n\n    if (this.setAlias === BaseValidate.prototype.setAlias) {\n      throw new TypeError(\"Please implement abstract method setAlias.\");\n    }\n\n    this.v = new Validation();\n  } // validationAll(data) {\n  //     try {\n  //         // data = Libs.convertEmptyPropToNullProp(data);\n  //         this.setAlias();\n  //         this.setRule();\n  //         let self = this\n  //         return new Promise(function (resolve, reject) {\n  //             self.v.validateAll(data, function (err, path) {\n  //                 if (err) {\n  //                     resolve(err.message);\n  //                 } else {\n  //                     resolve(path);\n  //                 }\n  //             });\n  //         });\n  //     } catch (e) {\n  //         console.log(e);\n  //         // callBack(e)\n  //     }\n  // }\n\n  /**\n   * @description validate a field \n   * @author Long.Pham\n   * @since 12/05/2021\n   * @param {*} data \n   * @param {*} path \n   * @param {*} callBack \n   */\n\n\n  validateOne(data, path, callBack) {\n    try {\n      this.setAlias();\n      this.setRule();\n      let self = this;\n      return new Promise(function (resolve, reject) {\n        self.v.validateOne(data, path, function (err, rPath) {\n          if (err) {\n            resolve({\n              [path]: err.message\n            });\n          } else {\n            resolve({\n              [path]: null\n            });\n          }\n        });\n      });\n    } catch (e) {\n      callBack(e);\n    }\n  }\n  /**\n   * @description validate all data at the same time\n   * @author Long.Pham\n   * @since 12/05/2021\n   * @param {*} data \n   */\n\n\n  FLValidationAll(data, callBack) {\n    try {\n      // data = Libs.convertEmptyPropToNullProp(data);\n      this.setAlias();\n      this.setRule();\n      let self = this;\n      return new Promise(function (resolve, reject) {\n        self.v.FLValidateAll(data, function (errs) {\n          if (Object.keys(errs).length > 0) {\n            var count = 0;\n\n            for (let key in errs) {\n              let message = errs[key];\n\n              if (message === null) {\n                count++;\n              }\n            }\n\n            if (count === Object.keys(errs).length) {\n              resolve(null);\n            } else {\n              resolve(errs);\n            }\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    } catch (e) {\n      console.log(e);\n      callBack(e);\n    }\n  }\n\n  setRule() {}\n\n  setAlias() {}\n  /**\n   * @author Long.Pham\n   * @since 12-05-2021\n   * @param {field name} field_name \n   * @param {rule name} rule_name \n   * @param {rule value } rule_value \n   * @param {key message} key_msg \n   */\n\n\n  addRuleForField(field_name, rule_name, rule_value, key_msg, field_key_name) {\n    let REG_ASSIGN_VARIBLE = /\\$\\<([^{}]*?)\\>/g;\n\n    if (key_msg) {\n      key_msg = Libs.stringAssign(key_msg, [field_name, field_key_name, rule_value], REG_ASSIGN_VARIBLE);\n    }\n\n    this.v.addRule(field_name, rule_name, rule_value);\n    this.v.setMsg(field_name, rule_name, key_msg);\n  }\n\n}\n\nexport default BaseValidate;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/validator/BaseValidate.js"],"names":["Validation","Libs","BaseValidate","constructor","setRule","prototype","TypeError","setAlias","v","validateOne","data","path","callBack","self","Promise","resolve","reject","err","rPath","message","e","FLValidationAll","FLValidateAll","errs","Object","keys","length","count","key","console","log","addRuleForField","field_name","rule_name","rule_value","key_msg","field_key_name","REG_ASSIGN_VARIBLE","stringAssign","addRule","setMsg"],"mappings":"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","sourcesContent":["import Validation from './libs/validation';\nimport Libs from '../utils/Libs';\nclass BaseValidate {\n    constructor() {\n        // Check if all instance methods are implemented.\n        if (this.setRule === BaseValidate.prototype.setRule) {\n            throw new TypeError(\"Please implement abstract method setRule.\");\n        }\n        if (this.setAlias === BaseValidate.prototype.setAlias) {\n            throw new TypeError(\"Please implement abstract method setAlias.\");\n        }\n        this.v = new Validation();\n    }\n    // validationAll(data) {\n    //     try {\n    //         // data = Libs.convertEmptyPropToNullProp(data);\n    //         this.setAlias();\n    //         this.setRule();\n    //         let self = this\n    //         return new Promise(function (resolve, reject) {\n    //             self.v.validateAll(data, function (err, path) {\n    //                 if (err) {\n    //                     resolve(err.message);\n    //                 } else {\n    //                     resolve(path);\n    //                 }\n    //             });\n    //         });\n    //     } catch (e) {\n    //         console.log(e);\n    //         // callBack(e)\n    //     }\n\n    // }\n\n    /**\n     * @description validate a field \n     * @author Long.Pham\n     * @since 12/05/2021\n     * @param {*} data \n     * @param {*} path \n     * @param {*} callBack \n     */\n    validateOne(data, path, callBack) {\n        try {\n            this.setAlias();\n            this.setRule();\n            let self = this\n            return new Promise(function (resolve, reject) {\n                self.v.validateOne(data, path, function (err, rPath) {\n                    if (err) {\n                        resolve({ [path]: err.message });\n                    } else {\n                        resolve({ [path]: null });\n                    }\n                });\n            });\n        } catch (e) {\n            callBack(e);\n        }\n\n    }\n\n    /**\n     * @description validate all data at the same time\n     * @author Long.Pham\n     * @since 12/05/2021\n     * @param {*} data \n     */\n    FLValidationAll(data, callBack) {\n        try {\n            // data = Libs.convertEmptyPropToNullProp(data);\n            this.setAlias();\n            this.setRule();\n            let self = this\n            return new Promise(function (resolve, reject) {\n                self.v.FLValidateAll(data, function (errs) {\n                    if (Object.keys(errs).length > 0) {\n                        var count = 0;\n                        for (let key in errs) {\n                            let message = errs[key];\n                            if (message === null) {\n                                count++;\n                            }\n                        }\n                        if (count === Object.keys(errs).length) {\n                            resolve(null);\n                        } else {\n                            resolve(errs);\n                        }\n                    } else {\n                        resolve(null);\n                    }\n                });\n            });\n        } catch (e) {\n            console.log(e);\n            callBack(e);\n        }\n    }\n\n\n    setRule() {\n\n    }\n    setAlias() {\n\n    }\n\n    /**\n     * @author Long.Pham\n     * @since 12-05-2021\n     * @param {field name} field_name \n     * @param {rule name} rule_name \n     * @param {rule value } rule_value \n     * @param {key message} key_msg \n     */\n     addRuleForField(field_name, rule_name, rule_value, key_msg, field_key_name) {\n        let REG_ASSIGN_VARIBLE = /\\$\\<([^{}]*?)\\>/g;\n        if(key_msg){\n            \n            key_msg = Libs.stringAssign(key_msg, [field_name, field_key_name, rule_value], REG_ASSIGN_VARIBLE);\n        }\n        this.v.addRule(field_name, rule_name, rule_value);\n        this.v.setMsg(field_name, rule_name, key_msg);\n    }\n}\nexport default BaseValidate;"]},"metadata":{},"sourceType":"module"}