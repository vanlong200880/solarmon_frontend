{"ast":null,"code":"import React from 'react';\nimport ChartAlarmJsx from './ChartAlarm.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport Constants from '../../../../../../utils/Constants';\nimport MainAnalyticsService from '../../../../../../services/MainAnalyticsService';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport moment from 'moment';\n\nclass ChartAlarm extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.downloadData = () => {\n      var {\n        curItem\n      } = this.state;\n      if (!Libs.isArrayData(curItem.alarmLast12Month)) return;\n      var alarmLast12Month = curItem.alarmLast12Month;\n      var dataExport = [];\n\n      for (var i = 0, len = alarmLast12Month.length; i < len; i++) {\n        dataExport.push({\n          'Time': alarmLast12Month[i].time_full,\n          'Project name': curItem.name,\n          'Total': alarmLast12Month[i].total_alarm\n        });\n      }\n\n      const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      const fileExtension = '.xlsx';\n      const ws = XLSX.utils.json_to_sheet(dataExport, {\n        skipHeader: false\n      });\n      const wb = {\n        SheetNames: ['Alarms - Last 12 months'],\n        Sheets: {\n          'Alarms - Last 12 months': ws\n        }\n      };\n      const excelBuffer = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      const data = new Blob([excelBuffer], {\n        type: fileType\n      });\n      FileSaver.saveAs(data, \"Export-alarm-12-month-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n    };\n\n    this.state = {\n      hash_id: this.props.hash_id,\n      curItem: {},\n      dataTotalFleet: [],\n      dataList: [],\n      categories: [],\n      series: [],\n      chartOption: {},\n      searchParam: {\n        limit: Constants.COMMON.LIMIT,\n        offset: 0,\n        index: 1\n      },\n      allLanguage: Libs.isBlank(this.employee) ? [] : this.employee.languages,\n      chartParams: {\n        id_site: null,\n        id_filter: 'today',\n        text_filter: 'Today',\n        show_filter: false,\n        showNextBtn: false,\n        current_time: Libs.getCurrentMMDDYYYYHI(),\n        end_date: Libs.getCurrentMMDDYYYYHI(),\n        start_date: Libs.getCurrentMMDDYYYYHI(),\n        data_send_time: 2\n      }\n    };\n    this.paging = {\n      total: 0,\n      current: 1,\n      currentInput: 1\n    };\n    this.jsxTemplate = ChartAlarmJsx;\n  }\n\n  componentDidMount() {\n    this.getDataChartProfile();\n  }\n\n  getDataChartProfile() {\n    var {\n      hash_id,\n      curItem,\n      categories,\n      series\n    } = this.state,\n        self = this;\n    if (Libs.isBlank(hash_id)) return;\n    var params = {\n      hash_id: hash_id,\n      id_language: this.employee.id_language,\n      id_employee: this.employee.id_employee,\n      type: 'private'\n    };\n    MainAnalyticsService.instance.getChartAlarm(params, data => {\n      if (data) {\n        var alarmLast12Month = data.alarmLast12Month;\n\n        if (Libs.isArrayData(alarmLast12Month)) {\n          var dataItem = [];\n\n          for (var i = 0, len = alarmLast12Month.length; i < len; i++) {\n            categories.push(alarmLast12Month[i].time_full);\n            dataItem.push([alarmLast12Month[i].time_full, alarmLast12Month[i].total_alarm]);\n          }\n\n          series.push({\n            name: 'Alarms - Last 12 months',\n            type: 'spline',\n            data: dataItem,\n            tooltip: {\n              valueSuffix: ''\n            }\n          });\n        }\n\n        self.setState({\n          curItem: data,\n          series: series,\n          categories: categories\n        }, () => {\n          self.loadChartOption();\n        });\n      } else {\n        this.setState({\n          curItem: curItem\n        });\n      }\n    }, false);\n  }\n\n  loadChartOption() {\n    var {\n      categories,\n      series\n    } = this.state;\n    var chartOption = {\n      credits: {\n        enabled: false\n      },\n      exporting: {\n        enabled: false\n      },\n      chart: {\n        zoomType: 'xy',\n        height: 380\n      },\n      title: {\n        text: null\n      },\n      colors: ['#f5893b', '#66bc51', '#004ec3'],\n      xAxis: {\n        categories: categories,\n        crosshair: true\n      },\n      yAxis: [{\n        min: 0,\n        lineWidth: 1,\n        gridLineWidth: 1,\n        labels: {\n          format: '{value}',\n          enabled: true\n        },\n        title: {\n          text: 'kWh',\n          enabled: false\n        }\n      }],\n      tooltip: {\n        shared: true\n      },\n      legend: {\n        layout: 'horizontal',\n        align: 'center',\n        verticalAlign: 'bottom',\n        borderWidth: 0,\n        showInLegend: false\n      },\n      series: series\n    };\n    this.setState({\n      chartOption: chartOption\n    });\n  }\n\n  render() {\n    return this.jsxTemplate.call(this);\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(ChartAlarm);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/src/containers/views/desktop/ModulePrivate/Analytics/ChartAlarm/ChartAlarm.js"],"names":["React","ChartAlarmJsx","BaseComponent","Libs","withTranslation","Constants","MainAnalyticsService","FileSaver","XLSX","moment","ChartAlarm","constructor","props","context","downloadData","curItem","state","isArrayData","alarmLast12Month","dataExport","i","len","length","push","time_full","name","total_alarm","fileType","fileExtension","ws","utils","json_to_sheet","skipHeader","wb","SheetNames","Sheets","excelBuffer","write","bookType","type","data","Blob","saveAs","format","hash_id","dataTotalFleet","dataList","categories","series","chartOption","searchParam","limit","COMMON","LIMIT","offset","index","allLanguage","isBlank","employee","languages","chartParams","id_site","id_filter","text_filter","show_filter","showNextBtn","current_time","getCurrentMMDDYYYYHI","end_date","start_date","data_send_time","paging","total","current","currentInput","jsxTemplate","componentDidMount","getDataChartProfile","self","params","id_language","id_employee","instance","getChartAlarm","dataItem","tooltip","valueSuffix","setState","loadChartOption","credits","enabled","exporting","chart","zoomType","height","title","text","colors","xAxis","crosshair","yAxis","min","lineWidth","gridLineWidth","labels","shared","legend","layout","align","verticalAlign","borderWidth","showInLegend","render","call","HighOrderComponentTranslated"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ChartAlarmJsx from './ChartAlarm.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport Constants from '../../../../../../utils/Constants';\nimport MainAnalyticsService from '../../../../../../services/MainAnalyticsService';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport moment from 'moment';\n\nclass ChartAlarm extends BaseComponent {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            hash_id: this.props.hash_id,\n            curItem: {},\n            dataTotalFleet: [],\n            dataList: [],\n            categories: [],\n            series: [],\n            chartOption: {},\n            searchParam: {\n                limit: Constants.COMMON.LIMIT,\n                offset: 0,\n                index: 1,\n            },\n            allLanguage: Libs.isBlank(this.employee) ? [] : this.employee.languages,\n            chartParams: {\n                id_site: null,\n                id_filter: 'today',\n                text_filter: 'Today',\n                show_filter: false,\n                showNextBtn: false,\n                current_time: Libs.getCurrentMMDDYYYYHI(),\n                end_date: Libs.getCurrentMMDDYYYYHI(),\n                start_date: Libs.getCurrentMMDDYYYYHI(),\n                data_send_time: 2\n            },\n        };\n\n        this.paging = {\n            total: 0,\n            current: 1,\n            currentInput: 1\n        };\n\n        this.jsxTemplate = ChartAlarmJsx;\n    }\n\n    componentDidMount() {\n        this.getDataChartProfile();\n    }\n\n    getDataChartProfile() {\n        var { hash_id, curItem, categories, series } = this.state, self = this;\n        if (Libs.isBlank(hash_id)) return;\n        var params = {\n            hash_id: hash_id,\n            id_language: this.employee.id_language,\n            id_employee: this.employee.id_employee,\n            type: 'private'\n        };\n\n        MainAnalyticsService.instance.getChartAlarm(params, data => {\n            if (data) {\n                var alarmLast12Month = data.alarmLast12Month;\n                if (Libs.isArrayData(alarmLast12Month)) {\n                    var dataItem = [];\n                    for (var i = 0, len = alarmLast12Month.length; i < len; i++) {\n                        categories.push(alarmLast12Month[i].time_full);\n                        dataItem.push([alarmLast12Month[i].time_full, alarmLast12Month[i].total_alarm]);\n                    }\n\n                    series.push({\n                        name: 'Alarms - Last 12 months',\n                        type: 'spline',\n                        data: dataItem,\n                        tooltip: {\n                            valueSuffix: ''\n                        }\n                    })\n                }\n                self.setState({\n                    curItem: data,\n                    series: series,\n                    categories: categories\n\n                }, () => {\n                    self.loadChartOption();\n                });\n            } else {\n                this.setState({\n                    curItem: curItem\n                })\n            }\n        }, false);\n    }\n\n    loadChartOption() {\n        var { categories, series } = this.state;\n        var chartOption = {\n            credits: { enabled: false },\n            exporting: { enabled: false },\n            chart: {\n                zoomType: 'xy',\n                height: 380\n            },\n            title: {\n                text: null,\n\n            },\n            colors: ['#f5893b', '#66bc51', '#004ec3'],\n            xAxis: {\n                categories: categories,\n                crosshair: true\n            },\n            yAxis: [{\n                min: 0,\n                lineWidth: 1,\n                gridLineWidth: 1,\n                labels: {\n                    format: '{value}',\n                    enabled: true\n                },\n                title: {\n                    text: 'kWh',\n                    enabled: false\n                }\n            }],\n            tooltip: {\n                shared: true\n            },\n            legend: {\n\n                layout: 'horizontal',\n                align: 'center',\n                verticalAlign: 'bottom',\n                borderWidth: 0,\n                showInLegend: false\n\n            },\n\n            series: series\n        };\n\n        this.setState({\n            chartOption: chartOption\n        })\n\n    }\n\n    downloadData = () => {\n        var { curItem } = this.state;\n        if (!Libs.isArrayData(curItem.alarmLast12Month)) return;\n        var alarmLast12Month = curItem.alarmLast12Month;\n\n        var dataExport = [];\n        for (var i = 0, len = alarmLast12Month.length; i < len; i++) {\n            dataExport.push({\n                'Time': alarmLast12Month[i].time_full,\n                'Project name': curItem.name,\n                'Total': alarmLast12Month[i].total_alarm\n            });\n        }\n\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n        const fileExtension = '.xlsx';\n        const ws = XLSX.utils.json_to_sheet(dataExport, { skipHeader: false });\n        const wb = {\n            SheetNames: ['Alarms - Last 12 months'],\n            Sheets: { 'Alarms - Last 12 months': ws }\n        };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, \"Export-alarm-12-month-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n    }\n\n\n    render() {\n        return this.jsxTemplate.call(this)\n    }\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(ChartAlarm)\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}