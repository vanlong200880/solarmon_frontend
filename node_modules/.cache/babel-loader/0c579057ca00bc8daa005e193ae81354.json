{"ast":null,"code":"import BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport ViewDevicePopupJsx from './ViewDevicePopup.jsx';\nimport ClientDeviceService from '../../../../../services/ClientDeviceService';\n\nclass ViewDevicePopup extends BaseComponent {\n  constructor(props) {\n    super(props);\n\n    this.onClickShowTab = index => {\n      this.setState({\n        show_tab: index\n      });\n    };\n\n    this.state = {\n      curItem: this.props.curItem,\n      dataDeviceType: [],\n      dataList: [],\n      show_tab: this.props.show_tab,\n      dataDeviceHardware: []\n    };\n    this.jsxTemplate = ViewDevicePopupJsx;\n  }\n  /**\n   * @description Called immediately after the component is mounted in the DOM. Called after the render function\n   * @author Long.Pham 12/09/2021\n   */\n\n\n  componentDidMount() {\n    this.getDataListHardware();\n  }\n\n  /**\n   * get list\n   * @author Long.Pham 2019-06-03\n   */\n  getDataListHardware() {\n    let self = this;\n    var {\n      curItem\n    } = this.state;\n    let params = Object.assign({}, curItem);\n    params.id_language = this.employee.id_language;\n    params.id_employee = this.employee.id_employee;\n    ClientDeviceService.instance.getDataListHardware(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        curItem.last_communication = data[0].last_communication;\n        curItem.last_attempt = data[0].last_attempt;\n        self.setState({\n          dataDeviceHardware: data,\n          curItem: curItem\n        });\n      } else {\n        self.setState({\n          dataDeviceHardware: []\n        });\n      }\n    });\n  }\n  /**\n   * @description reload data\n   * @author Long.Pham 19/09/2021\n   * @param {int} index\n   */\n\n\n  reloadLatestData() {\n    let self = this;\n    self.getDataListHardware();\n  }\n\n}\n\nexport default ViewDevicePopup;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/desktop/ModulePrivate/Device/ViewDevicePopup.js"],"names":["BaseComponent","Libs","ViewDevicePopupJsx","ClientDeviceService","ViewDevicePopup","constructor","props","onClickShowTab","index","setState","show_tab","state","curItem","dataDeviceType","dataList","dataDeviceHardware","jsxTemplate","componentDidMount","getDataListHardware","self","params","Object","assign","id_language","employee","id_employee","instance","data","total_row","isArrayData","last_communication","last_attempt","reloadLatestData"],"mappings":"AACA,OAAOA,aAAP,MAA0B,2BAA1B;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,OAAOC,kBAAP,MAA+B,uBAA/B;AACA,OAAOC,mBAAP,MAAgC,6CAAhC;;AACA,MAAMC,eAAN,SAA8BJ,aAA9B,CAA4C;AACxCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAoBnBC,cApBmB,GAoBDC,KAAD,IAAW;AACxB,WAAKC,QAAL,CAAc;AACVC,QAAAA,QAAQ,EAAEF;AADA,OAAd;AAGH,KAxBkB;;AAEf,SAAKG,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,KAAKN,KAAL,CAAWM,OADX;AAETC,MAAAA,cAAc,EAAE,EAFP;AAGTC,MAAAA,QAAQ,EAAE,EAHD;AAITJ,MAAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWI,QAJZ;AAKTK,MAAAA,kBAAkB,EAAE;AALX,KAAb;AAQA,SAAKC,WAAL,GAAmBd,kBAAnB;AACH;AACD;AACJ;AACA;AACA;;;AACIe,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,mBAAL;AACH;;AAOD;AACJ;AACA;AACA;AACIA,EAAAA,mBAAmB,GAAG;AAClB,QAAIC,IAAI,GAAG,IAAX;AACA,QAAI;AAAEP,MAAAA;AAAF,QAAc,KAAKD,KAAvB;AACA,QAAIS,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,OAAlB,CAAb;AACAQ,IAAAA,MAAM,CAACG,WAAP,GAAqB,KAAKC,QAAL,CAAcD,WAAnC;AACAH,IAAAA,MAAM,CAACK,WAAP,GAAqB,KAAKD,QAAL,CAAcC,WAAnC;AACAtB,IAAAA,mBAAmB,CAACuB,QAApB,CAA6BR,mBAA7B,CAAiDE,MAAjD,EAAyD,CAACO,IAAD,EAAOC,SAAP,KAAqB;AAC1E,UAAI3B,IAAI,CAAC4B,WAAL,CAAiBF,IAAjB,CAAJ,EAA4B;AACxBf,QAAAA,OAAO,CAACkB,kBAAR,GAA6BH,IAAI,CAAC,CAAD,CAAJ,CAAQG,kBAArC;AACAlB,QAAAA,OAAO,CAACmB,YAAR,GAAuBJ,IAAI,CAAC,CAAD,CAAJ,CAAQI,YAA/B;AACAZ,QAAAA,IAAI,CAACV,QAAL,CAAc;AACVM,UAAAA,kBAAkB,EAAEY,IADV;AAEVf,UAAAA,OAAO,EAAEA;AAFC,SAAd;AAKH,OARD,MAQO;AACHO,QAAAA,IAAI,CAACV,QAAL,CAAc;AACVM,UAAAA,kBAAkB,EAAE;AADV,SAAd;AAGH;AACJ,KAdD;AAeH;AAED;AACJ;AACA;AACA;AACA;;;AACIiB,EAAAA,gBAAgB,GAAG;AACf,QAAIb,IAAI,GAAG,IAAX;AACAA,IAAAA,IAAI,CAACD,mBAAL;AACH;;AA7DuC;;AAgE5C,eAAed,eAAf","sourcesContent":["\nimport BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport ViewDevicePopupJsx from './ViewDevicePopup.jsx';\nimport ClientDeviceService from '../../../../../services/ClientDeviceService';\nclass ViewDevicePopup extends BaseComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            curItem: this.props.curItem,\n            dataDeviceType: [],\n            dataList: [],\n            show_tab: this.props.show_tab,\n            dataDeviceHardware: []\n        }\n\n        this.jsxTemplate = ViewDevicePopupJsx;\n    }\n    /**\n     * @description Called immediately after the component is mounted in the DOM. Called after the render function\n     * @author Long.Pham 12/09/2021\n     */\n    componentDidMount() {\n        this.getDataListHardware();\n    }\n\n    onClickShowTab = (index) => {\n        this.setState({\n            show_tab: index\n        })\n    }\n    /**\n     * get list\n     * @author Long.Pham 2019-06-03\n     */\n    getDataListHardware() {\n        let self = this;\n        var { curItem } = this.state;\n        let params = Object.assign({}, curItem);\n        params.id_language = this.employee.id_language;\n        params.id_employee = this.employee.id_employee;\n        ClientDeviceService.instance.getDataListHardware(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                curItem.last_communication = data[0].last_communication;\n                curItem.last_attempt = data[0].last_attempt;\n                self.setState({\n                    dataDeviceHardware: data,\n                    curItem: curItem\n                });\n\n            } else {\n                self.setState({\n                    dataDeviceHardware: []\n                });\n            }\n        });\n    }\n\n    /**\n     * @description reload data\n     * @author Long.Pham 19/09/2021\n     * @param {int} index\n     */\n    reloadLatestData() {\n        let self = this;\n        self.getDataListHardware();\n    }\n\n}\nexport default ViewDevicePopup;"]},"metadata":{},"sourceType":"module"}