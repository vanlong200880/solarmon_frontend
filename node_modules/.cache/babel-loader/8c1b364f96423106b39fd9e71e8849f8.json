{"ast":null,"code":"/**\n * 数字相关\n * @author ydr.me\n * @create 2015-05-11 13:54\n */\n\n/**\n * @module utils/number\n * @reuqires utils/typeis\n */\nvar typeis = require('./typeis.js');\n\nvar dato = require('./dato.js');\n\nvar REG_FORMAT = {\n  3: /(\\d)(?=(\\d{3})+$)/g\n}; // k,m,g,t,p\n// @ref http://searchstorage.techtarget.com/definition/Kilo-mega-giga-tera-peta-and-all-that\n\nvar abbrSuffix = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']; // var REG_BEGIN_0 = /^0+/;\n\nvar str62 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\nvar map62 = {};\ndato.repeat(62, function (index) {\n  map62[str62[index]] = index;\n});\n/**\n * 整数化\n * @param num {*} 待转换对象\n * @param [dftNum=0] {*} 当为 NaN 时的默认值\n * @returns {*}\n */\n\nexports.parseInt = function (num, dftNum) {\n  dftNum = dftNum || 0;\n  num = parseInt(num, 10);\n  return typeis.nan(num) ? dftNum : num;\n};\n/**\n * 浮点化\n * @param num {*} 待转换对象\n * @param [dftNum=0] {*} 当为 NaN 时的默认值\n * @returns {*}\n */\n\n\nexports.parseFloat = function (num, dftNum) {\n  dftNum = dftNum || 0;\n  num = parseFloat(num);\n  return typeis.nan(num) ? dftNum : num;\n};\n/**\n * 数字格式化\n * @param num {String|Number} 数字（字符串）\n * @param [separator=\",\"] {String} 分隔符\n * @param [splitLength=3] {Number} 分隔长度\n * @returns {string} 分割后的字符串\n * @example\n * number.format(123456.789);\n * // => \"123,456.789\"\n * number.format(123456.789, '-');\n * // => \"123-456.789\"\n */\n\n\nexports.format = function (num, separator, splitLength) {\n  if (typeis.number(separator)) {\n    splitLength = separator;\n    separator = ',';\n  } else {\n    separator = separator || ',';\n    splitLength = splitLength || 3;\n  }\n\n  var reg = REG_FORMAT[splitLength];\n\n  if (!reg) {\n    // /(\\d)(?=(\\d{3})+$)/g\n    reg = REG_FORMAT[splitLength] = new RegExp('(\\\\d)(?=(\\\\d{' + splitLength + '})+$)', 'g');\n  }\n\n  var arr = String(num).split('.');\n  var p1 = arr[0].replace(reg, '$1' + separator);\n  return p1 + (arr[1] ? '.' + arr[1] : '');\n};\n/**\n * 数字缩写\n * @param num {Number} 数值\n * @param [fixedLength=0] {Number} 修正长度\n * @param [step=1000] {Number} 步长\n * @returns {*}\n * @example\n * number.abbr(123456.789);\n * // => \"123k\"\n * number.abbr(123456.789, 2);\n * // => \"123.46k\"\n */\n\n\nexports.abbr = function (num, fixedLength, step) {\n  if (num < 1) {\n    return num;\n  } // 123.321 => 123\n\n\n  num = exports.parseInt(num, 0);\n  fixedLength = fixedLength || 0;\n  step = step || 1000;\n  var i = 0;\n  var j = abbrSuffix.length;\n\n  while (num >= step && ++i < j) {\n    num = num / step;\n  }\n\n  if (i === j) {\n    i = j - 1;\n  }\n\n  return exports.format(num.toFixed(fixedLength)) + abbrSuffix[i];\n}; ///**\n// * 比较两个长整型数值\n// * @param long1 {String|Number} 长整型数值字符串1\n// * @param long2 {String|Number} 长整型数值字符串2\n// * @param [operator=\">\"] {String} 比较操作符，默认比较 long1 > long2\n// * @returns {*}\n// * @example\n// * number.than('9999999999999999999999999999999999999999', '9999999999999999999999999999999999999998');\n// * // => true\n// */\n//exports.than = function (long1, long2, operator) {\n//    operator = operator || '>';\n//    long1 = String(long1).replace(REG_BEGIN_0, '');\n//    long2 = String(long2).replace(REG_BEGIN_0, '');\n//\n//    // 1. 比较长度\n//    if (long1.length > long2.length) {\n//        return operator === '>';\n//    } else if (long1.length < long2.length) {\n//        return operator === '<';\n//    }\n//\n//    // 15位是安全值\n//    var long1List = exports.format(long1, ',', 15).split(',');\n//    var long2List = exports.format(long2, ',', 15).split(',');\n//\n//    // 2. 遍历比较\n//    var ret = false;\n//\n//    long1List.forEach(function (number1, index) {\n//        var number2 = long2List[index];\n//\n//        if (number1 > number2) {\n//            ret = operator === '>';\n//            return false;\n//        } else if (number1 < number2) {\n//            ret = operator === '<';\n//            return false;\n//        }\n//    });\n//\n//    return ret;\n//};\n\n/**\n * 获取六十二进制数值\n * @param number10\n * @returns {String}\n */\n\n\nexports.to62 = function (number10) {\n  var ret = [];\n\n  var _cal = function () {\n    var y = number10 % 62;\n    number10 = exports.parseInt(number10 / 62);\n    ret.unshift(str62[y]);\n\n    if (number10) {\n      _cal();\n    }\n  };\n\n  _cal();\n\n  return ret.join('');\n};\n/**\n * 六十二进制转换为十进制\n * @param number62\n * @returns {number}\n */\n\n\nexports.from62 = function (number62) {\n  var ret = 0;\n  var len = number62.length;\n  dato.repeat(len, function (index) {\n    var pos62 = number62[index];\n    var pos10 = map62[pos62];\n    ret += pos10 * Math.pow(62, len - index - 1);\n  });\n  return ret;\n};","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/src/validator/libs/number.js"],"names":["typeis","require","dato","REG_FORMAT","abbrSuffix","str62","map62","repeat","index","exports","parseInt","num","dftNum","nan","parseFloat","format","separator","splitLength","number","reg","RegExp","arr","String","split","p1","replace","abbr","fixedLength","step","i","j","length","toFixed","to62","number10","ret","_cal","y","unshift","join","from62","number62","len","pos62","pos10","Math","pow"],"mappings":"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","sourcesContent":["/**\n * 数字相关\n * @author ydr.me\n * @create 2015-05-11 13:54\n */\n\n\n/**\n * @module utils/number\n * @reuqires utils/typeis\n */\n\n\nvar typeis = require('./typeis.js');\nvar dato = require('./dato.js');\n\nvar REG_FORMAT = {\n    3: /(\\d)(?=(\\d{3})+$)/g\n};\n// k,m,g,t,p\n// @ref http://searchstorage.techtarget.com/definition/Kilo-mega-giga-tera-peta-and-all-that\nvar abbrSuffix = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n// var REG_BEGIN_0 = /^0+/;\nvar str62 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\nvar map62 = {};\n\ndato.repeat(62, function (index) {\n    map62[str62[index]] = index;\n});\n\n/**\n * 整数化\n * @param num {*} 待转换对象\n * @param [dftNum=0] {*} 当为 NaN 时的默认值\n * @returns {*}\n */\nexports.parseInt = function (num, dftNum) {\n    dftNum = dftNum || 0;\n    num = parseInt(num, 10);\n\n    return typeis.nan(num) ? dftNum : num;\n};\n\n\n/**\n * 浮点化\n * @param num {*} 待转换对象\n * @param [dftNum=0] {*} 当为 NaN 时的默认值\n * @returns {*}\n */\nexports.parseFloat = function (num, dftNum) {\n    dftNum = dftNum || 0;\n    num = parseFloat(num);\n\n    return typeis.nan(num) ? dftNum : num;\n};\n\n\n/**\n * 数字格式化\n * @param num {String|Number} 数字（字符串）\n * @param [separator=\",\"] {String} 分隔符\n * @param [splitLength=3] {Number} 分隔长度\n * @returns {string} 分割后的字符串\n * @example\n * number.format(123456.789);\n * // => \"123,456.789\"\n * number.format(123456.789, '-');\n * // => \"123-456.789\"\n */\nexports.format = function (num, separator, splitLength) {\n    if (typeis.number(separator)) {\n        splitLength = separator;\n        separator = ',';\n    } else {\n        separator = separator || ',';\n        splitLength = splitLength || 3;\n    }\n\n    var reg = REG_FORMAT[splitLength];\n\n    if (!reg) {\n        // /(\\d)(?=(\\d{3})+$)/g\n        reg = REG_FORMAT[splitLength] = new RegExp('(\\\\d)(?=(\\\\d{' + splitLength + '})+$)', 'g');\n    }\n\n    var arr = String(num).split('.');\n    var p1 = arr[0].replace(reg, '$1' + separator);\n\n    return p1 + (arr[1] ? '.' + arr[1] : '');\n};\n\n\n/**\n * 数字缩写\n * @param num {Number} 数值\n * @param [fixedLength=0] {Number} 修正长度\n * @param [step=1000] {Number} 步长\n * @returns {*}\n * @example\n * number.abbr(123456.789);\n * // => \"123k\"\n * number.abbr(123456.789, 2);\n * // => \"123.46k\"\n */\nexports.abbr = function (num, fixedLength, step) {\n    if (num < 1) {\n        return num;\n    }\n\n    // 123.321 => 123\n    num = exports.parseInt(num, 0);\n    fixedLength = fixedLength || 0;\n    step = step || 1000;\n\n    var i = 0;\n    var j = abbrSuffix.length;\n\n    while (num >= step && ++i < j) {\n        num = num / step;\n    }\n\n    if (i === j) {\n        i = j - 1;\n    }\n\n    return exports.format(num.toFixed(fixedLength)) + abbrSuffix[i];\n};\n\n\n///**\n// * 比较两个长整型数值\n// * @param long1 {String|Number} 长整型数值字符串1\n// * @param long2 {String|Number} 长整型数值字符串2\n// * @param [operator=\">\"] {String} 比较操作符，默认比较 long1 > long2\n// * @returns {*}\n// * @example\n// * number.than('9999999999999999999999999999999999999999', '9999999999999999999999999999999999999998');\n// * // => true\n// */\n//exports.than = function (long1, long2, operator) {\n//    operator = operator || '>';\n//    long1 = String(long1).replace(REG_BEGIN_0, '');\n//    long2 = String(long2).replace(REG_BEGIN_0, '');\n//\n//    // 1. 比较长度\n//    if (long1.length > long2.length) {\n//        return operator === '>';\n//    } else if (long1.length < long2.length) {\n//        return operator === '<';\n//    }\n//\n//    // 15位是安全值\n//    var long1List = exports.format(long1, ',', 15).split(',');\n//    var long2List = exports.format(long2, ',', 15).split(',');\n//\n//    // 2. 遍历比较\n//    var ret = false;\n//\n//    long1List.forEach(function (number1, index) {\n//        var number2 = long2List[index];\n//\n//        if (number1 > number2) {\n//            ret = operator === '>';\n//            return false;\n//        } else if (number1 < number2) {\n//            ret = operator === '<';\n//            return false;\n//        }\n//    });\n//\n//    return ret;\n//};\n\n\n/**\n * 获取六十二进制数值\n * @param number10\n * @returns {String}\n */\nexports.to62 = function (number10) {\n    var ret = [];\n\n    var _cal = function () {\n        var y = number10 % 62;\n\n        number10 = exports.parseInt(number10 / 62);\n        ret.unshift(str62[y]);\n\n        if (number10) {\n            _cal();\n        }\n    };\n\n    _cal();\n    return ret.join('');\n};\n\n\n/**\n * 六十二进制转换为十进制\n * @param number62\n * @returns {number}\n */\nexports.from62 = function (number62) {\n    var ret = 0;\n    var len = number62.length;\n\n    dato.repeat(len, function (index) {\n        var pos62 = number62[index];\n        var pos10 = map62[pos62];\n\n        ret += pos10 * Math.pow(62, len - index - 1);\n    });\n\n    return ret;\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}