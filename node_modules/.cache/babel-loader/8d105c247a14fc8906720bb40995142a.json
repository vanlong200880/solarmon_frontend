{"ast":null,"code":"import DeviceJsx from './Device.jsx';\nimport BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport Constants from '../../../../../utils/Constants';\nimport MainDeviceService from '../../../../../services/MainDeviceService';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport moment from 'moment';\n\nclass Device extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.onClickControlCalender = index => {\n      var {\n        dataListInverter\n      } = this.state;\n      if (!Libs.isArrayData(dataListInverter)) return;\n      var item = dataListInverter[index];\n      if (Libs.isObjectEmpty(item)) return;\n      this.setState({\n        showControlCalendar: true,\n        curItem: item\n      });\n    };\n\n    this.onCloseControlCalender = () => {\n      this.setState({\n        showControlCalendar: false\n      });\n    };\n\n    this.onClickOnOff = index => {\n      var {\n        dataListInverter\n      } = this.state;\n      if (!Libs.isArrayData(dataListInverter)) return;\n      var item = dataListInverter[index];\n      if (Libs.isObjectEmpty(item)) return;\n      this.setState({\n        showOnOffPopup: true,\n        curItem: item\n      });\n    };\n\n    this.onClickCloseOnOff = status => {\n      if (status) {\n        this.getListInverter();\n      }\n\n      this.setState({\n        showOnOffPopup: false\n      });\n    };\n\n    this.downloadData = () => {\n      var {\n        dataList\n      } = this.state;\n      var {\n        t\n      } = this.props;\n      if (!Libs.isArrayData(dataList)) return;\n      var dataExport = [];\n\n      for (var i = 0, len = dataList.length; i < len; i++) {\n        var itemLevel = dataList[i].alerts;\n        var error = 0,\n            warning = 0,\n            info = 0,\n            fatal = 0,\n            debug = 0;\n\n        if (Libs.isArrayData(itemLevel)) {\n          for (var j = 0, leng = itemLevel.length; j < leng; j++) {\n            switch (parseInt(itemLevel[j].id)) {\n              case 1:\n                error = itemLevel[j].total_alert;\n                break;\n\n              case 2:\n                warning = itemLevel[j].total_alert;\n                break;\n\n              case 3:\n                info = itemLevel[j].total_alert;\n                break;\n\n              case 4:\n                fatal = itemLevel[j].total_alert;\n                break;\n\n              case 5:\n                debug = itemLevel[j].total_alert;\n                break;\n            }\n          }\n        }\n\n        dataExport.push({\n          'ID': dataList[i].id,\n          'Device name': dataList[i].name,\n          'Model': dataList[i].model,\n          'Serial number': dataList[i].serial_number,\n          'Device type': dataList[i].device_type_name,\n          'Power now': Libs.formatNum(dataList[i].power_now, '#,###.##') + \" kW\",\n          'Energy today': Libs.formatNum(dataList[i].energy_today, '#,###.##') + \" kWh\",\n          'Lifetime': Libs.formatElectricalUnit(dataList[i].lifetime, 'h'),\n          'Error': error,\n          'Warning': warning,\n          'Info': info,\n          'Fatal': fatal,\n          'Debug': debug\n        });\n      }\n\n      const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      const fileExtension = '.xlsx';\n      const ws = XLSX.utils.json_to_sheet(dataExport, {\n        skipHeader: false\n      });\n      const wb = {\n        SheetNames: ['Alerts'],\n        Sheets: {\n          'Alerts': ws\n        }\n      };\n      const excelBuffer = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      const data = new Blob([excelBuffer], {\n        type: fileType\n      });\n      FileSaver.saveAs(data, \"Export-alerts-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n    };\n\n    this.onClickViewDevice = index => {\n      let {\n        dataList\n      } = this.state;\n      if (!Libs.isArrayData(dataList)) return;\n      var item = dataList[index];\n      if (Libs.isObjectEmpty(item)) return;\n      item.screen_mode = Constants.SCREEN_MODE.ADD;\n      this.setState({\n        show_tab: 1,\n        curItem: item,\n        viewDevice: true\n      });\n    };\n\n    this.onClickChartDevice = index => {\n      let {\n        dataList\n      } = this.state;\n      if (!Libs.isArrayData(dataList)) return;\n      var item = dataList[index];\n      if (Libs.isObjectEmpty(item)) return;\n      item.screen_mode = Constants.SCREEN_MODE.ADD;\n      this.setState({\n        show_tab: 3,\n        curItem: item,\n        viewDevice: true\n      }); // let curItem = this.state.curItem;\n      // curItem.data_send_time = 1;\n      // curItem.type = 1;\n      // curItem.screen_mode = Constants.SCREEN_MODE.ADD;\n      // this.setState({\n      //     curItem: curItem,\n      //     show_tab: 3,\n      //     viewDevice: true\n      // });\n    };\n\n    this.viewAlertDevice = index => {\n      var {\n        dataList,\n        curItem\n      } = this.state;\n      if (!Libs.isArrayData(dataList)) return;\n      var item = dataList[index];\n      if (Libs.isObjectEmpty(item)) return;\n      curItem.screen_mode = Constants.SCREEN_MODE.ADD;\n      this.setState({\n        curItem: Object.assign(curItem, item),\n        show_tab: 2,\n        viewDevice: true\n      });\n    };\n\n    this.onClickCloseViewDevice = status => {\n      if (status) {// this.getList();\n      }\n\n      this.setState({\n        viewDevice: false\n      });\n    };\n\n    this.jsxTemplate = DeviceJsx;\n    this.state = {\n      hash_id: !Libs.isObjectEmpty(this.params) ? this.params.id : null,\n      curItem: {},\n      dataList: [],\n      dataListInverter: [],\n      show_tab: 1,\n      tab_on_off: 1,\n      showOnOffPopup: false,\n      showControlCalendar: false,\n      searchParam: {\n        limit: Constants.COMMON.LIMIT,\n        offset: 0,\n        index: 1,\n        max_date: Libs.getCurrentDDMMYYYY(),\n        current_date: Libs.getCurrentDDMMYYYY()\n      },\n      viewDevice: false,\n      formSearch: false\n    };\n    this.paging = {\n      total: 0,\n      current: 1,\n      currentInput: 1\n    };\n    this.inputChangedHandler = this.inputChangedHandler.bind(this);\n    this.inputChangedEnter = this.inputChangedEnter.bind(this);\n    this.inputChangedBlue = this.inputChangedBlue.bind(this);\n  }\n\n  componentDidMount() {\n    var {\n      tab_on_off\n    } = this.state;\n\n    if (tab_on_off == 2) {\n      this.getListInverter();\n    } else {\n      this.getList();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let self = this;\n    var {\n      tab_on_off\n    } = this.state;\n\n    if (nextProps.match.params.id !== this.props.match.params.id) {\n      this.setState({\n        hash_id: nextProps.match.params.id\n      }, () => {\n        if (tab_on_off == 2) {\n          this.getListInverter();\n        } else {\n          this.getList();\n        }\n      });\n    }\n  }\n\n  setTabOnOff(index) {\n    var self = this;\n    this.setState({\n      tab_on_off: index\n    }, () => {\n      if (index == 2) {\n        self.getListInverter();\n      } else {\n        self.getList();\n      }\n    });\n  }\n  /**\n   * get list\n   * @author Long.Pham 2019-06-03\n   */\n\n\n  getListInverter() {\n    let self = this;\n    let params = this.state.searchParam;\n    params.id_language = this.employee.id_language;\n    params.id_employee = this.employee.id_employee;\n    params.hash_id = this.state.hash_id;\n    params.type = 'private';\n    MainDeviceService.instance.getListInverter(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataListInverter: data\n        });\n      } else {\n        self.setState({\n          dataListInverter: []\n        });\n      }\n\n      self.forceUpdate();\n    });\n  }\n  /**\n   * setValue method to Input\n   * @author Long.Pham 20/05/2021\n   */\n\n\n  handleInputDateChange(event) {\n    let target = event.target;\n    let name = target.name;\n    var self = this;\n    let value = target.value;\n\n    if (target.type === 'checkbox') {\n      value = target.checked ? 1 : 0;\n    }\n\n    if (name) {\n      let {\n        searchParam\n      } = this.state;\n      searchParam[name] = value;\n      this.setState({\n        searchParam\n      }, () => {\n        self.getPowerNowByDay();\n      });\n    }\n  }\n\n  async getPowerNowByDay() {\n    var {\n      dataList,\n      searchParam\n    } = this.state,\n        self = this;\n    if (!Libs.isArrayData(dataList)) return;\n    var searchParam = Object.assign({}, searchParam);\n    searchParam.current_date = Libs.dateFormat(searchParam.current_date, 'YYYY-MM-DD HH:mm:ss', 'DD/MM/YYYY HH:mm:ss');\n    searchParam.dataList = dataList;\n    await MainDeviceService.instance.getPowerNowByDay(searchParam, data => {\n      if (data) {\n        self.setState({\n          dataList: data.dataList\n        });\n      }\n    }, false);\n  }\n\n  /**\n   * get list\n   * @author Long.Pham 2019-06-03\n   */\n  getList() {\n    let self = this;\n    let params = this.state.searchParam;\n    params.id_language = this.employee.id_language;\n    params.id_employee = this.employee.id_employee;\n    params.hash_id = this.state.hash_id;\n    params.type = 'private';\n    MainDeviceService.instance.getListDeviceByHashId(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataList: data\n        });\n        var total = parseInt(total_row / self.state.searchParam.limit);\n\n        if (total_row % self.state.searchParam.limit > 0) {\n          total = total + 1;\n        }\n\n        self.paging.total = total;\n        self.paging.current = self.state.searchParam.index;\n        self.paging.currentInput = self.state.searchParam.index;\n        self.state.total_row = total_row;\n      } else {\n        self.setState({\n          dataList: [],\n          total_row: 0\n        });\n        self.paging.total = 0;\n        self.paging.current = 1;\n        self.paging.currentInput = 1;\n      }\n\n      self.forceUpdate();\n    });\n  }\n\n  inputChangedHandler(event) {\n    let self = this;\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (name === 'current') {\n      if (!Libs.isBlank(value)) {\n        var {\n          t\n        } = this.props;\n\n        if (!Libs.isNumber(value)) {\n          self.toast(t('common.page_is_number'), \"error\");\n          return;\n        }\n      }\n\n      self.paging.currentInput = value;\n      self.forceUpdate();\n    }\n\n    if (name === 'limit') {\n      var {\n        searchParam\n      } = this.state;\n      searchParam.limit = value;\n      this.setState({\n        searchParam: searchParam\n      }, () => {\n        self.getList();\n      });\n    }\n  }\n\n  inputChangedEnter(event) {\n    let self = this;\n\n    if (event.key === 'Enter') {\n      var currentInput = this.paging.currentInput;\n\n      if (!Libs.isBlank(currentInput)) {\n        var {\n          t\n        } = this.props;\n\n        if (!Libs.isNumber(currentInput)) {\n          self.toast(t('common.page_is_number'), \"error\");\n          return;\n        }\n      }\n\n      if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n\n      if (parseInt(currentInput) > this.paging.total) {\n        currentInput = self.paging.total;\n      }\n\n      if (currentInput <= 0) {\n        currentInput = 1;\n      }\n\n      self.paging.current = currentInput;\n      self.paging.currentInput = currentInput;\n      this.onSelectPage(currentInput);\n      self.forceUpdate();\n    }\n  }\n\n  inputChangedBlue(event) {\n    let self = this;\n    let target = event.target;\n    let name = target.name;\n\n    if (name === 'current') {\n      var currentInput = this.paging.currentInput;\n\n      if (!Libs.isBlank(currentInput)) {\n        var {\n          t\n        } = this.props;\n\n        if (!Libs.isNumber(currentInput)) {\n          self.toast(t('common.page_is_number'), \"error\");\n          return;\n        }\n      }\n\n      if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n\n      if (parseInt(currentInput) > this.paging.total) {\n        currentInput = self.paging.total;\n      }\n\n      if (currentInput <= 0) {\n        currentInput = 1;\n      }\n\n      self.paging.current = currentInput;\n      self.paging.currentInput = currentInput;\n      this.onSelectPage(currentInput);\n      self.forceUpdate();\n    }\n  }\n  /**\n   * @description Select page in pagging\n   * @author long.pham 09/05/2021\n   * @param {int} index\n   */\n\n\n  onSelectPage(index) {\n    let self = this;\n    self.state.searchParam.index = index;\n\n    if (index > 0) {\n      self.state.searchParam.offset = (index - 1) * self.state.searchParam.limit;\n    } else {\n      self.state.searchParam.offset = 0;\n    }\n\n    self.getList();\n  }\n  /**\n   * @description reload data\n   * @author long.pham 09/05/2021\n   * @param {int} index\n   */\n\n\n  onClickReload() {\n    let self = this;\n    self.getList();\n  }\n  /**\n  * Func filter table\n  * @author Long.Pham 12-05-2021\n  * @param  {Object} e\n  */\n\n\n  onSort(event, sortKey) {\n    this.state.searchParam.sort_column = sortKey;\n    this.state.searchParam.order_by = this.state.searchParam.order_by === '' || this.state.searchParam.order_by === 'asc' ? 'desc' : 'asc';\n    this.getList();\n  }\n  /**\n    * @description Call form search\n    * @author Long.Pham 12/05/2021\n    */\n\n\n  onSearch() {\n    let formSearch = this.state.formSearch === false ? true : false;\n    this.setState({\n      formSearch: formSearch\n    });\n  }\n\n  onResetSearch() {\n    let self = this;\n    let searchParam = this.state.searchParam;\n    searchParam.name = null;\n    searchParam.id = null;\n    searchParam.index = 1;\n    searchParam.offset = 0;\n    self.paging.current = 1;\n    self.paging.currentInput = 1;\n    self.paging.total = 1;\n    self.setState({\n      searchParam: searchParam\n    }, () => {\n      self.getList();\n    });\n  }\n  /**\n   * Func search\n   * @author Long.Pham 12/05/2021\n   * @param  {Object} e\n   */\n\n\n  handleSearch() {\n    this.getList();\n  }\n\n  render() {\n    return this.jsxTemplate.call(this);\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(Device);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/desktop/ModulePrivate/Device/Device.js"],"names":["DeviceJsx","BaseComponent","Libs","withTranslation","Constants","MainDeviceService","FileSaver","XLSX","moment","Device","constructor","props","context","onClickControlCalender","index","dataListInverter","state","isArrayData","item","isObjectEmpty","setState","showControlCalendar","curItem","onCloseControlCalender","onClickOnOff","showOnOffPopup","onClickCloseOnOff","status","getListInverter","downloadData","dataList","t","dataExport","i","len","length","itemLevel","alerts","error","warning","info","fatal","debug","j","leng","parseInt","id","total_alert","push","name","model","serial_number","device_type_name","formatNum","power_now","energy_today","formatElectricalUnit","lifetime","fileType","fileExtension","ws","utils","json_to_sheet","skipHeader","wb","SheetNames","Sheets","excelBuffer","write","bookType","type","data","Blob","saveAs","format","onClickViewDevice","screen_mode","SCREEN_MODE","ADD","show_tab","viewDevice","onClickChartDevice","viewAlertDevice","Object","assign","onClickCloseViewDevice","jsxTemplate","hash_id","params","tab_on_off","searchParam","limit","COMMON","LIMIT","offset","max_date","getCurrentDDMMYYYY","current_date","formSearch","paging","total","current","currentInput","inputChangedHandler","bind","inputChangedEnter","inputChangedBlue","componentDidMount","getList","componentWillReceiveProps","nextProps","self","match","setTabOnOff","id_language","employee","id_employee","instance","total_row","forceUpdate","handleInputDateChange","event","target","value","checked","getPowerNowByDay","dateFormat","getListDeviceByHashId","isBlank","isNumber","toast","key","onSelectPage","onClickReload","onSort","sortKey","sort_column","order_by","onSearch","onResetSearch","handleSearch","render","call","HighOrderComponentTranslated"],"mappings":"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","sourcesContent":["import DeviceJsx from './Device.jsx';\nimport BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport Constants from '../../../../../utils/Constants';\nimport MainDeviceService from '../../../../../services/MainDeviceService';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport moment from 'moment';\n\nclass Device extends BaseComponent {\n\n    constructor(props, context) {\n        super(props, context);\n        this.jsxTemplate = DeviceJsx;\n        this.state = {\n            hash_id: !Libs.isObjectEmpty(this.params) ? this.params.id : null,\n            curItem: {},\n            dataList: [],\n            dataListInverter: [],\n            show_tab: 1,\n            tab_on_off: 1,\n            showOnOffPopup: false,\n            showControlCalendar: false,\n            searchParam: {\n                limit: Constants.COMMON.LIMIT,\n                offset: 0,\n                index: 1,\n                max_date: Libs.getCurrentDDMMYYYY(),\n                current_date: Libs.getCurrentDDMMYYYY()\n            },\n            viewDevice: false,\n            formSearch: false\n        };\n\n        this.paging = {\n            total: 0,\n            current: 1,\n            currentInput: 1\n        };\n        this.inputChangedHandler = this.inputChangedHandler.bind(this);\n        this.inputChangedEnter = this.inputChangedEnter.bind(this);\n        this.inputChangedBlue = this.inputChangedBlue.bind(this);\n\n    }\n\n    componentDidMount() {\n        var { tab_on_off } = this.state;\n        if (tab_on_off == 2) {\n            this.getListInverter();\n        } else {\n            this.getList();\n        }\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n        let self = this;\n        var { tab_on_off } = this.state;\n        if (nextProps.match.params.id !== this.props.match.params.id) {\n            this.setState({\n                hash_id: nextProps.match.params.id\n            }, () => {\n                if (tab_on_off == 2) {\n                    this.getListInverter();\n                } else {\n                    this.getList();\n                }\n            });\n        }\n    }\n\n\n    onClickControlCalender = (index) => {\n        var { dataListInverter } = this.state;\n        if (!Libs.isArrayData(dataListInverter)) return;\n        var item = dataListInverter[index];\n        if (Libs.isObjectEmpty(item)) return;\n        this.setState({\n            showControlCalendar: true,\n            curItem: item\n        })\n\n    }\n\n    onCloseControlCalender = () => {\n        this.setState({\n            showControlCalendar: false\n        })\n\n    }\n\n\n    onClickOnOff = (index) => {\n        var { dataListInverter } = this.state;\n        if (!Libs.isArrayData(dataListInverter)) return;\n        var item = dataListInverter[index];\n        if (Libs.isObjectEmpty(item)) return;\n        this.setState({\n            showOnOffPopup: true,\n            curItem: item\n        })\n\n    }\n\n    onClickCloseOnOff = (status) => {\n        if (status) {\n            this.getListInverter();\n        }\n        this.setState({\n            showOnOffPopup: false\n        })\n\n    }\n\n    setTabOnOff(index) {\n        var self = this;\n        this.setState({\n            tab_on_off: index\n        }, () => {\n            if (index == 2) {\n                self.getListInverter();\n            } else {\n                self.getList();\n            }\n        })\n\n    }\n\n\n    /**\n     * get list\n     * @author Long.Pham 2019-06-03\n     */\n    getListInverter() {\n        let self = this;\n        let params = this.state.searchParam;\n        params.id_language = this.employee.id_language;\n        params.id_employee = this.employee.id_employee;\n        params.hash_id = this.state.hash_id;\n        params.type = 'private';\n        MainDeviceService.instance.getListInverter(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataListInverter: data\n                });\n            } else {\n                self.setState({\n                    dataListInverter: []\n                });\n            }\n            self.forceUpdate();\n        });\n    }\n\n    /**\n     * setValue method to Input\n     * @author Long.Pham 20/05/2021\n     */\n    handleInputDateChange(event) {\n        let target = event.target;\n        let name = target.name;\n        var self = this;\n        let value = target.value;\n        if (target.type === 'checkbox') {\n            value = target.checked ? 1 : 0;\n        }\n\n        if (name) {\n            let { searchParam } = this.state;\n            searchParam[name] = value;\n            this.setState({ searchParam }, () => {\n                self.getPowerNowByDay();\n            });\n        }\n    }\n\n\n    async getPowerNowByDay() {\n        var { dataList, searchParam } = this.state, self = this;\n        if (!Libs.isArrayData(dataList)) return;\n        var searchParam = Object.assign({}, searchParam);\n        searchParam.current_date = Libs.dateFormat(searchParam.current_date, 'YYYY-MM-DD HH:mm:ss', 'DD/MM/YYYY HH:mm:ss');\n        searchParam.dataList = dataList;\n        await MainDeviceService.instance.getPowerNowByDay(searchParam, data => {\n            if (data) {\n                self.setState({\n                    dataList: data.dataList\n                })\n            }\n        }, false);\n    }\n\n    \n    downloadData = () => {\n        var { dataList } = this.state;\n        var { t } = this.props;\n        if (!Libs.isArrayData(dataList)) return;\n\n        var dataExport = [];\n        for (var i = 0, len = dataList.length; i < len; i++) {\n            var itemLevel = dataList[i].alerts;\n            var error = 0, warning = 0, info = 0, fatal = 0, debug = 0;\n            if (Libs.isArrayData(itemLevel)) {\n                for (var j = 0, leng = itemLevel.length; j < leng; j++) {\n                    switch (parseInt(itemLevel[j].id)) {\n                        case 1:\n                            error = itemLevel[j].total_alert;\n                            break;\n                        case 2:\n                            warning = itemLevel[j].total_alert;\n                            break;\n                        case 3:\n                            info = itemLevel[j].total_alert;\n                            break;\n                        case 4:\n                            fatal = itemLevel[j].total_alert;\n                            break;\n                        case 5:\n                            debug = itemLevel[j].total_alert;\n                            break;\n                    }\n                }\n            }\n            dataExport.push({\n                'ID': dataList[i].id,\n                'Device name': dataList[i].name,\n                'Model': dataList[i].model,\n                'Serial number': dataList[i].serial_number,\n                'Device type': dataList[i].device_type_name,\n                'Power now': Libs.formatNum(dataList[i].power_now, '#,###.##') + \" kW\",\n                'Energy today': Libs.formatNum(dataList[i].energy_today, '#,###.##') + \" kWh\",\n                'Lifetime': Libs.formatElectricalUnit(dataList[i].lifetime, 'h'),\n                'Error': error,\n                'Warning': warning,\n                'Info': info,\n                'Fatal': fatal,\n                'Debug': debug\n            });\n        }\n\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n        const fileExtension = '.xlsx';\n        const ws = XLSX.utils.json_to_sheet(dataExport, { skipHeader: false });\n        const wb = {\n            SheetNames: ['Alerts'],\n            Sheets: { 'Alerts': ws }\n        };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, \"Export-alerts-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n    }\n    /**\n     * get list\n     * @author Long.Pham 2019-06-03\n     */\n    getList() {\n        let self = this;\n        let params = this.state.searchParam;\n        params.id_language = this.employee.id_language;\n        params.id_employee = this.employee.id_employee;\n        params.hash_id = this.state.hash_id;\n        params.type = 'private';\n        MainDeviceService.instance.getListDeviceByHashId(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataList: data\n                });\n\n                var total = parseInt(total_row / self.state.searchParam.limit);\n                if (total_row % self.state.searchParam.limit > 0) {\n                    total = total + 1;\n                }\n                self.paging.total = total;\n                self.paging.current = self.state.searchParam.index;\n                self.paging.currentInput = self.state.searchParam.index;\n                self.state.total_row = total_row;\n\n            } else {\n                self.setState({\n                    dataList: [],\n                    total_row: 0\n                });\n                self.paging.total = 0;\n                self.paging.current = 1;\n                self.paging.currentInput = 1;\n            }\n            self.forceUpdate();\n        });\n    }\n\n\n    onClickViewDevice = (index) => {\n        let { dataList } = this.state;\n        if (!Libs.isArrayData(dataList)) return;\n        var item = dataList[index];\n        if (Libs.isObjectEmpty(item)) return;\n\n        item.screen_mode = Constants.SCREEN_MODE.ADD;\n        this.setState({\n            show_tab: 1,\n            curItem: item,\n            viewDevice: true\n        });\n    };\n\n\n    onClickChartDevice = (index) => {\n        let { dataList } = this.state;\n        if (!Libs.isArrayData(dataList)) return;\n        var item = dataList[index];\n        if (Libs.isObjectEmpty(item)) return;\n\n        item.screen_mode = Constants.SCREEN_MODE.ADD;\n        this.setState({\n            show_tab: 3,\n            curItem: item,\n            viewDevice: true\n        });\n\n        // let curItem = this.state.curItem;\n        // curItem.data_send_time = 1;\n        // curItem.type = 1;\n\n        // curItem.screen_mode = Constants.SCREEN_MODE.ADD;\n        // this.setState({\n        //     curItem: curItem,\n        //     show_tab: 3,\n        //     viewDevice: true\n        // });\n    };\n\n    viewAlertDevice = (index) => {\n        var { dataList, curItem } = this.state;\n        if (!Libs.isArrayData(dataList)) return;\n        var item = dataList[index];\n        if (Libs.isObjectEmpty(item)) return;\n        curItem.screen_mode = Constants.SCREEN_MODE.ADD;\n        this.setState({\n            curItem: Object.assign(curItem, item),\n            show_tab: 2,\n            viewDevice: true\n        })\n    }\n\n    onClickCloseViewDevice = (status) => {\n        if (status) {\n            // this.getList();\n        }\n        this.setState({\n            viewDevice: false\n        })\n    }\n\n\n\n\n    inputChangedHandler(event) {\n        let self = this;\n        let target = event.target;\n        let name = target.name;\n        let value = target.value;\n        if (name === 'current') {\n            if (!Libs.isBlank(value)) {\n                var { t } = this.props;\n                if (!Libs.isNumber(value)) {\n                    self.toast(t('common.page_is_number'), \"error\");\n                    return;\n                }\n            }\n\n            self.paging.currentInput = value;\n            self.forceUpdate();\n        }\n\n        if (name === 'limit') {\n            var { searchParam } = this.state;\n            searchParam.limit = value;\n            this.setState({\n                searchParam: searchParam\n            }, () => {\n                self.getList();\n            })\n        }\n    }\n\n    inputChangedEnter(event) {\n        let self = this;\n        if (event.key === 'Enter') {\n            var currentInput = this.paging.currentInput;\n            if (!Libs.isBlank(currentInput)) {\n                var { t } = this.props;\n                if (!Libs.isNumber(currentInput)) {\n                    self.toast(t('common.page_is_number'), \"error\");\n                    return;\n                }\n            }\n\n            if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n            if (parseInt(currentInput) > this.paging.total) {\n                currentInput = self.paging.total;\n            }\n\n            if (currentInput <= 0) {\n                currentInput = 1;\n            }\n\n            self.paging.current = currentInput;\n            self.paging.currentInput = currentInput;\n            this.onSelectPage(currentInput);\n            self.forceUpdate();\n        }\n    }\n\n    inputChangedBlue(event) {\n        let self = this;\n        let target = event.target;\n        let name = target.name;\n        if (name === 'current') {\n            var currentInput = this.paging.currentInput;\n            if (!Libs.isBlank(currentInput)) {\n                var { t } = this.props;\n                if (!Libs.isNumber(currentInput)) {\n                    self.toast(t('common.page_is_number'), \"error\");\n                    return;\n                }\n            }\n\n            if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n            if (parseInt(currentInput) > this.paging.total) {\n                currentInput = self.paging.total;\n            }\n\n            if (currentInput <= 0) {\n                currentInput = 1;\n            }\n\n            self.paging.current = currentInput;\n            self.paging.currentInput = currentInput;\n            this.onSelectPage(currentInput);\n            self.forceUpdate();\n        }\n    }\n\n\n    /**\n     * @description Select page in pagging\n     * @author long.pham 09/05/2021\n     * @param {int} index\n     */\n    onSelectPage(index) {\n        let self = this;\n        self.state.searchParam.index = index;\n\n        if (index > 0) {\n            self.state.searchParam.offset = (index - 1) * self.state.searchParam.limit;\n        } else {\n            self.state.searchParam.offset = 0;\n        }\n        self.getList();\n    }\n\n\n    /**\n     * @description reload data\n     * @author long.pham 09/05/2021\n     * @param {int} index\n     */\n    onClickReload() {\n        let self = this;\n        self.getList();\n    }\n\n\n    /**\n    * Func filter table\n    * @author Long.Pham 12-05-2021\n    * @param  {Object} e\n    */\n\n    onSort(event, sortKey) {\n        this.state.searchParam.sort_column = sortKey;\n        this.state.searchParam.order_by = (this.state.searchParam.order_by === '' || this.state.searchParam.order_by === 'asc') ? 'desc' : 'asc';\n        this.getList();\n    }\n\n    /**\n      * @description Call form search\n      * @author Long.Pham 12/05/2021\n      */\n    onSearch() {\n        let formSearch = (this.state.formSearch === false) ? true : false;\n        this.setState({\n            formSearch: formSearch\n        });\n    }\n\n    onResetSearch() {\n        let self = this;\n        let searchParam = this.state.searchParam;\n        searchParam.name = null;\n        searchParam.id = null;\n        searchParam.index = 1;\n        searchParam.offset = 0;\n        self.paging.current = 1;\n        self.paging.currentInput = 1;\n        self.paging.total = 1;\n        self.setState({\n            searchParam: searchParam\n        }, () => {\n            self.getList();\n        });\n    }\n\n    /**\n     * Func search\n     * @author Long.Pham 12/05/2021\n     * @param  {Object} e\n     */\n    handleSearch() {\n        this.getList();\n    }\n\n    render() {\n        return this.jsxTemplate.call(this)\n    }\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(Device)\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}