{"ast":null,"code":"import React from 'react';\nimport PlantJsx from './Plant.jsx';\nimport BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport MainPlantService from '../../../../../services/MainPlantService';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport moment from 'moment';\n\nclass Plant extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleClickOutside = event => {\n      const {\n        target\n      } = event;\n      var {\n        chartParams\n      } = this.state,\n          self = this;\n\n      if (!this.wrapperRef.current.contains(target)) {\n        if (chartParams.show_filter) {\n          chartParams.show_filter = false;\n          self.setState({\n            chartParams: chartParams\n          });\n        }\n      }\n    };\n\n    this.onClickFilter = value => {\n      var {\n        chartParams,\n        dataFilter,\n        curItem\n      } = this.state;\n      var self = this;\n      if (!Libs.isArrayData(dataFilter)) return;\n      var item = Libs.find(dataFilter, 'id', value);\n      if (Libs.isObjectEmpty(item)) return;\n      chartParams.id_filter = item.id;\n      chartParams.text_filter = item.text;\n      chartParams.show_filter = false;\n      chartParams.showNextBtn = false;\n\n      switch (value) {\n        case 'today':\n          chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n          chartParams.max_date = Libs.getCurrentMMDDYYYYHI();\n          break;\n\n        case '3_day':\n          chartParams.end_date = Libs.getCurrentDDMMYYYY();\n          chartParams.start_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n          chartParams.start_max_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n          chartParams.max_date = Libs.getCurrentDDMMYYYY();\n          break;\n\n        case 'this_month':\n          chartParams.max_date = moment().format('MM/YYYY');\n          chartParams.end_date = moment().format('MM/YYYY');\n          break;\n\n        case 'last_month':\n          chartParams.max_date = moment().format('MM/YYYY');\n          var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n          var ylast = tlast.getFullYear(),\n              mlast = tlast.getMonth();\n          chartParams.end_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).endOf('month').format('MM/YYYY');\n          chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).format('MM/YYYY');\n          break;\n\n        case 'lifetime':\n        case '12_month':\n          chartParams.max_date = moment().format('MM/YYYY');\n          chartParams.end_date = moment().format('MM/YYYY');\n          chartParams.start_date = moment(Libs.addMonths(Libs.getCurrentMMDDYYYYHI(), -12)).format('MM/YYYY');\n          break;\n        // case 'lifetime':\n        //     chartParams.start_date = moment(curItem.commissioning).format('MM/DD/YYYY HH:mm:ss');\n        //     chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n        //     break;\n      }\n\n      this.setState({\n        chartParams: chartParams\n      }, () => {\n        self.getDataChart();\n      });\n    };\n\n    this.changeViewMinute = value => {\n      var chartParams = this.state.chartParams,\n          self = this;\n      if (Libs.isBlank(value)) return;\n      chartParams.data_send_time = value;\n      this.setState({\n        chartParams: chartParams\n      }, () => {\n        self.getDataChart();\n      });\n    };\n\n    this.onClickShowSingleLine = () => {\n      this.setState({\n        single_line: true\n      });\n    };\n\n    this.onClickCloseSingleLine = () => {\n      this.setState({\n        single_line: false\n      });\n    };\n\n    this.onClickShowFilter = () => {\n      var {\n        chartParams\n      } = this.state;\n      chartParams.show_filter = true;\n      this.setState({\n        chartParams: chartParams\n      });\n    };\n\n    this.downloadData = () => {\n      var {\n        dataEnergy,\n        curItem\n      } = this.state;\n      var {\n        t\n      } = this.props;\n      if (!Libs.isArrayData(dataEnergy)) return;\n      var dataExport = [];\n\n      for (var i = 0, len = dataEnergy.length; i < len; i++) {\n        dataExport.push({\n          // \"ID\": ++i,\n          'Time': dataEnergy[i].time_full,\n          'Project name': curItem.name,\n          'Energy now (kWh)': dataEnergy[i].activeEnergy,\n          \"Power now (kW)\": dataEnergy[i].activePower\n        });\n      }\n\n      const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      const fileExtension = '.xlsx';\n      const ws = XLSX.utils.json_to_sheet(dataExport, {\n        skipHeader: false\n      });\n      const wb = {\n        SheetNames: ['Alerts'],\n        Sheets: {\n          'Alerts': ws\n        }\n      };\n      const excelBuffer = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      const data = new Blob([excelBuffer], {\n        type: fileType\n      });\n      FileSaver.saveAs(data, \"Export-alerts-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n    };\n\n    this.state = {\n      hash_id: !Libs.isObjectEmpty(this.params) ? this.params.id : null,\n      curItem: {},\n      single_line: true,\n      allLanguage: Libs.isBlank(this.employee) ? [] : this.employee.languages,\n      dataFilter: [{\n        id: \"today\",\n        text: \"Today\"\n      }, {\n        id: \"3_day\",\n        text: \"3 days\"\n      }, {\n        id: \"this_month\",\n        text: \"This month\"\n      }, {\n        id: \"last_month\",\n        text: \"Last month\"\n      }, {\n        id: \"12_month\",\n        text: \"Last 12 months\"\n      }, {\n        id: \"lifetime\",\n        text: \"Lifetime\"\n      }],\n      chartParams: {\n        id_filter: 'today',\n        text_filter: 'Today',\n        show_filter: false,\n        max_date: Libs.getCurrentDDMMYYYY(),\n        data_send_time: 2\n      }\n    };\n    this.paging = {\n      total: 0,\n      current: 1,\n      currentInput: 1\n    };\n    this.jsxTemplate = PlantJsx;\n    this.wrapperRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    document.addEventListener('click', this.handleClickOutside);\n    this.loadConfigDefaultDate(); // this.getDetailProject();\n    // this.getDataChart();\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleClickOutside);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let self = this;\n\n    if (nextProps.match.params.id !== this.props.match.params.id) {\n      this.setState({\n        hash_id: nextProps.match.params.id\n      }, () => {\n        self.getDetailProject();\n        self.getDataChart();\n      });\n    }\n  }\n\n  loadConfigDefaultDate() {\n    var {\n      chartParams\n    } = this.state;\n\n    switch (chartParams.id_filter) {\n      case 'today':\n        chartParams.max_date = Libs.getCurrentMMDDYYYYHI();\n        chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n        break;\n\n      case '3_day':\n        chartParams.end_date = Libs.getCurrentDDMMYYYY();\n        chartParams.start_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n        chartParams.start_max_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n        break;\n\n      case 'this_month':\n        chartParams.max_date = moment().format('MM/YYYY');\n        chartParams.end_date = moment().format('MM/YYYY');\n        break;\n\n      case 'last_month':\n        chartParams.max_date = moment().format('MM/YYYY');\n        var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n        var ylast = tlast.getFullYear(),\n            mlast = tlast.getMonth();\n        chartParams.end_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).endOf('month').format('MM/YYYY');\n        chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).format('MM/YYYY');\n        break;\n\n      case 'lifetime':\n      case '12_month':\n        chartParams.max_date = moment().format('MM/YYYY');\n        chartParams.end_date = moment().format('MM/YYYY');\n        var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n        var ylast = tlast.getFullYear(),\n            mlast = tlast.getMonth();\n        chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -12)).format('MM/YYYY');\n        chartParams.max_start_date = moment(Libs.addMonths(Libs.getCurrentMMDDYYYYHI(), -12)).format('MM/YYYY');\n        break;\n    }\n\n    this.setState({\n      chartParams: chartParams\n    });\n  }\n\n  getDetailProject() {\n    var {\n      hash_id\n    } = this.state,\n        self = this;\n    if (Libs.isBlank(hash_id)) return;\n    var params = {\n      hash_id: hash_id,\n      id_language: this.employee.id_language,\n      id_employee: this.employee.id_employee,\n      type: 'private'\n    };\n    MainPlantService.instance.getDetail(params, data => {\n      if (data) {\n        self.setState({\n          curItem: data\n        });\n      }\n    }, false);\n  }\n\n  /**\n   * setValue method to Input\n   * @author Long.Pham 20/05/2021\n   */\n  handleInputDateChange(event) {\n    let target = event.target;\n    let name = target.name;\n    var self = this;\n    let value = target.value;\n\n    if (target.type === 'checkbox') {\n      value = target.checked ? 1 : 0;\n    }\n\n    if (name) {\n      let {\n        chartParams\n      } = this.state;\n\n      switch (chartParams.id_filter) {\n        case 'today':\n        case 'last_month':\n        case 'this_month':\n          chartParams.start_date = value;\n          chartParams[name] = value;\n          break;\n\n        case '3_day':\n          if (name == 'start_date') {\n            chartParams.start_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n              chartParams.end_date = moment(Libs.addDays(currentDate, 2)).format('DD/MM/YYYY');\n            }\n          }\n\n          if (name == 'end_date') {\n            chartParams.end_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n              chartParams.start_date = moment(Libs.addDays(currentDate, -2)).format('DD/MM/YYYY');\n            }\n          }\n\n          break;\n\n        case '12_month':\n          if (name == 'start_date') {\n            chartParams.start_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n              const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n              chartParams.end_date = moment(Libs.addMonths(startOfMonth, 12)).format('MM/YYYY');\n            }\n          }\n\n          if (name == 'end_date') {\n            chartParams.end_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n              const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n              chartParams.start_date = moment(Libs.addMonths(startOfMonth, -12)).format('MM/YYYY');\n            }\n          }\n\n          break;\n      }\n\n      this.setState({\n        chartParams\n      }, () => {\n        self.getDataChart();\n      });\n    }\n  }\n  /**\n  * Get chart data\n  * @author long.pham 2020-12-03\n  * @param id_site, id_customer\n  * @return Object\n  */\n\n\n  getDataChart() {\n    var {\n      chartParams,\n      curItem,\n      hash_id\n    } = this.state,\n        self = this;\n    if (Libs.isObjectEmpty(chartParams)) return;\n    var params = {};\n    params.hash_id = hash_id;\n    params.total_year = curItem.total_year;\n    params.id_employee = this.employee.id_employee;\n    params.id_language = this.employee.id_language;\n    params.filterBy = chartParams.id_filter;\n    params.data_send_time = chartParams.data_send_time;\n    params.type = 'private';\n\n    switch (chartParams.id_filter) {\n      case 'today':\n        params.start_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\");\n        params.end_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\");\n        break;\n\n      case '3_day':\n        params.start_date = Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\";\n        params.end_date = Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\";\n        break;\n\n      case 'last_month':\n      case 'this_month':\n        params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n        params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n        break;\n\n      case 'lifetime':\n      case '12_month':\n        params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n        params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n        break;\n    } // params.end_date = '01/11/2021 19:00:00';\n    // params.start_date = '01/11/2021 05:00:00';\n\n\n    MainPlantService.instance.getDataChart(params, data => {\n      if (Libs.isArrayData(data)) {\n        var dataListEnergy = data;\n        var series = [],\n            categories = [];\n        let seriesItemEnergy = {\n          data: [],\n          name: 'Energy yield',\n          zIndex: 1,\n          type: 'column',\n          tooltip: {\n            valueSuffix: ' kWh'\n          }\n        };\n        let seriesItemPower = {\n          data: [],\n          name: 'Power',\n          zIndex: 1,\n          type: 'spline',\n          xAxis: 1,\n          yAxis: 1,\n          id: 's1',\n          lineWidth: 2,\n          tooltip: {\n            valueSuffix: ' kW'\n          },\n          marker: {\n            radius: 2.5\n          }\n        };\n        var rowItemEnergy = [],\n            rowItemPower = [];\n\n        if (params.filterBy === 'today') {\n          switch (chartParams.data_send_time) {\n            case 1:\n              curItem.tickInterval = 12;\n              categories = ['5AM', '5:05 AM', '5:10 AM', '5:15 AM', '5:20 AM', '5:25 AM', '5:30 AM', '5:35 AM', '5:40 AM', '5:45 AM', '5:50 AM', '5:55 AM', '6AM', '6:05 AM', '6:10 AM', '6:15 AM', '6:20 AM', '6:25 AM', '6:30 AM', '6:35 AM', '6:40 AM', '6:45 AM', '6:50 AM', '6:55 AM', '7AM', '7:05 AM', '7:10 AM', '7:15 AM', '7:20 AM', '7:25 AM', '7:30 AM', '7:35 AM', '7:40 AM', '7:45 AM', '7:50 AM', '7:55 AM', '8AM', '8:05 AM', '8:10 AM', '8:15 AM', '8:20 AM', '8:25 AM', '8:30 AM', '8:35 AM', '8:40 AM', '8:45 AM', '8:50 AM', '8:55 AM', '9AM', '9:05 AM', '9:10 AM', '9:15 AM', '9:20 AM', '9:25 AM', '9:30 AM', '9:35 AM', '9:40 AM', '9:45 AM', '9:50 AM', '9:55 AM', '10AM', '10:05 AM', '10:10 AM', '10:15 AM', '10:20 AM', '10:25 AM', '10:30 AM', '10:35 AM', '10:40 AM', '10:45 AM', '10:50 AM', '10:55 AM', '11AM', '11:05 AM', '11:10 AM', '11:15 AM', '11:20 AM', '11:25 AM', '11:30 AM', '11:35 AM', '11:40 AM', '11:45 AM', '11:50 AM', '11:55 AM', '12PM', '12:05 PM', '12:10 PM', '12:15 PM', '12:20 PM', '12:25 PM', '12:30 PM', '12:35 PM', '12:40 PM', '12:45 PM', '12:50 PM', '12:55 PM', '13PM', '13:05 PM', '13:10 PM', '13:15 PM', '13:20 PM', '13:25 PM', '13:30 PM', '13:35 PM', '13:40 PM', '13:45 PM', '13:50 PM', '13:55 PM', '14PM', '14:05 PM', '14:10 PM', '14:15 PM', '14:20 PM', '14:25 PM', '14:30 PM', '14:35 PM', '14:40 PM', '14:45 PM', '14:50 PM', '14:55 PM', '15PM', '15:05 PM', '15:10 PM', '15:15 PM', '15:20 PM', '15:25 PM', '15:30 PM', '15:35 PM', '15:40 PM', '15:45 PM', '15:50 PM', '15:55 PM', '16PM', '16:05 PM', '16:10 PM', '16:15 PM', '16:20 PM', '16:25 PM', '16:30 PM', '16:35 PM', '16:40 PM', '16:45 PM', '16:50 PM', '16:55 PM', '17PM', '17:05 PM', '17:10 PM', '17:15 PM', '17:20 PM', '17:25 PM', '17:30 PM', '17:35 PM', '17:40 PM', '17:45 PM', '17:50 PM', '17:55 PM', '18PM', '18:05 PM', '18:10 PM', '18:15 PM', '18:20 PM', '18:25 PM', '18:30 PM', '18:35 PM', '18:40 PM', '18:45 PM', '18:50 PM', '18:55 PM', '19PM'];\n              var range5Minute = 0;\n\n              for (let i = 0; i < dataListEnergy.length; i++) {\n                if (i == 0) {\n                  var hour = Libs.dateFormat(dataListEnergy[i].time_format, 'HH', 'YYYY-MM-DD HH:mm:ss');\n                  var minutes = Libs.dateFormat(dataListEnergy[i].time_format, 'mm', 'YYYY-MM-DD HH:mm:ss');\n                  range5Minute = (parseInt(hour) - 5) * 12 + Math.round(minutes / 5);\n\n                  if (range5Minute > 0) {\n                    for (var j = 0; j < range5Minute; j++) {\n                      var dateF = Libs.dateFormat(Libs.addMinutes(Libs.dateFormat(dataListEnergy[i].time_format, 'YYYY-MM-DD 05:00', 'YYYY-MM-DD HH:mm:ss'), j * 5), 'DD/MM/YYYY HH:mm', 'YYYY-MM-DD HH:mm:ss');\n                      rowItemEnergy.push([dateF, null]);\n                      rowItemPower.push([dateF, null]);\n                    }\n                  }\n                }\n\n                rowItemEnergy.push([dataListEnergy[i].time_full, dataListEnergy[i].activeEnergy]);\n                rowItemPower.push([dataListEnergy[i].time_full, dataListEnergy[i].activePower]);\n              } // set chart line end\n\n\n              let range5MinuteLine = range5Minute + dataListEnergy.length;\n\n              if (range5MinuteLine < 168 && range5MinuteLine > 0) {\n                let lastDate = '';\n\n                for (let izero1 = range5MinuteLine; izero1 < 168; izero1++) {\n                  if (izero1 == range5MinuteLine) {\n                    lastDate = dataListEnergy[dataListEnergy.length - 1].time_format;\n                  }\n\n                  if (lastDate != null) {\n                    lastDate = Libs.addMinutes(lastDate, 5);\n                    rowItemEnergy.push([Libs.dateFormat(lastDate, 'YYYY-MM-DD HH:mm', 'YYYY-MM-DD HH:mm:ss'), null]);\n                    rowItemPower.push([Libs.dateFormat(lastDate, 'YYYY-MM-DD HH:mm', 'YYYY-MM-DD HH:mm:ss'), null]);\n                  }\n                }\n              }\n\n              seriesItemEnergy.data = rowItemEnergy;\n              series.push(seriesItemEnergy);\n              seriesItemPower.data = rowItemPower;\n              series.push(seriesItemPower);\n              break;\n\n            case 2:\n              curItem.tickInterval = 4;\n              categories = ['5AM', '5:15AM', '5:30AM', '5:45AM', '6AM', '6:15AM', '6:30AM', '6:45AM', '7AM', '7:15AM', '7:30AM', '7:45AM', '8AM', '8:15AM', '8:30AM', '8:45AM', '9AM', '9:15AM', '9:30AM', '9:45AM', '10AM', '10:15AM', '10:30AM', '10:45AM', '11AM', '11:15AM', '11:30AM', '11:45AM', '12PM', '12:15PM', '12:30PM', '12:45PM', '13PM', '13:15PM', '13:30PM', '13:45PM', '14PM', '14:15PM', '14:30PM', '14:45PM', '15PM', '15:15PM', '15:30PM', '15:45PM', '16PM', '16:15PM', '16:30PM', '16:45PM', '17PM', '17:15PM', '17:30PM', '17:45PM', '18PM', '18:15PM', '18:30PM', '18:45PM', '19PM'];\n              var range15Minute = 0;\n\n              for (let i = 0; i < dataListEnergy.length; i++) {\n                if (i == 0) {\n                  var hour = Libs.dateFormat(dataListEnergy[i].time_format, 'HH', 'YYYY-MM-DD HH:mm:ss');\n                  var minutes = Libs.dateFormat(dataListEnergy[i].time_format, 'mm', 'YYYY-MM-DD HH:mm:ss');\n                  range15Minute = (parseInt(hour) - 5) * 4 + Math.round(minutes / 15);\n\n                  if (range15Minute > 0) {\n                    for (var j = 0; j < range15Minute; j++) {\n                      var dateF = Libs.dateFormat(Libs.addMinutes(Libs.dateFormat(dataListEnergy[i].time_format, 'YYYY-MM-DD 05:00', 'YYYY-MM-DD HH:mm:ss'), j * 15), 'DD/MM/YYYY HH:mm', 'YYYY-MM-DD HH:mm:ss');\n                      rowItemEnergy.push([dateF, null]);\n                      rowItemPower.push([dateF, null]);\n                    }\n                  }\n                }\n\n                rowItemEnergy.push([dataListEnergy[i].time_full, dataListEnergy[i].activeEnergy]);\n                rowItemPower.push([dataListEnergy[i].time_full, dataListEnergy[i].activePower]);\n              } // set chart line end\n\n\n              let range15MinuteLine = range15Minute + dataListEnergy.length;\n\n              if (range15MinuteLine < 56 && range15MinuteLine > 0) {\n                let lastDate = '';\n\n                for (let izero1 = range15MinuteLine; izero1 < 56; izero1++) {\n                  if (izero1 == range15MinuteLine) {\n                    lastDate = dataListEnergy[dataListEnergy.length - 1].time_format;\n                  }\n\n                  if (lastDate != null) {\n                    lastDate = Libs.addMinutes(lastDate, 15);\n                    rowItemEnergy.push([Libs.dateFormat(lastDate, 'DD/MM/YYYY', 'YYYY-MM-DD HH:mm:ss'), null]);\n                    rowItemPower.push([Libs.dateFormat(lastDate, 'DD/MM/YYYY HH:mm', 'YYYY-MM-DD HH:mm:ss'), null]);\n                  }\n                }\n              }\n\n              seriesItemEnergy.data = rowItemEnergy;\n              series.push(seriesItemEnergy);\n              seriesItemPower.data = rowItemPower;\n              series.push(seriesItemPower);\n              break;\n\n            default:\n              curItem.tickInterval = 1;\n              categories = ['5AM', '6AM', '7AM', '8AM', '9AM', '10AM', '11AM', '12PM', '13PM', '14PM', '15PM', '16PM', '17PM', '18PM', '19PM'];\n              var rangeHour = 0;\n\n              for (let i = 0; i < dataListEnergy.length; i++) {\n                if (i == 0) {\n                  var hour = Libs.dateFormat(dataListEnergy[i].time_format, 'HH', 'YYYY-MM-DD HH:mm:ss');\n                  rangeHour = parseInt(hour) - 5;\n\n                  if (rangeHour > 0) {\n                    for (var j = 0; j < rangeHour; j++) {\n                      var dateF = Libs.dateFormat(dataListEnergy[i].time_format, 'DD/MM/YYYY', 'YYYY-MM-DD HH:mm:ss') + \" \" + (j + 5) + \":00\";\n                      rowItemEnergy.push([dateF, null]);\n                      rowItemPower.push([dateF, null]);\n                    }\n                  }\n                }\n\n                rowItemEnergy.push([dataListEnergy[i].time_full, dataListEnergy[i].activeEnergy]);\n                rowItemPower.push([dataListEnergy[i].time_full, dataListEnergy[i].activePower]);\n              } // set chart line end\n\n\n              let rangeHourLine = rangeHour + dataListEnergy.length;\n\n              if (rangeHourLine < 15 && rangeHourLine > 0) {\n                let lastDate = '';\n\n                for (let izero1 = rangeHourLine; izero1 < 15; izero1++) {\n                  if (izero1 == rangeHourLine) {\n                    lastDate = dataListEnergy[dataListEnergy.length - 1].time_format;\n                  }\n\n                  if (lastDate != null) {\n                    lastDate = Libs.addMinutes(lastDate, 60);\n                    rowItemEnergy.push([Libs.dateFormat(lastDate, 'DD/MM/YYYY HH:mm', 'YYYY-MM-DD HH:mm:ss'), null]);\n                    rowItemPower.push([Libs.dateFormat(lastDate, 'DD/MM/YYYY HH:mm', 'YYYY-MM-DD HH:mm:ss'), null]);\n                  }\n                }\n              }\n\n              seriesItemEnergy.data = rowItemEnergy;\n              series.push(seriesItemEnergy);\n              seriesItemPower.data = rowItemPower;\n              series.push(seriesItemPower);\n              break;\n          }\n        } else if (params.filterBy === '3_day') {\n          var start_date = chartParams.start_date;\n          let arrDate = start_date.split('/');\n          var currentDate = '';\n          var stringDate1 = '',\n              stringDate2 = '',\n              stringDate3 = '';\n\n          if (arrDate) {\n            currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n            stringDate1 = moment(currentDate).format('DD. MMM');\n            stringDate2 = moment(Libs.addDays(currentDate, 1)).format('DD. MMM');\n            stringDate3 = moment(Libs.addDays(currentDate, 2)).format('DD. MMM');\n          } else {\n            return;\n          }\n\n          switch (chartParams.data_send_time) {\n            case 1:\n              curItem.tickInterval = 169;\n              categories = [stringDate1, '5:05 AM', '5:10 AM', '5:15 AM', '5:20 AM', '5:25 AM', '5:30 AM', '5:35 AM', '5:40 AM', '5:45 AM', '5:50 AM', '5:55 AM', '6:00 AM', '6:05 AM', '6:10 AM', '6:15 AM', '6:20 AM', '6:25 AM', '6:30 AM', '6:35 AM', '6:40 AM', '6:45 AM', '6:50 AM', '6:55 AM', '7:00 AM', '7:05 AM', '7:10 AM', '7:15 AM', '7:20 AM', '7:25 AM', '7:30 AM', '7:35 AM', '7:40 AM', '7:45 AM', '7:50 AM', '7:55 AM', '8:00 AM', '8:05 AM', '8:10 AM', '8:15 AM', '8:20 AM', '8:25 AM', '8:30 AM', '8:35 AM', '8:40 AM', '8:45 AM', '8:50 AM', '8:55 AM', '9:00 AM', '9:05 AM', '9:10 AM', '9:15 AM', '9:20 AM', '9:25 AM', '9:30 AM', '9:35 AM', '9:40 AM', '9:45 AM', '9:50 AM', '9:55 AM', '10:00 AM', '10:05 AM', '10:10 AM', '10:15 AM', '10:20 AM', '10:25 AM', '10:30 AM', '10:35 AM', '10:40 AM', '10:45 AM', '10:50 AM', '10:55 AM', '11:00 AM', '11:05 AM', '11:10 AM', '11:15 AM', '11:20 AM', '11:25 AM', '11:30 AM', '11:35 AM', '11:40 AM', '11:45 AM', '11:50 AM', '11:55 AM', '12:00 PM', '12:05 PM', '12:10 PM', '12:15 PM', '12:20 PM', '12:25 PM', '12:30 PM', '12:35 PM', '12:40 PM', '12:45 PM', '12:50 PM', '12:55 PM', '13:00 PM', '13:05 PM', '13:10 PM', '13:15 PM', '13:20 PM', '13:25 PM', '13:30 PM', '13:35 PM', '13:40 PM', '13:45 PM', '13:50 PM', '13:55 PM', '14:00 PM', '14:05 PM', '14:10 PM', '14:15 PM', '14:20 PM', '14:25 PM', '14:30 PM', '14:35 PM', '14:40 PM', '14:45 PM', '14:50 PM', '14:55 PM', '15:00 PM', '15:05 PM', '15:10 PM', '15:15 PM', '15:20 PM', '15:25 PM', '15:30 PM', '15:35 PM', '15:40 PM', '15:45 PM', '15:50 PM', '15:55 PM', '16:00 PM', '16:05 PM', '16:10 PM', '16:15 PM', '16:20 PM', '16:25 PM', '16:30 PM', '16:35 PM', '16:40 PM', '16:45 PM', '16:50 PM', '16:55 PM', '17:00 PM', '17:05 PM', '17:10 PM', '17:15 PM', '17:20 PM', '17:25 PM', '17:30 PM', '17:35 PM', '17:40 PM', '17:45 PM', '17:50 PM', '17:55 PM', '18:00 PM', '18:05 PM', '18:10 PM', '18:15 PM', '18:20 PM', '18:25 PM', '18:30 PM', '18:35 PM', '18:40 PM', '18:45 PM', '18:50 PM', '18:55 PM', '19:00 PM', stringDate2, '5:05 AM', '5:10 AM', '5:15 AM', '5:20 AM', '5:25 AM', '5:30 AM', '5:35 AM', '5:40 AM', '5:45 AM', '5:50 AM', '5:55 AM', '6:00 AM', '6:05 AM', '6:10 AM', '6:15 AM', '6:20 AM', '6:25 AM', '6:30 AM', '6:35 AM', '6:40 AM', '6:45 AM', '6:50 AM', '6:55 AM', '7:00 AM', '7:05 AM', '7:10 AM', '7:15 AM', '7:20 AM', '7:25 AM', '7:30 AM', '7:35 AM', '7:40 AM', '7:45 AM', '7:50 AM', '7:55 AM', '8:00 AM', '8:05 AM', '8:10 AM', '8:15 AM', '8:20 AM', '8:25 AM', '8:30 AM', '8:35 AM', '8:40 AM', '8:45 AM', '8:50 AM', '8:55 AM', '9:00 AM', '9:05 AM', '9:10 AM', '9:15 AM', '9:20 AM', '9:25 AM', '9:30 AM', '9:35 AM', '9:40 AM', '9:45 AM', '9:50 AM', '9:55 AM', '10:00 AM', '10:05 AM', '10:10 AM', '10:15 AM', '10:20 AM', '10:25 AM', '10:30 AM', '10:35 AM', '10:40 AM', '10:45 AM', '10:50 AM', '10:55 AM', '11:00 AM', '11:05 AM', '11:10 AM', '11:15 AM', '11:20 AM', '11:25 AM', '11:30 AM', '11:35 AM', '11:40 AM', '11:45 AM', '11:50 AM', '11:55 AM', '12:00 PM', '12:05 PM', '12:10 PM', '12:15 PM', '12:20 PM', '12:25 PM', '12:30 PM', '12:35 PM', '12:40 PM', '12:45 PM', '12:50 PM', '12:55 PM', '13:00 PM', '13:05 PM', '13:10 PM', '13:15 PM', '13:20 PM', '13:25 PM', '13:30 PM', '13:35 PM', '13:40 PM', '13:45 PM', '13:50 PM', '13:55 PM', '14:00 PM', '14:05 PM', '14:10 PM', '14:15 PM', '14:20 PM', '14:25 PM', '14:30 PM', '14:35 PM', '14:40 PM', '14:45 PM', '14:50 PM', '14:55 PM', '15:00 PM', '15:05 PM', '15:10 PM', '15:15 PM', '15:20 PM', '15:25 PM', '15:30 PM', '15:35 PM', '15:40 PM', '15:45 PM', '15:50 PM', '15:55 PM', '16:00 PM', '16:05 PM', '16:10 PM', '16:15 PM', '16:20 PM', '16:25 PM', '16:30 PM', '16:35 PM', '16:40 PM', '16:45 PM', '16:50 PM', '16:55 PM', '17:00 PM', '17:05 PM', '17:10 PM', '17:15 PM', '17:20 PM', '17:25 PM', '17:30 PM', '17:35 PM', '17:40 PM', '17:45 PM', '17:50 PM', '17:55 PM', '18:00 PM', '18:05 PM', '18:10 PM', '18:15 PM', '18:20 PM', '18:25 PM', '18:30 PM', '18:35 PM', '18:40 PM', '18:45 PM', '18:50 PM', '18:55 PM', '19:00 PM', stringDate3, '5:05 AM', '5:10 AM', '5:15 AM', '5:20 AM', '5:25 AM', '5:30 AM', '5:35 AM', '5:40 AM', '5:45 AM', '5:50 AM', '5:55 AM', '6:00 AM', '6:05 AM', '6:10 AM', '6:15 AM', '6:20 AM', '6:25 AM', '6:30 AM', '6:35 AM', '6:40 AM', '6:45 AM', '6:50 AM', '6:55 AM', '7:00 AM', '7:05 AM', '7:10 AM', '7:15 AM', '7:20 AM', '7:25 AM', '7:30 AM', '7:35 AM', '7:40 AM', '7:45 AM', '7:50 AM', '7:55 AM', '8:00 AM', '8:05 AM', '8:10 AM', '8:15 AM', '8:20 AM', '8:25 AM', '8:30 AM', '8:35 AM', '8:40 AM', '8:45 AM', '8:50 AM', '8:55 AM', '9:00 AM', '9:05 AM', '9:10 AM', '9:15 AM', '9:20 AM', '9:25 AM', '9:30 AM', '9:35 AM', '9:40 AM', '9:45 AM', '9:50 AM', '9:55 AM', '10:00 AM', '10:05 AM', '10:10 AM', '10:15 AM', '10:20 AM', '10:25 AM', '10:30 AM', '10:35 AM', '10:40 AM', '10:45 AM', '10:50 AM', '10:55 AM', '11:00 AM', '11:05 AM', '11:10 AM', '11:15 AM', '11:20 AM', '11:25 AM', '11:30 AM', '11:35 AM', '11:40 AM', '11:45 AM', '11:50 AM', '11:55 AM', '12:00 PM', '12:05 PM', '12:10 PM', '12:15 PM', '12:20 PM', '12:25 PM', '12:30 PM', '12:35 PM', '12:40 PM', '12:45 PM', '12:50 PM', '12:55 PM', '13:00 PM', '13:05 PM', '13:10 PM', '13:15 PM', '13:20 PM', '13:25 PM', '13:30 PM', '13:35 PM', '13:40 PM', '13:45 PM', '13:50 PM', '13:55 PM', '14:00 PM', '14:05 PM', '14:10 PM', '14:15 PM', '14:20 PM', '14:25 PM', '14:30 PM', '14:35 PM', '14:40 PM', '14:45 PM', '14:50 PM', '14:55 PM', '15:00 PM', '15:05 PM', '15:10 PM', '15:15 PM', '15:20 PM', '15:25 PM', '15:30 PM', '15:35 PM', '15:40 PM', '15:45 PM', '15:50 PM', '15:55 PM', '16:00 PM', '16:05 PM', '16:10 PM', '16:15 PM', '16:20 PM', '16:25 PM', '16:30 PM', '16:35 PM', '16:40 PM', '16:45 PM', '16:50 PM', '16:55 PM', '17:00 PM', '17:05 PM', '17:10 PM', '17:15 PM', '17:20 PM', '17:25 PM', '17:30 PM', '17:35 PM', '17:40 PM', '17:45 PM', '17:50 PM', '17:55 PM', '18:00 PM', '18:05 PM', '18:10 PM', '18:15 PM', '18:20 PM', '18:25 PM', '18:30 PM', '18:35 PM', '18:40 PM', '18:45 PM', '18:50 PM', '18:55 PM', '19:00 PM'];\n\n              if (Libs.isArrayData(data)) {\n                for (let i = 0; i < data.length; i++) {\n                  rowItemEnergy.push([data[i].time_full, data[i].activeEnergy]);\n                  rowItemPower.push([data[i].time_full, data[i].activePower]);\n                }\n              }\n\n              seriesItemEnergy.data = rowItemEnergy;\n              series.push(seriesItemEnergy);\n              seriesItemPower.data = rowItemPower;\n              series.push(seriesItemPower);\n              break;\n\n            case 2:\n              curItem.tickInterval = 57;\n              categories = [stringDate1, '5:15AM', '5:30AM', '5:45AM', '6AM', '6:15AM', '6:30AM', '6:45AM', '7AM', '7:15AM', '7:30AM', '7:45AM', '8AM', '8:15AM', '8:30AM', '8:45AM', '9AM', '9:15AM', '9:30AM', '9:45AM', '10AM', '10:15AM', '10:30AM', '10:45AM', '11AM', '11:15AM', '11:30AM', '11:45AM', '12PM', '12:15PM', '12:30PM', '12:45PM', '13PM', '13:15PM', '13:30PM', '13:45PM', '14PM', '14:15PM', '14:30PM', '14:45PM', '15PM', '15:15PM', '15:30PM', '15:45PM', '16PM', '16:15PM', '16:30PM', '16:45PM', '17PM', '17:15PM', '17:30PM', '17:45PM', '18PM', '18:15PM', '18:30PM', '18:45PM', '19PM', stringDate2, '5:15AM', '5:30AM', '5:45AM', '6AM', '6:15AM', '6:30AM', '6:45AM', '7AM', '7:15AM', '7:30AM', '7:45AM', '8AM', '8:15AM', '8:30AM', '8:45AM', '9AM', '9:15AM', '9:30AM', '9:45AM', '10AM', '10:15AM', '10:30AM', '10:45AM', '11AM', '11:15AM', '11:30AM', '11:45AM', '12PM', '12:15PM', '12:30PM', '12:45PM', '13PM', '13:15PM', '13:30PM', '13:45PM', '14PM', '14:15PM', '14:30PM', '14:45PM', '15PM', '15:15PM', '15:30PM', '15:45PM', '16PM', '16:15PM', '16:30PM', '16:45PM', '17PM', '17:15PM', '17:30PM', '17:45PM', '18PM', '18:15PM', '18:30PM', '18:45PM', '19PM', stringDate3, '5:15AM', '5:30AM', '5:45AM', '6AM', '6:15AM', '6:30AM', '6:45AM', '7AM', '7:15AM', '7:30AM', '7:45AM', '8AM', '8:15AM', '8:30AM', '8:45AM', '9AM', '9:15AM', '9:30AM', '9:45AM', '10AM', '10:15AM', '10:30AM', '10:45AM', '11AM', '11:15AM', '11:30AM', '11:45AM', '12PM', '12:15PM', '12:30PM', '12:45PM', '13PM', '13:15PM', '13:30PM', '13:45PM', '14PM', '14:15PM', '14:30PM', '14:45PM', '15PM', '15:15PM', '15:30PM', '15:45PM', '16PM', '16:15PM', '16:30PM', '16:45PM', '17PM', '17:15PM', '17:30PM', '17:45PM', '18PM', '18:15PM', '18:30PM', '18:45PM', '19PM'];\n\n              if (Libs.isArrayData(data)) {\n                for (let i = 0; i < data.length; i++) {\n                  rowItemEnergy.push([data[i].time_full, data[i].activeEnergy]);\n                  rowItemPower.push([data[i].time_full, data[i].activePower]);\n                }\n              }\n\n              seriesItemEnergy.data = rowItemEnergy;\n              series.push(seriesItemEnergy);\n              seriesItemPower.data = rowItemPower;\n              series.push(seriesItemPower);\n              break;\n\n            case 3:\n              curItem.tickInterval = 15;\n              categories = [stringDate1, '6AM', '7AM', '8AM', '9AM', '10AM', '11AM', '12PM', '13PM', '14PM', '15PM', '16PM', '17PM', '18PM', '19PM', stringDate2, '6AM', '7AM', '8AM', '9AM', '10AM', '11AM', '12PM', '13PM', '14PM', '15PM', '16PM', '17PM', '18PM', '19PM', stringDate3, '6AM', '7AM', '8AM', '9AM', '10AM', '11AM', '12PM', '13PM', '14PM', '15PM', '16PM', '17PM', '18PM', '19PM'];\n\n              if (Libs.isArrayData(data)) {\n                for (let i = 0; i < data.length; i++) {\n                  rowItemEnergy.push([data[i].time_full, data[i].activeEnergy]);\n                  rowItemPower.push([data[i].time_full, data[i].activePower]);\n                }\n              }\n\n              seriesItemEnergy.data = rowItemEnergy;\n              series.push(seriesItemEnergy);\n              seriesItemPower.data = rowItemPower;\n              series.push(seriesItemPower);\n              break;\n          }\n        } else {\n          curItem.tickInterval = 1;\n          categories = [];\n          var lastDate = '',\n              minMonth = '',\n              maxMonth = '';\n\n          for (let i = 0; i < dataListEnergy.length; i++) {\n            categories.push([dataListEnergy[i].category_time_format]);\n            lastDate = dataListEnergy[i].time_format;\n\n            if (i === 0) {\n              let date = new Date(dataListEnergy[i].time_format);\n              minMonth = date.getMonth() + 1;\n            }\n\n            if (i === dataListEnergy.length - 1) {\n              let date = new Date(dataListEnergy[i].time_format);\n              maxMonth = date.getMonth() + 1;\n            }\n\n            rowItemEnergy.push([dataListEnergy[i].time_full, dataListEnergy[i].activeEnergy]);\n            rowItemPower.push([dataListEnergy[i].time_full, dataListEnergy[i].activePower]);\n          }\n\n          switch (params.filterBy) {\n            case 'this_month':\n            case 'last_month':\n              if (!Libs.isBlank(lastDate)) {\n                let date = new Date(lastDate);\n                let firstDay = date.getDate();\n                let lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n\n                if (firstDay < lastDay.getDate()) {\n                  for (let i = firstDay; i < lastDay.getDate(); i++) {\n                    lastDate = Libs.addDays(lastDate, 1);\n                    rowItemEnergy.push([Libs.dateFormat(lastDate, 'DD/MM/YYYY', 'YYYY-MM-DD'), null]);\n                    rowItemPower.push([Libs.dateFormat(lastDate, 'DD/MM/YYYY', 'YYYY-MM-DD'), null]);\n                    categories.push([lastDate.getDate()]);\n                  }\n                }\n              }\n\n              break;\n\n            case '12_month':\n              if (!Libs.isBlank(minMonth) && !Libs.isBlank(maxMonth)) {\n                let firstArrEnergy = [],\n                    firstArrayPower = [],\n                    firstArrCategory = [];\n                let date = new Date(lastDate);\n\n                for (let i = 1; i < minMonth; i++) {\n                  firstArrEnergy.push([(i < 10 ? '0' + i : i) + \"/\" + date.getFullYear(), null]);\n                  firstArrayPower.push([(i < 10 ? '0' + i : i) + \"/\" + date.getFullYear(), null]);\n                  firstArrCategory.push([Libs.getStringMonthNumber(i)]);\n                }\n\n                firstArrCategory.push(...categories);\n                firstArrEnergy.push(...rowItemEnergy);\n                firstArrayPower.push(...rowItemPower);\n\n                for (let i = maxMonth + 1; i <= 12; i++) {\n                  firstArrEnergy.push([(i < 10 ? '0' + i : i) + \"/\" + date.getFullYear(), null]);\n                  firstArrayPower.push([(i < 10 ? '0' + i : i) + \"/\" + date.getFullYear(), null]);\n                  firstArrCategory.push([Libs.getStringMonthNumber(i)]);\n                }\n\n                categories = firstArrCategory;\n                rowItemEnergy = firstArrEnergy;\n                rowItemPower = firstArrayPower;\n              }\n\n              break;\n\n            case 'lifetime':\n              if (!Libs.isBlank(curItem.total_year) && curItem.total_year < 2) {\n                if (!Libs.isBlank(minMonth) && !Libs.isBlank(maxMonth)) {\n                  let firstArrEnergy = [],\n                      firstArrayPower = [],\n                      firstArrCategory = [];\n                  let date = new Date(lastDate);\n\n                  for (let i = 1; i < minMonth; i++) {\n                    firstArrEnergy.push([(i < 10 ? '0' + i : i) + \"/\" + date.getFullYear(), null]);\n                    firstArrayPower.push([(i < 10 ? '0' + i : i) + \"/\" + date.getFullYear(), null]);\n                    firstArrCategory.push([Libs.getStringMonthNumber(i)]);\n                  }\n\n                  firstArrCategory.push(...categories);\n                  firstArrEnergy.push(...rowItemEnergy);\n                  firstArrayPower.push(...rowItemPower);\n\n                  for (let i = maxMonth + 1; i <= 12; i++) {\n                    firstArrEnergy.push([(i < 10 ? '0' + i : i) + \"/\" + date.getFullYear(), null]);\n                    firstArrayPower.push([(i < 10 ? '0' + i : i) + \"/\" + date.getFullYear(), null]);\n                    firstArrCategory.push([Libs.getStringMonthNumber(i)]);\n                  }\n\n                  categories = firstArrCategory;\n                  rowItemEnergy = firstArrEnergy;\n                  rowItemPower = firstArrayPower;\n                }\n              }\n\n              break;\n          }\n\n          seriesItemEnergy.data = rowItemEnergy;\n          series.push(seriesItemEnergy);\n          seriesItemPower.data = rowItemPower;\n          series.push(seriesItemPower);\n        }\n\n        self.setState({\n          dataCategories: categories,\n          dataEnergy: data,\n          curItem: curItem,\n          series: series\n        }, () => {\n          self.loadChartOption();\n        });\n      } else {\n        self.setState({\n          dataCategories: [],\n          dataEnergy: [],\n          curItem: curItem,\n          series: []\n        }, () => {\n          self.loadChartOption();\n        });\n      }\n    });\n  }\n\n  loadChartOption() {\n    var chartOption = {\n      credits: {\n        enabled: false\n      },\n      exporting: {\n        enabled: true\n      },\n      title: {\n        text: null\n      },\n      chart: {\n        type: 'column'\n      },\n      legend: {\n        layout: 'horizontal',\n        align: 'center',\n        verticalAlign: 'bottom',\n        borderWidth: 0,\n        showInLegend: false\n      },\n      colors: ['#82cdff', '#f2ae1b', '#1e477f', '#e68600', '#00b767', '#ffc300'],\n      xAxis: [{\n        title: {\n          text: \"Power\",\n          enabled: false\n        },\n        alignTicks: true,\n        gridLineWidth: 1,\n        tickInterval: this.state.curItem.tickInterval,\n        visible: true,\n        categories: this.state.dataCategories\n      }, {\n        title: {\n          text: 'Data',\n          enabled: false\n        },\n        tickInterval: 1,\n        opposite: true,\n        visible: false\n      }],\n      yAxis: [{\n        min: 0,\n        title: {\n          text: 'kWh',\n          enabled: true\n        },\n        lineWidth: 1,\n        gridLineWidth: 1,\n        labels: {\n          enabled: true\n        }\n      }, {\n        title: {\n          text: 'kW',\n          enabled: true\n        },\n        lineWidth: 1,\n        opposite: true,\n        gridLineWidth: 1,\n        labels: {\n          enabled: true\n        }\n      }],\n      plotOptions: {\n        column: {\n          stacking: 'normal'\n        }\n      },\n      tooltip: {\n        shared: false,\n        crosshairs: true\n      },\n      series: this.state.series\n    };\n    this.setState({\n      chartOption: chartOption\n    });\n  }\n\n  render() {\n    return this.jsxTemplate.call(this);\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(Plant);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/src/containers/views/desktop/ModulePrivate/Plant/Plant.js"],"names":["React","PlantJsx","BaseComponent","Libs","withTranslation","MainPlantService","FileSaver","XLSX","moment","Plant","constructor","props","context","handleClickOutside","event","target","chartParams","state","self","wrapperRef","current","contains","show_filter","setState","onClickFilter","value","dataFilter","curItem","isArrayData","item","find","isObjectEmpty","id_filter","id","text_filter","text","showNextBtn","end_date","getCurrentMMDDYYYYHI","max_date","getCurrentDDMMYYYY","start_date","addDays","format","start_max_date","tlast","Date","ylast","getFullYear","mlast","getMonth","addMonths","endOf","getDataChart","changeViewMinute","isBlank","data_send_time","onClickShowSingleLine","single_line","onClickCloseSingleLine","onClickShowFilter","downloadData","dataEnergy","t","dataExport","i","len","length","push","time_full","name","activeEnergy","activePower","fileType","fileExtension","ws","utils","json_to_sheet","skipHeader","wb","SheetNames","Sheets","excelBuffer","write","bookType","type","data","Blob","saveAs","hash_id","params","allLanguage","employee","languages","paging","total","currentInput","jsxTemplate","createRef","componentDidMount","document","addEventListener","loadConfigDefaultDate","componentWillUnmount","removeEventListener","componentWillReceiveProps","nextProps","match","getDetailProject","max_start_date","id_language","id_employee","instance","getDetail","handleInputDateChange","checked","arrDate","split","currentDate","startOfMonth","startOf","total_year","filterBy","convertAllFormatDate","dateFormat","dataListEnergy","series","categories","seriesItemEnergy","zIndex","tooltip","valueSuffix","seriesItemPower","xAxis","yAxis","lineWidth","marker","radius","rowItemEnergy","rowItemPower","tickInterval","range5Minute","hour","time_format","minutes","parseInt","Math","round","j","dateF","addMinutes","range5MinuteLine","lastDate","izero1","range15Minute","range15MinuteLine","rangeHour","rangeHourLine","stringDate1","stringDate2","stringDate3","minMonth","maxMonth","category_time_format","date","firstDay","getDate","lastDay","firstArrEnergy","firstArrayPower","firstArrCategory","getStringMonthNumber","dataCategories","loadChartOption","chartOption","credits","enabled","exporting","title","chart","legend","layout","align","verticalAlign","borderWidth","showInLegend","colors","alignTicks","gridLineWidth","visible","opposite","min","labels","plotOptions","column","stacking","shared","crosshairs","render","call","HighOrderComponentTranslated"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PlantJsx from './Plant.jsx';\nimport BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport MainPlantService from '../../../../../services/MainPlantService';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport moment from 'moment';\n\nclass Plant extends BaseComponent {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            hash_id: !Libs.isObjectEmpty(this.params) ? this.params.id : null,\n            curItem: {},\n            single_line: true,\n            allLanguage: Libs.isBlank(this.employee) ? [] : this.employee.languages,\n            dataFilter: [\n                { id: \"today\", text: \"Today\" },\n                { id: \"3_day\", text: \"3 days\" },\n                { id: \"this_month\", text: \"This month\" },\n                { id: \"last_month\", text: \"Last month\" },\n                { id: \"12_month\", text: \"Last 12 months\" },\n                { id: \"lifetime\", text: \"Lifetime\" }\n            ],\n\n            chartParams: {\n                id_filter: 'today',\n                text_filter: 'Today',\n                show_filter: false,\n                max_date: Libs.getCurrentDDMMYYYY(),\n                data_send_time: 2\n            },\n        };\n\n        this.paging = {\n            total: 0,\n            current: 1,\n            currentInput: 1\n        };\n\n        this.jsxTemplate = PlantJsx;\n        this.wrapperRef = React.createRef();\n\n    }\n\n    componentDidMount() {\n        document.addEventListener('click', this.handleClickOutside);\n        this.loadConfigDefaultDate();\n        // this.getDetailProject();\n        // this.getDataChart();\n\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('click', this.handleClickOutside)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        let self = this;\n        if (nextProps.match.params.id !== this.props.match.params.id) {\n            this.setState({\n                hash_id: nextProps.match.params.id\n            }, () => {\n                self.getDetailProject();\n                self.getDataChart();\n            });\n        }\n    }\n\n\n    handleClickOutside = (event) => {\n        const { target } = event;\n        var { chartParams } = this.state, self = this;\n        if (!this.wrapperRef.current.contains(target)) {\n            if (chartParams.show_filter) {\n                chartParams.show_filter = false;\n                self.setState({\n                    chartParams: chartParams\n                })\n            }\n        }\n    }\n\n    loadConfigDefaultDate() {\n        var { chartParams } = this.state;\n        switch (chartParams.id_filter) {\n            case 'today':\n                chartParams.max_date = Libs.getCurrentMMDDYYYYHI();\n                chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n                break;\n            case '3_day':\n                chartParams.end_date = Libs.getCurrentDDMMYYYY();\n                chartParams.start_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n                chartParams.start_max_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n                break;\n            case 'this_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                chartParams.end_date = moment().format('MM/YYYY');\n                break;\n            case 'last_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n                var ylast = tlast.getFullYear(), mlast = tlast.getMonth();\n                chartParams.end_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).endOf('month').format('MM/YYYY');\n                chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).format('MM/YYYY');\n\n                break;\n            case 'lifetime':\n            case '12_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                chartParams.end_date = moment().format('MM/YYYY');\n                var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n                var ylast = tlast.getFullYear(), mlast = tlast.getMonth();\n                chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -12)).format('MM/YYYY');\n                chartParams.max_start_date = moment(Libs.addMonths(Libs.getCurrentMMDDYYYYHI(), -12)).format('MM/YYYY');\n                break;\n        }\n        this.setState({\n            chartParams: chartParams\n        })\n    }\n\n    onClickFilter = (value) => {\n        var { chartParams, dataFilter, curItem } = this.state;\n        var self = this;\n        if (!Libs.isArrayData(dataFilter)) return;\n        var item = Libs.find(dataFilter, 'id', value);\n        if (Libs.isObjectEmpty(item)) return;\n\n        chartParams.id_filter = item.id;\n        chartParams.text_filter = item.text;\n        chartParams.show_filter = false;\n        chartParams.showNextBtn = false;\n\n        switch (value) {\n            case 'today':\n                chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n                chartParams.max_date = Libs.getCurrentMMDDYYYYHI();\n                break;\n            case '3_day':\n                chartParams.end_date = Libs.getCurrentDDMMYYYY();\n                chartParams.start_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n                chartParams.start_max_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n                chartParams.max_date = Libs.getCurrentDDMMYYYY();\n                break;\n\n            case 'this_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                chartParams.end_date = moment().format('MM/YYYY');\n                break;\n            case 'last_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n                var ylast = tlast.getFullYear(), mlast = tlast.getMonth();\n                chartParams.end_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).endOf('month').format('MM/YYYY');\n                chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).format('MM/YYYY');\n                break;\n\n            case 'lifetime':\n            case '12_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                chartParams.end_date = moment().format('MM/YYYY');\n                chartParams.start_date = moment(Libs.addMonths(Libs.getCurrentMMDDYYYYHI(), -12)).format('MM/YYYY');\n\n                break;\n            // case 'lifetime':\n            //     chartParams.start_date = moment(curItem.commissioning).format('MM/DD/YYYY HH:mm:ss');\n            //     chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n            //     break;\n        }\n\n        this.setState({\n            chartParams: chartParams\n        }, () => {\n            self.getDataChart();\n        });\n    }\n\n    changeViewMinute = (value) => {\n        var chartParams = this.state.chartParams, self = this;\n        if (Libs.isBlank(value)) return;\n        chartParams.data_send_time = value;\n        this.setState({ chartParams: chartParams }, () => {\n            self.getDataChart();\n        });\n    }\n\n\n    getDetailProject() {\n        var { hash_id } = this.state, self = this;\n        if (Libs.isBlank(hash_id)) return;\n\n        var params = {\n            hash_id: hash_id,\n            id_language: this.employee.id_language,\n            id_employee: this.employee.id_employee,\n            type: 'private'\n        };\n        MainPlantService.instance.getDetail(params, data => {\n            if (data) {\n                self.setState({\n                    curItem: data\n                });\n            }\n        }, false);\n    }\n\n\n    onClickShowSingleLine = () => {\n        this.setState({\n            single_line: true\n        })\n    }\n\n    onClickCloseSingleLine = () => {\n        this.setState({\n            single_line: false\n        })\n    }\n\n\n    /**\n     * setValue method to Input\n     * @author Long.Pham 20/05/2021\n     */\n    handleInputDateChange(event) {\n        let target = event.target;\n        let name = target.name;\n        var self = this;\n        let value = target.value;\n        if (target.type === 'checkbox') {\n            value = target.checked ? 1 : 0;\n        }\n\n        if (name) {\n            let { chartParams } = this.state;\n            switch (chartParams.id_filter) {\n                case 'today':\n                case 'last_month':\n                case 'this_month':\n                    chartParams.start_date = value;\n                    chartParams[name] = value;\n                    break;\n                case '3_day':\n                    if (name == 'start_date') {\n                        chartParams.start_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n                            chartParams.end_date = moment(Libs.addDays(currentDate, 2)).format('DD/MM/YYYY');\n                        }\n                    }\n\n                    if (name == 'end_date') {\n                        chartParams.end_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n                            chartParams.start_date = moment(Libs.addDays(currentDate, -2)).format('DD/MM/YYYY');\n                        }\n                    }\n\n                    break;\n                case '12_month':\n                    if (name == 'start_date') {\n                        chartParams.start_date = value;\n                        let arrDate = value.split('/');\n\n                        if (arrDate) {\n                            let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n                            const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n                            chartParams.end_date = moment(Libs.addMonths(startOfMonth, 12)).format('MM/YYYY');\n                        }\n                    }\n\n                    if (name == 'end_date') {\n                        chartParams.end_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n                            const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n                            chartParams.start_date = moment(Libs.addMonths(startOfMonth, -12)).format('MM/YYYY');\n                        }\n                    }\n                    break;\n            }\n\n            this.setState({ chartParams }, () => {\n                self.getDataChart();\n            });\n        }\n    }\n\n\n    /**\n   * Get chart data\n   * @author long.pham 2020-12-03\n   * @param id_site, id_customer\n   * @return Object\n   */\n    getDataChart() {\n        var { chartParams, curItem, hash_id } = this.state, self = this;\n        if (Libs.isObjectEmpty(chartParams)) return;\n        var params = {};\n        params.hash_id = hash_id;\n        params.total_year = curItem.total_year;\n        params.id_employee = this.employee.id_employee;\n        params.id_language = this.employee.id_language;\n        params.filterBy = chartParams.id_filter;\n        params.data_send_time = chartParams.data_send_time;\n        params.type = 'private';\n\n        switch (chartParams.id_filter) {\n            case 'today':\n                params.start_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\");\n                params.end_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\");\n                break;\n            case '3_day':\n                params.start_date = Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\";\n                params.end_date = Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\";\n                break;\n            case 'last_month':\n            case 'this_month':\n                params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n                params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n                break;\n            case 'lifetime':\n            case '12_month':\n                params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n                params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n                break;\n        }\n\n\n        // params.end_date = '01/11/2021 19:00:00';\n        // params.start_date = '01/11/2021 05:00:00';\n        MainPlantService.instance.getDataChart(params, (data) => {\n            if (Libs.isArrayData(data)) {\n                var dataListEnergy = data;\n                var series = [], categories = [];\n\n                let seriesItemEnergy = {\n                    data: [],\n                    name: 'Energy yield',\n                    zIndex: 1,\n                    type: 'column',\n                    tooltip: {\n                        valueSuffix: ' kWh'\n                    }\n                };\n\n                let seriesItemPower = {\n                    data: [],\n                    name: 'Power',\n                    zIndex: 1,\n                    type: 'spline',\n                    xAxis: 1,\n                    yAxis: 1,\n                    id: 's1',\n                    lineWidth: 2,\n                    tooltip: {\n                        valueSuffix: ' kW'\n                    },\n                    marker: {\n                        radius: 2.5\n                    }\n                };\n\n                var rowItemEnergy = [], rowItemPower = [];\n\n                if (params.filterBy === 'today') {\n                    switch (chartParams.data_send_time) {\n                        case 1:\n                            curItem.tickInterval = 12;\n                            categories = [\n                                '5AM', '5:05 AM', '5:10 AM', '5:15 AM', '5:20 AM', '5:25 AM', '5:30 AM', '5:35 AM', '5:40 AM', '5:45 AM', '5:50 AM', '5:55 AM',\n                                '6AM', '6:05 AM', '6:10 AM', '6:15 AM', '6:20 AM', '6:25 AM', '6:30 AM', '6:35 AM', '6:40 AM', '6:45 AM', '6:50 AM', '6:55 AM',\n                                '7AM', '7:05 AM', '7:10 AM', '7:15 AM', '7:20 AM', '7:25 AM', '7:30 AM', '7:35 AM', '7:40 AM', '7:45 AM', '7:50 AM', '7:55 AM',\n                                '8AM', '8:05 AM', '8:10 AM', '8:15 AM', '8:20 AM', '8:25 AM', '8:30 AM', '8:35 AM', '8:40 AM', '8:45 AM', '8:50 AM', '8:55 AM',\n                                '9AM', '9:05 AM', '9:10 AM', '9:15 AM', '9:20 AM', '9:25 AM', '9:30 AM', '9:35 AM', '9:40 AM', '9:45 AM', '9:50 AM', '9:55 AM',\n                                '10AM', '10:05 AM', '10:10 AM', '10:15 AM', '10:20 AM', '10:25 AM', '10:30 AM', '10:35 AM', '10:40 AM', '10:45 AM', '10:50 AM', '10:55 AM',\n                                '11AM', '11:05 AM', '11:10 AM', '11:15 AM', '11:20 AM', '11:25 AM', '11:30 AM', '11:35 AM', '11:40 AM', '11:45 AM', '11:50 AM', '11:55 AM',\n                                '12PM', '12:05 PM', '12:10 PM', '12:15 PM', '12:20 PM', '12:25 PM', '12:30 PM', '12:35 PM', '12:40 PM', '12:45 PM', '12:50 PM', '12:55 PM',\n                                '13PM', '13:05 PM', '13:10 PM', '13:15 PM', '13:20 PM', '13:25 PM', '13:30 PM', '13:35 PM', '13:40 PM', '13:45 PM', '13:50 PM', '13:55 PM',\n                                '14PM', '14:05 PM', '14:10 PM', '14:15 PM', '14:20 PM', '14:25 PM', '14:30 PM', '14:35 PM', '14:40 PM', '14:45 PM', '14:50 PM', '14:55 PM',\n                                '15PM', '15:05 PM', '15:10 PM', '15:15 PM', '15:20 PM', '15:25 PM', '15:30 PM', '15:35 PM', '15:40 PM', '15:45 PM', '15:50 PM', '15:55 PM',\n                                '16PM', '16:05 PM', '16:10 PM', '16:15 PM', '16:20 PM', '16:25 PM', '16:30 PM', '16:35 PM', '16:40 PM', '16:45 PM', '16:50 PM', '16:55 PM',\n                                '17PM', '17:05 PM', '17:10 PM', '17:15 PM', '17:20 PM', '17:25 PM', '17:30 PM', '17:35 PM', '17:40 PM', '17:45 PM', '17:50 PM', '17:55 PM',\n                                '18PM', '18:05 PM', '18:10 PM', '18:15 PM', '18:20 PM', '18:25 PM', '18:30 PM', '18:35 PM', '18:40 PM', '18:45 PM', '18:50 PM', '18:55 PM',\n                                '19PM'\n                            ];\n                            var range5Minute = 0;\n                            for (let i = 0; i < dataListEnergy.length; i++) {\n                                if (i == 0) {\n                                    var hour = Libs.dateFormat(dataListEnergy[i].time_format, 'HH', 'YYYY-MM-DD HH:mm:ss');\n                                    var minutes = Libs.dateFormat(dataListEnergy[i].time_format, 'mm', 'YYYY-MM-DD HH:mm:ss');\n                                    range5Minute = ((parseInt(hour) - 5) * 12) + (Math.round(minutes / 5));\n                                    if (range5Minute > 0) {\n                                        for (var j = 0; j < range5Minute; j++) {\n                                            var dateF = Libs.dateFormat(Libs.addMinutes(Libs.dateFormat(dataListEnergy[i].time_format, 'YYYY-MM-DD 05:00', 'YYYY-MM-DD HH:mm:ss'), j * 5), 'DD/MM/YYYY HH:mm', 'YYYY-MM-DD HH:mm:ss');\n                                            rowItemEnergy.push([dateF, null]);\n                                            rowItemPower.push([dateF, null]);\n                                        }\n                                    }\n                                }\n                                rowItemEnergy.push([dataListEnergy[i].time_full, dataListEnergy[i].activeEnergy]);\n                                rowItemPower.push([dataListEnergy[i].time_full, dataListEnergy[i].activePower]);\n                            }\n\n\n\n\n                            // set chart line end\n                            let range5MinuteLine = range5Minute + dataListEnergy.length;\n\n                            if (range5MinuteLine < 168 && range5MinuteLine > 0) {\n                                let lastDate = '';\n                                for (let izero1 = range5MinuteLine; izero1 < 168; izero1++) {\n                                    if (izero1 == range5MinuteLine) {\n                                        lastDate = dataListEnergy[dataListEnergy.length - 1].time_format;\n                                    }\n                                    if (lastDate != null) {\n                                        lastDate = Libs.addMinutes(lastDate, 5);\n                                        rowItemEnergy.push([Libs.dateFormat(lastDate, 'YYYY-MM-DD HH:mm', 'YYYY-MM-DD HH:mm:ss'), null]);\n                                        rowItemPower.push([Libs.dateFormat(lastDate, 'YYYY-MM-DD HH:mm', 'YYYY-MM-DD HH:mm:ss'), null]);\n                                    }\n                                }\n                            }\n                            seriesItemEnergy.data = rowItemEnergy;\n                            series.push(seriesItemEnergy);\n                            seriesItemPower.data = rowItemPower;\n                            series.push(seriesItemPower);\n                            break;\n                        case 2:\n                            curItem.tickInterval = 4;\n                            categories = [\n                                '5AM', '5:15AM', '5:30AM', '5:45AM',\n                                '6AM', '6:15AM', '6:30AM', '6:45AM',\n                                '7AM', '7:15AM', '7:30AM', '7:45AM',\n                                '8AM', '8:15AM', '8:30AM', '8:45AM',\n                                '9AM', '9:15AM', '9:30AM', '9:45AM',\n                                '10AM', '10:15AM', '10:30AM', '10:45AM',\n                                '11AM', '11:15AM', '11:30AM', '11:45AM',\n                                '12PM', '12:15PM', '12:30PM', '12:45PM',\n                                '13PM', '13:15PM', '13:30PM', '13:45PM',\n                                '14PM', '14:15PM', '14:30PM', '14:45PM',\n                                '15PM', '15:15PM', '15:30PM', '15:45PM',\n                                '16PM', '16:15PM', '16:30PM', '16:45PM',\n                                '17PM', '17:15PM', '17:30PM', '17:45PM',\n                                '18PM', '18:15PM', '18:30PM', '18:45PM',\n                                '19PM'\n                            ];\n\n                            var range15Minute = 0;\n                            for (let i = 0; i < dataListEnergy.length; i++) {\n                                if (i == 0) {\n\n                                    var hour = Libs.dateFormat(dataListEnergy[i].time_format, 'HH', 'YYYY-MM-DD HH:mm:ss');\n                                    var minutes = Libs.dateFormat(dataListEnergy[i].time_format, 'mm', 'YYYY-MM-DD HH:mm:ss');\n                                    range15Minute = ((parseInt(hour) - 5) * 4) + (Math.round(minutes / 15));\n                                    if (range15Minute > 0) {\n                                        for (var j = 0; j < range15Minute; j++) {\n                                            var dateF = Libs.dateFormat(Libs.addMinutes(Libs.dateFormat(dataListEnergy[i].time_format, 'YYYY-MM-DD 05:00', 'YYYY-MM-DD HH:mm:ss'), j * 15), 'DD/MM/YYYY HH:mm', 'YYYY-MM-DD HH:mm:ss');\n                                            rowItemEnergy.push([dateF, null]);\n                                            rowItemPower.push([dateF, null]);\n                                        }\n                                    }\n\n                                }\n                                rowItemEnergy.push([dataListEnergy[i].time_full, dataListEnergy[i].activeEnergy]);\n                                rowItemPower.push([dataListEnergy[i].time_full, dataListEnergy[i].activePower]);\n                            }\n\n                            // set chart line end\n                            let range15MinuteLine = range15Minute + dataListEnergy.length;\n                            if (range15MinuteLine < 56 && range15MinuteLine > 0) {\n                                let lastDate = '';\n                                for (let izero1 = range15MinuteLine; izero1 < 56; izero1++) {\n                                    if (izero1 == range15MinuteLine) {\n                                        lastDate = dataListEnergy[dataListEnergy.length - 1].time_format;\n                                    }\n                                    if (lastDate != null) {\n                                        lastDate = Libs.addMinutes(lastDate, 15);\n                                        rowItemEnergy.push([Libs.dateFormat(lastDate, 'DD/MM/YYYY', 'YYYY-MM-DD HH:mm:ss'), null]);\n                                        rowItemPower.push([Libs.dateFormat(lastDate, 'DD/MM/YYYY HH:mm', 'YYYY-MM-DD HH:mm:ss'), null]);\n                                    }\n                                }\n                            }\n                            seriesItemEnergy.data = rowItemEnergy;\n                            series.push(seriesItemEnergy);\n                            seriesItemPower.data = rowItemPower;\n                            series.push(seriesItemPower);\n                            break;\n                        default:\n                            curItem.tickInterval = 1;\n                            categories = ['5AM', '6AM', '7AM', '8AM', '9AM', '10AM', '11AM', '12PM', '13PM', '14PM', '15PM', '16PM', '17PM', '18PM', '19PM'];\n\n                            var rangeHour = 0;\n                            for (let i = 0; i < dataListEnergy.length; i++) {\n                                if (i == 0) {\n                                    var hour = Libs.dateFormat(dataListEnergy[i].time_format, 'HH', 'YYYY-MM-DD HH:mm:ss');\n                                    rangeHour = parseInt(hour) - 5;\n                                    if (rangeHour > 0) {\n                                        for (var j = 0; j < rangeHour; j++) {\n                                            var dateF = Libs.dateFormat(dataListEnergy[i].time_format, 'DD/MM/YYYY', 'YYYY-MM-DD HH:mm:ss') + \" \" + (j + 5) + \":00\";\n                                            rowItemEnergy.push([dateF, null]);\n                                            rowItemPower.push([dateF, null]);\n                                        }\n                                    }\n                                }\n\n                                rowItemEnergy.push([dataListEnergy[i].time_full, dataListEnergy[i].activeEnergy]);\n                                rowItemPower.push([dataListEnergy[i].time_full, dataListEnergy[i].activePower]);\n                            }\n\n                            // set chart line end\n                            let rangeHourLine = rangeHour + dataListEnergy.length;\n                            if (rangeHourLine < 15 && rangeHourLine > 0) {\n                                let lastDate = '';\n                                for (let izero1 = rangeHourLine; izero1 < 15; izero1++) {\n                                    if (izero1 == rangeHourLine) {\n                                        lastDate = dataListEnergy[dataListEnergy.length - 1].time_format;\n                                    }\n                                    if (lastDate != null) {\n                                        lastDate = Libs.addMinutes(lastDate, 60);\n                                        rowItemEnergy.push([Libs.dateFormat(lastDate, 'DD/MM/YYYY HH:mm', 'YYYY-MM-DD HH:mm:ss'), null]);\n                                        rowItemPower.push([Libs.dateFormat(lastDate, 'DD/MM/YYYY HH:mm', 'YYYY-MM-DD HH:mm:ss'), null]);\n                                    }\n                                }\n                            }\n                            seriesItemEnergy.data = rowItemEnergy;\n                            series.push(seriesItemEnergy);\n                            seriesItemPower.data = rowItemPower;\n                            series.push(seriesItemPower);\n                            break;\n                    }\n                } else if (params.filterBy === '3_day') {\n                    var start_date = chartParams.start_date;\n                    let arrDate = start_date.split('/');\n                    var currentDate = '';\n                    var stringDate1 = '', stringDate2 = '', stringDate3 = '';\n                    if (arrDate) {\n                        currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n                        stringDate1 = moment(currentDate).format('DD. MMM');\n                        stringDate2 = moment(Libs.addDays(currentDate, 1)).format('DD. MMM');\n                        stringDate3 = moment(Libs.addDays(currentDate, 2)).format('DD. MMM');\n                    } else { return }\n\n                    switch (chartParams.data_send_time) {\n                        case 1:\n                            curItem.tickInterval = 169;\n                            categories = [\n                                stringDate1, '5:05 AM', '5:10 AM', '5:15 AM', '5:20 AM', '5:25 AM', '5:30 AM', '5:35 AM', '5:40 AM', '5:45 AM', '5:50 AM', '5:55 AM',\n                                '6:00 AM', '6:05 AM', '6:10 AM', '6:15 AM', '6:20 AM', '6:25 AM', '6:30 AM', '6:35 AM', '6:40 AM', '6:45 AM', '6:50 AM', '6:55 AM',\n                                '7:00 AM', '7:05 AM', '7:10 AM', '7:15 AM', '7:20 AM', '7:25 AM', '7:30 AM', '7:35 AM', '7:40 AM', '7:45 AM', '7:50 AM', '7:55 AM',\n                                '8:00 AM', '8:05 AM', '8:10 AM', '8:15 AM', '8:20 AM', '8:25 AM', '8:30 AM', '8:35 AM', '8:40 AM', '8:45 AM', '8:50 AM', '8:55 AM',\n                                '9:00 AM', '9:05 AM', '9:10 AM', '9:15 AM', '9:20 AM', '9:25 AM', '9:30 AM', '9:35 AM', '9:40 AM', '9:45 AM', '9:50 AM', '9:55 AM',\n                                '10:00 AM', '10:05 AM', '10:10 AM', '10:15 AM', '10:20 AM', '10:25 AM', '10:30 AM', '10:35 AM', '10:40 AM', '10:45 AM', '10:50 AM', '10:55 AM',\n                                '11:00 AM', '11:05 AM', '11:10 AM', '11:15 AM', '11:20 AM', '11:25 AM', '11:30 AM', '11:35 AM', '11:40 AM', '11:45 AM', '11:50 AM', '11:55 AM',\n                                '12:00 PM', '12:05 PM', '12:10 PM', '12:15 PM', '12:20 PM', '12:25 PM', '12:30 PM', '12:35 PM', '12:40 PM', '12:45 PM', '12:50 PM', '12:55 PM',\n                                '13:00 PM', '13:05 PM', '13:10 PM', '13:15 PM', '13:20 PM', '13:25 PM', '13:30 PM', '13:35 PM', '13:40 PM', '13:45 PM', '13:50 PM', '13:55 PM',\n                                '14:00 PM', '14:05 PM', '14:10 PM', '14:15 PM', '14:20 PM', '14:25 PM', '14:30 PM', '14:35 PM', '14:40 PM', '14:45 PM', '14:50 PM', '14:55 PM',\n                                '15:00 PM', '15:05 PM', '15:10 PM', '15:15 PM', '15:20 PM', '15:25 PM', '15:30 PM', '15:35 PM', '15:40 PM', '15:45 PM', '15:50 PM', '15:55 PM',\n                                '16:00 PM', '16:05 PM', '16:10 PM', '16:15 PM', '16:20 PM', '16:25 PM', '16:30 PM', '16:35 PM', '16:40 PM', '16:45 PM', '16:50 PM', '16:55 PM',\n                                '17:00 PM', '17:05 PM', '17:10 PM', '17:15 PM', '17:20 PM', '17:25 PM', '17:30 PM', '17:35 PM', '17:40 PM', '17:45 PM', '17:50 PM', '17:55 PM',\n                                '18:00 PM', '18:05 PM', '18:10 PM', '18:15 PM', '18:20 PM', '18:25 PM', '18:30 PM', '18:35 PM', '18:40 PM', '18:45 PM', '18:50 PM', '18:55 PM',\n                                '19:00 PM',\n\n\n                                stringDate2, '5:05 AM', '5:10 AM', '5:15 AM', '5:20 AM', '5:25 AM', '5:30 AM', '5:35 AM', '5:40 AM', '5:45 AM', '5:50 AM', '5:55 AM',\n                                '6:00 AM', '6:05 AM', '6:10 AM', '6:15 AM', '6:20 AM', '6:25 AM', '6:30 AM', '6:35 AM', '6:40 AM', '6:45 AM', '6:50 AM', '6:55 AM',\n                                '7:00 AM', '7:05 AM', '7:10 AM', '7:15 AM', '7:20 AM', '7:25 AM', '7:30 AM', '7:35 AM', '7:40 AM', '7:45 AM', '7:50 AM', '7:55 AM',\n                                '8:00 AM', '8:05 AM', '8:10 AM', '8:15 AM', '8:20 AM', '8:25 AM', '8:30 AM', '8:35 AM', '8:40 AM', '8:45 AM', '8:50 AM', '8:55 AM',\n                                '9:00 AM', '9:05 AM', '9:10 AM', '9:15 AM', '9:20 AM', '9:25 AM', '9:30 AM', '9:35 AM', '9:40 AM', '9:45 AM', '9:50 AM', '9:55 AM',\n                                '10:00 AM', '10:05 AM', '10:10 AM', '10:15 AM', '10:20 AM', '10:25 AM', '10:30 AM', '10:35 AM', '10:40 AM', '10:45 AM', '10:50 AM', '10:55 AM',\n                                '11:00 AM', '11:05 AM', '11:10 AM', '11:15 AM', '11:20 AM', '11:25 AM', '11:30 AM', '11:35 AM', '11:40 AM', '11:45 AM', '11:50 AM', '11:55 AM',\n                                '12:00 PM', '12:05 PM', '12:10 PM', '12:15 PM', '12:20 PM', '12:25 PM', '12:30 PM', '12:35 PM', '12:40 PM', '12:45 PM', '12:50 PM', '12:55 PM',\n                                '13:00 PM', '13:05 PM', '13:10 PM', '13:15 PM', '13:20 PM', '13:25 PM', '13:30 PM', '13:35 PM', '13:40 PM', '13:45 PM', '13:50 PM', '13:55 PM',\n                                '14:00 PM', '14:05 PM', '14:10 PM', '14:15 PM', '14:20 PM', '14:25 PM', '14:30 PM', '14:35 PM', '14:40 PM', '14:45 PM', '14:50 PM', '14:55 PM',\n                                '15:00 PM', '15:05 PM', '15:10 PM', '15:15 PM', '15:20 PM', '15:25 PM', '15:30 PM', '15:35 PM', '15:40 PM', '15:45 PM', '15:50 PM', '15:55 PM',\n                                '16:00 PM', '16:05 PM', '16:10 PM', '16:15 PM', '16:20 PM', '16:25 PM', '16:30 PM', '16:35 PM', '16:40 PM', '16:45 PM', '16:50 PM', '16:55 PM',\n                                '17:00 PM', '17:05 PM', '17:10 PM', '17:15 PM', '17:20 PM', '17:25 PM', '17:30 PM', '17:35 PM', '17:40 PM', '17:45 PM', '17:50 PM', '17:55 PM',\n                                '18:00 PM', '18:05 PM', '18:10 PM', '18:15 PM', '18:20 PM', '18:25 PM', '18:30 PM', '18:35 PM', '18:40 PM', '18:45 PM', '18:50 PM', '18:55 PM',\n                                '19:00 PM',\n\n                                stringDate3, '5:05 AM', '5:10 AM', '5:15 AM', '5:20 AM', '5:25 AM', '5:30 AM', '5:35 AM', '5:40 AM', '5:45 AM', '5:50 AM', '5:55 AM',\n                                '6:00 AM', '6:05 AM', '6:10 AM', '6:15 AM', '6:20 AM', '6:25 AM', '6:30 AM', '6:35 AM', '6:40 AM', '6:45 AM', '6:50 AM', '6:55 AM',\n                                '7:00 AM', '7:05 AM', '7:10 AM', '7:15 AM', '7:20 AM', '7:25 AM', '7:30 AM', '7:35 AM', '7:40 AM', '7:45 AM', '7:50 AM', '7:55 AM',\n                                '8:00 AM', '8:05 AM', '8:10 AM', '8:15 AM', '8:20 AM', '8:25 AM', '8:30 AM', '8:35 AM', '8:40 AM', '8:45 AM', '8:50 AM', '8:55 AM',\n                                '9:00 AM', '9:05 AM', '9:10 AM', '9:15 AM', '9:20 AM', '9:25 AM', '9:30 AM', '9:35 AM', '9:40 AM', '9:45 AM', '9:50 AM', '9:55 AM',\n                                '10:00 AM', '10:05 AM', '10:10 AM', '10:15 AM', '10:20 AM', '10:25 AM', '10:30 AM', '10:35 AM', '10:40 AM', '10:45 AM', '10:50 AM', '10:55 AM',\n                                '11:00 AM', '11:05 AM', '11:10 AM', '11:15 AM', '11:20 AM', '11:25 AM', '11:30 AM', '11:35 AM', '11:40 AM', '11:45 AM', '11:50 AM', '11:55 AM',\n                                '12:00 PM', '12:05 PM', '12:10 PM', '12:15 PM', '12:20 PM', '12:25 PM', '12:30 PM', '12:35 PM', '12:40 PM', '12:45 PM', '12:50 PM', '12:55 PM',\n                                '13:00 PM', '13:05 PM', '13:10 PM', '13:15 PM', '13:20 PM', '13:25 PM', '13:30 PM', '13:35 PM', '13:40 PM', '13:45 PM', '13:50 PM', '13:55 PM',\n                                '14:00 PM', '14:05 PM', '14:10 PM', '14:15 PM', '14:20 PM', '14:25 PM', '14:30 PM', '14:35 PM', '14:40 PM', '14:45 PM', '14:50 PM', '14:55 PM',\n                                '15:00 PM', '15:05 PM', '15:10 PM', '15:15 PM', '15:20 PM', '15:25 PM', '15:30 PM', '15:35 PM', '15:40 PM', '15:45 PM', '15:50 PM', '15:55 PM',\n                                '16:00 PM', '16:05 PM', '16:10 PM', '16:15 PM', '16:20 PM', '16:25 PM', '16:30 PM', '16:35 PM', '16:40 PM', '16:45 PM', '16:50 PM', '16:55 PM',\n                                '17:00 PM', '17:05 PM', '17:10 PM', '17:15 PM', '17:20 PM', '17:25 PM', '17:30 PM', '17:35 PM', '17:40 PM', '17:45 PM', '17:50 PM', '17:55 PM',\n                                '18:00 PM', '18:05 PM', '18:10 PM', '18:15 PM', '18:20 PM', '18:25 PM', '18:30 PM', '18:35 PM', '18:40 PM', '18:45 PM', '18:50 PM', '18:55 PM',\n                                '19:00 PM',\n\n                            ];\n                            if(Libs.isArrayData(data)){\n                                for (let i = 0; i < data.length; i++) {\n                                    rowItemEnergy.push([data[i].time_full, data[i].activeEnergy]);\n                                    rowItemPower.push([data[i].time_full, data[i].activePower]);\n                                }\n                            }\n\n                            seriesItemEnergy.data = rowItemEnergy;\n                            series.push(seriesItemEnergy);\n                            seriesItemPower.data = rowItemPower;\n                            series.push(seriesItemPower);\n\n                            break;\n                        case 2:\n                            curItem.tickInterval = 57;\n                            categories = [\n                                stringDate1, '5:15AM', '5:30AM', '5:45AM',\n                                '6AM', '6:15AM', '6:30AM', '6:45AM',\n                                '7AM', '7:15AM', '7:30AM', '7:45AM',\n                                '8AM', '8:15AM', '8:30AM', '8:45AM',\n                                '9AM', '9:15AM', '9:30AM', '9:45AM',\n                                '10AM', '10:15AM', '10:30AM', '10:45AM',\n                                '11AM', '11:15AM', '11:30AM', '11:45AM',\n                                '12PM', '12:15PM', '12:30PM', '12:45PM',\n                                '13PM', '13:15PM', '13:30PM', '13:45PM',\n                                '14PM', '14:15PM', '14:30PM', '14:45PM',\n                                '15PM', '15:15PM', '15:30PM', '15:45PM',\n                                '16PM', '16:15PM', '16:30PM', '16:45PM',\n                                '17PM', '17:15PM', '17:30PM', '17:45PM',\n                                '18PM', '18:15PM', '18:30PM', '18:45PM', '19PM',\n\n                                stringDate2, '5:15AM', '5:30AM', '5:45AM',\n                                '6AM', '6:15AM', '6:30AM', '6:45AM',\n                                '7AM', '7:15AM', '7:30AM', '7:45AM',\n                                '8AM', '8:15AM', '8:30AM', '8:45AM',\n                                '9AM', '9:15AM', '9:30AM', '9:45AM',\n                                '10AM', '10:15AM', '10:30AM', '10:45AM',\n                                '11AM', '11:15AM', '11:30AM', '11:45AM',\n                                '12PM', '12:15PM', '12:30PM', '12:45PM',\n                                '13PM', '13:15PM', '13:30PM', '13:45PM',\n                                '14PM', '14:15PM', '14:30PM', '14:45PM',\n                                '15PM', '15:15PM', '15:30PM', '15:45PM',\n                                '16PM', '16:15PM', '16:30PM', '16:45PM',\n                                '17PM', '17:15PM', '17:30PM', '17:45PM',\n                                '18PM', '18:15PM', '18:30PM', '18:45PM', '19PM',\n\n                                stringDate3, '5:15AM', '5:30AM', '5:45AM',\n                                '6AM', '6:15AM', '6:30AM', '6:45AM',\n                                '7AM', '7:15AM', '7:30AM', '7:45AM',\n                                '8AM', '8:15AM', '8:30AM', '8:45AM',\n                                '9AM', '9:15AM', '9:30AM', '9:45AM',\n                                '10AM', '10:15AM', '10:30AM', '10:45AM',\n                                '11AM', '11:15AM', '11:30AM', '11:45AM',\n                                '12PM', '12:15PM', '12:30PM', '12:45PM',\n                                '13PM', '13:15PM', '13:30PM', '13:45PM',\n                                '14PM', '14:15PM', '14:30PM', '14:45PM',\n                                '15PM', '15:15PM', '15:30PM', '15:45PM',\n                                '16PM', '16:15PM', '16:30PM', '16:45PM',\n                                '17PM', '17:15PM', '17:30PM', '17:45PM',\n                                '18PM', '18:15PM', '18:30PM', '18:45PM', '19PM',\n                            ];\n\n                            if(Libs.isArrayData(data)){\n                                for (let i = 0; i < data.length; i++) {\n                                    rowItemEnergy.push([data[i].time_full, data[i].activeEnergy]);\n                                    rowItemPower.push([data[i].time_full, data[i].activePower]);\n                                }\n                            }\n\n                            \n                            seriesItemEnergy.data = rowItemEnergy;\n                            series.push(seriesItemEnergy);\n                            seriesItemPower.data = rowItemPower;\n                            series.push(seriesItemPower);\n\n                            break;\n                        case 3:\n\n                            curItem.tickInterval = 15;\n                            categories = [\n                                stringDate1, '6AM', '7AM', '8AM', '9AM', '10AM', '11AM', '12PM', '13PM', '14PM', '15PM', '16PM', '17PM', '18PM', '19PM',\n                                stringDate2, '6AM', '7AM', '8AM', '9AM', '10AM', '11AM', '12PM', '13PM', '14PM', '15PM', '16PM', '17PM', '18PM', '19PM',\n                                stringDate3, '6AM', '7AM', '8AM', '9AM', '10AM', '11AM', '12PM', '13PM', '14PM', '15PM', '16PM', '17PM', '18PM', '19PM',\n                            ];\n\n\n                            if(Libs.isArrayData(data)){\n                                for (let i = 0; i < data.length; i++) {\n                                    rowItemEnergy.push([data[i].time_full, data[i].activeEnergy]);\n                                    rowItemPower.push([data[i].time_full, data[i].activePower]);\n                                }\n                            }\n\n                            seriesItemEnergy.data = rowItemEnergy;\n                            series.push(seriesItemEnergy);\n                            seriesItemPower.data = rowItemPower;\n                            series.push(seriesItemPower);\n                            break\n                    }\n\n                } else {\n                    curItem.tickInterval = 1;\n                    categories = [];\n                    var lastDate = '', minMonth = '', maxMonth = '';\n                    for (let i = 0; i < dataListEnergy.length; i++) {\n                        categories.push([dataListEnergy[i].category_time_format]);\n                        lastDate = dataListEnergy[i].time_format;\n                        if (i === 0) {\n                            let date = new Date(dataListEnergy[i].time_format);\n                            minMonth = date.getMonth() + 1;\n                        }\n\n                        if (i === dataListEnergy.length - 1) {\n                            let date = new Date(dataListEnergy[i].time_format);\n                            maxMonth = date.getMonth() + 1;\n                        }\n                        rowItemEnergy.push([dataListEnergy[i].time_full, dataListEnergy[i].activeEnergy]);\n                        rowItemPower.push([dataListEnergy[i].time_full, dataListEnergy[i].activePower]);\n\n                    }\n\n\n\n                    switch (params.filterBy) {\n                        case 'this_month':\n                        case 'last_month':\n                            if (!Libs.isBlank(lastDate)) {\n                                let date = new Date(lastDate);\n                                let firstDay = date.getDate();\n                                let lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n                                if (firstDay < lastDay.getDate()) {\n                                    for (let i = firstDay; i < lastDay.getDate(); i++) {\n                                        lastDate = Libs.addDays(lastDate, 1);\n                                        rowItemEnergy.push([Libs.dateFormat(lastDate, 'DD/MM/YYYY', 'YYYY-MM-DD'), null]);\n                                        rowItemPower.push([Libs.dateFormat(lastDate, 'DD/MM/YYYY', 'YYYY-MM-DD'), null]);\n                                        categories.push([lastDate.getDate()]);\n                                    }\n                                }\n                            }\n                            break;\n                        case '12_month':\n                            if (!Libs.isBlank(minMonth) && !Libs.isBlank(maxMonth)) {\n                                let firstArrEnergy = [], firstArrayPower = [], firstArrCategory = [];\n                                let date = new Date(lastDate);\n\n                                for (let i = 1; i < minMonth; i++) {\n                                    firstArrEnergy.push([(i < 10 ? ('0' + i) : i) + \"/\" + date.getFullYear(), null]);\n                                    firstArrayPower.push([(i < 10 ? ('0' + i) : i) + \"/\" + date.getFullYear(), null]);\n                                    firstArrCategory.push([Libs.getStringMonthNumber(i)]);\n                                }\n\n                                firstArrCategory.push(...categories);\n                                firstArrEnergy.push(...rowItemEnergy);\n                                firstArrayPower.push(...rowItemPower);\n\n                                for (let i = maxMonth + 1; i <= 12; i++) {\n                                    firstArrEnergy.push([(i < 10 ? ('0' + i) : i) + \"/\" + date.getFullYear(), null]);\n                                    firstArrayPower.push([(i < 10 ? ('0' + i) : i) + \"/\" + date.getFullYear(), null]);\n                                    firstArrCategory.push([Libs.getStringMonthNumber(i)]);\n                                }\n\n                                categories = firstArrCategory;\n                                rowItemEnergy = firstArrEnergy;\n                                rowItemPower = firstArrayPower;\n                            }\n                            break;\n\n                        case 'lifetime':\n                            if (!Libs.isBlank(curItem.total_year) && curItem.total_year < 2) {\n                                if (!Libs.isBlank(minMonth) && !Libs.isBlank(maxMonth)) {\n                                    let firstArrEnergy = [], firstArrayPower = [], firstArrCategory = [];\n                                    let date = new Date(lastDate);\n\n                                    for (let i = 1; i < minMonth; i++) {\n                                        firstArrEnergy.push([(i < 10 ? ('0' + i) : i) + \"/\" + date.getFullYear(), null]);\n                                        firstArrayPower.push([(i < 10 ? ('0' + i) : i) + \"/\" + date.getFullYear(), null]);\n                                        firstArrCategory.push([Libs.getStringMonthNumber(i)]);\n                                    }\n\n                                    firstArrCategory.push(...categories);\n                                    firstArrEnergy.push(...rowItemEnergy);\n                                    firstArrayPower.push(...rowItemPower);\n\n                                    for (let i = maxMonth + 1; i <= 12; i++) {\n                                        firstArrEnergy.push([(i < 10 ? ('0' + i) : i) + \"/\" + date.getFullYear(), null]);\n                                        firstArrayPower.push([(i < 10 ? ('0' + i) : i) + \"/\" + date.getFullYear(), null]);\n                                        firstArrCategory.push([Libs.getStringMonthNumber(i)]);\n                                    }\n\n                                    categories = firstArrCategory;\n                                    rowItemEnergy = firstArrEnergy;\n                                    rowItemPower = firstArrayPower;\n                                }\n                            }\n                            break;\n                    }\n\n\n                    seriesItemEnergy.data = rowItemEnergy;\n                    series.push(seriesItemEnergy);\n                    seriesItemPower.data = rowItemPower;\n                    series.push(seriesItemPower);\n                }\n\n                self.setState({\n                    dataCategories: categories,\n                    dataEnergy: data,\n                    curItem: curItem,\n                    series: series\n                }, () => {\n                    self.loadChartOption();\n                });\n            } else {\n                self.setState({\n                    dataCategories: [],\n                    dataEnergy: [],\n                    curItem: curItem,\n                    series: []\n                }, () => {\n                    self.loadChartOption();\n                });\n            }\n        });\n\n    }\n\n\n    loadChartOption() {\n        var chartOption = {\n            credits: { enabled: false },\n            exporting: { enabled: true },\n            title: { text: null },\n\n            chart: {\n                type: 'column'\n            },\n            legend: {\n                layout: 'horizontal',\n                align: 'center',\n                verticalAlign: 'bottom',\n                borderWidth: 0,\n                showInLegend: false\n            },\n            colors: ['#82cdff', '#f2ae1b', '#1e477f', '#e68600', '#00b767', '#ffc300'],\n            xAxis: [\n                {\n                    title: { text: \"Power\", enabled: false },\n                    alignTicks: true,\n                    gridLineWidth: 1,\n                    tickInterval: this.state.curItem.tickInterval,\n                    visible: true,\n                    categories: this.state.dataCategories\n                },\n\n                {\n                    title: { text: 'Data', enabled: false },\n                    tickInterval: 1,\n                    opposite: true,\n                    visible: false,\n                },\n\n            ],\n\n            yAxis: [{\n                min: 0,\n                title: {\n                    text: 'kWh',\n                    enabled: true\n                },\n                lineWidth: 1,\n                gridLineWidth: 1,\n                labels: {\n                    enabled: true\n                },\n            }, {\n                title: { text: 'kW', enabled: true },\n                lineWidth: 1,\n                opposite: true,\n                gridLineWidth: 1,\n                labels: {\n                    enabled: true\n                },\n            }\n            ],\n\n            plotOptions: {\n                column: {\n                    stacking: 'normal'\n                },\n            },\n\n            tooltip: {\n                shared: false,\n                crosshairs: true\n            },\n            series: this.state.series\n        };\n\n        this.setState({ chartOption: chartOption });\n    }\n\n\n\n    onClickShowFilter = () => {\n        var { chartParams } = this.state;\n        chartParams.show_filter = true;\n        this.setState({\n            chartParams: chartParams\n        });\n    }\n\n\n    downloadData = () => {\n        var { dataEnergy, curItem } = this.state;\n        var { t } = this.props;\n        if (!Libs.isArrayData(dataEnergy)) return;\n\n        var dataExport = [];\n        for (var i = 0, len = dataEnergy.length; i < len; i++) {\n            dataExport.push({\n                // \"ID\": ++i,\n                'Time': dataEnergy[i].time_full,\n                'Project name': curItem.name,\n                'Energy now (kWh)': dataEnergy[i].activeEnergy,\n                \"Power now (kW)\": dataEnergy[i].activePower\n            });\n        }\n\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n        const fileExtension = '.xlsx';\n        const ws = XLSX.utils.json_to_sheet(dataExport, { skipHeader: false });\n        const wb = {\n            SheetNames: ['Alerts'],\n            Sheets: { 'Alerts': ws }\n        };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, \"Export-alerts-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n    }\n\n\n    render() {\n        return this.jsxTemplate.call(this)\n    }\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(Plant)\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}