{"ast":null,"code":"import BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport Constants from '../../../../../utils/Constants';\nimport AddPopupJsx from './AddPopup.jsx';\nimport AddPopupValidate from './AddPopupValidate';\nimport ProjectGroupService from '../../../../../services/ProjectGroupService';\nimport ProjectService from '../../../../../services/ProjectService';\nimport EmployeeService from '../../../../../services/EmployeeService';\n\nclass AddPopup extends BaseComponent {\n  constructor(props) {\n    super(props);\n\n    this.onIsCheckedChange = index => {\n      var {\n        dataListEmployee\n      } = this.state;\n      if (!Libs.isArrayData(dataListEmployee)) return;\n      var item = dataListEmployee[index];\n      if (Libs.isObjectEmpty(item)) return;\n      dataListEmployee[index].is_checked = dataListEmployee[index].is_checked ? 0 : 1;\n      this.setState({\n        dataListEmployee: dataListEmployee\n      });\n    };\n\n    this.onFileAvatarChange = event => {\n      var {\n        t\n      } = this.props;\n      var target = event.target;\n      var file = target.files[0];\n      if (!file || file === undefined || file === null) return;\n      var fileName = file.name,\n          fileSize = file.size;\n      var checkExtFile = Libs.checkExtensionFile(fileName, 1);\n      var msgAvatarError = null;\n\n      if (!checkExtFile) {\n        msgAvatarError = t('message.msg_err_ext_image_file');\n      } else if (fileSize <= 0) {\n        msgAvatarError = t('message.msg_err_file_size');\n      } else if (fileSize > Constants.COMMON.MAX_IMAGE_SIZE) {\n        msgAvatarError = t('message.msg_err_max_size_upload');\n      }\n\n      var self = this;\n      var {\n        curItem\n      } = this.state;\n\n      if (!Libs.isBlank(msgAvatarError)) {\n        curItem.upload_thumbnail = '';\n        curItem.thumbnail_message = msgAvatarError;\n        this.setState({\n          curItem: curItem\n        });\n        return;\n      } else {\n        curItem.thumbnail_message = '';\n        this.setState({\n          curItem: curItem\n        });\n      } //Read file upload\n\n\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        curItem.upload_thumbnail = e.target.result;\n        curItem.upload_thumbnail_name = fileName;\n        self.setState({\n          curItem: curItem\n        });\n      };\n\n      reader.readAsDataURL(file);\n    };\n\n    this.onClickDeleteAvatar = event => {\n      var {\n        curItem\n      } = this.state;\n      curItem.thumbnail_message = '';\n      curItem.thumbnail_upload = '';\n      curItem.thumbnail = null;\n      this.setState({\n        curItem: curItem\n      });\n    };\n\n    this.handleDropdownChange = (item, name) => {\n      var self = this;\n      let curItem = self.state.curItem;\n\n      if (Libs.isObjectEmpty(item)) {\n        curItem.id_project_group = '';\n      } else {\n        var value = item.value;\n        curItem[name] = value;\n        self.setValidateMessage({\n          id_project_group: ''\n        }, true);\n      }\n\n      self.setState({\n        curItem: curItem\n      });\n    };\n\n    this.onClickShowTab = (e, tabActive) => {\n      var curItem = this.state.curItem;\n      if (Libs.isBlank(tabActive)) return;\n      curItem.tabActive = tabActive;\n      this.setState({\n        curItem: curItem\n      });\n    };\n\n    this.handleInputTranslateChange = event => {\n      var target = event.target;\n      var name = target.name;\n      var value = target.value;\n\n      if (target.type === 'checkbox') {\n        value = target.checked ? 1 : 0;\n      }\n\n      if (name) {\n        let item = this.state.curItem;\n        let allLanguage = this.state.allLanguage;\n        let isoCode = name.substr(-2, 2),\n            dataName = name.substr(0, 4),\n            dataSiteName = name.substr(0, 9),\n            dataDescription = name.substr(0, 11);\n        allLanguage.map((language, index) => {\n          if (isoCode === language.iso_code && dataName === 'name') {\n            item.data[index].name = event.target.validity.valid ? value : this.state.curItem.data[index].name;\n          }\n\n          if (isoCode === language.iso_code && dataSiteName === 'site_name') {\n            item.data[index].site_name = event.target.validity.valid ? value : this.state.curItem.data[index].site_name;\n          }\n\n          if (isoCode === language.iso_code && dataDescription === 'description') {\n            item.data[index].description = event.target.validity.valid ? value : this.state.curItem.data[index].description;\n          }\n\n          return 1;\n        });\n        item[name] = event.target.validity.valid ? value : this.state.curItem[name];\n        this.setState({\n          curItem: item\n        });\n      }\n    };\n\n    this.state = {\n      curItem: Object.assign({}, this.props.curItem),\n      allLanguage: this.props.allLanguage,\n      dataProjectGroup: [],\n      dataListEmployee: []\n    };\n    this.jsxTemplate = AddPopupJsx;\n    this.handleDropdownChange = this.handleDropdownChange.bind(this);\n  }\n  /**\n   * @description Called immediately after the component is mounted in the DOM. Called after the render function\n   * @author Long.Pham 12/05/2021\n   */\n\n\n  componentDidMount() {\n    var {\n      curItem\n    } = this.state;\n\n    if (curItem.screen_mode === Constants.SCREEN_MODE.ADD) {\n      var dataEmployees = [];\n      dataEmployees.push({\n        id_project: null,\n        id_employee: this.employee.id_employee\n      });\n      curItem.dataEmployees = dataEmployees;\n    }\n\n    this.getDataProjectGroup();\n    this.getListAllEmployee();\n  }\n\n  /**\n   * ge list employee\n   * @author Long.Pham 2019-06-03\n   */\n  getListAllEmployee() {\n    let self = this;\n    var params = {\n      id_language: this.employee.id_language\n    };\n    var {\n      curItem\n    } = this.state;\n    var dataEmployees = Libs.isArrayData(curItem.dataEmployees) ? curItem.dataEmployees : [];\n    EmployeeService.instance.getListAll(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        for (var i = 0, len = data.length; i < len; i++) {\n          var findItem = Libs.find(dataEmployees, 'id_employee', data[i].id);\n\n          if (!Libs.isObjectEmpty(findItem)) {\n            data[i].is_checked = 1;\n          } else {\n            data[i].is_checked = 0;\n          }\n        }\n\n        self.setState({\n          dataListEmployee: data\n        });\n      } else {\n        self.setState({\n          dataListEmployee: []\n        });\n      }\n    });\n  }\n  /**\n   * @description Upload icon  \n   * @author Long.Pham 12/05/2021\n   */\n\n\n  /**\n   * ge list roles\n   * @author Long.Pham 2019-06-03\n   */\n  getDataProjectGroup() {\n    let self = this;\n    var params = {\n      id_language: this.employee.id_language\n    };\n    ProjectGroupService.instance.getDropdownList(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataProjectGroup: data\n        });\n      } else {\n        self.setState({\n          dataProjectGroup: []\n        });\n      }\n    });\n  }\n\n  /**\n   * @description validate a field input\n   * @author Long.Pham 12/05/2021\n   * @param {*} event \n   */\n  async validateOne(event) {\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (name) {\n      let param = {\n        [name]: value\n      };\n      let v = new AddPopupValidate(this.props);\n      let error = await v.validateOne(param, name);\n\n      if (error != null) {\n        this.setValidateMessage(error, true);\n      }\n    }\n  }\n  /**\n   * @description select change\n   * @author Long.Pham 12/05/2021\n   * @param {*} event \n   */\n\n\n  /**\n   * @description save data\n   * @author long.pham 12/05/2021\n   */\n  async onSave() {\n    var {\n      curItem,\n      dataListEmployee\n    } = this.state,\n        self = this;\n    var params = Object.assign({}, this.state.curItem);\n    var screenMode = !Libs.isBlank(curItem.id) ? Constants.SCREEN_MODE.EDIT : !Libs.isBlank(this.props.curItem.screen_mode) ? this.props.curItem.screen_mode : Constants.SCREEN_MODE.ADD;\n    let v = new AddPopupValidate(this.props);\n    let errors = await v.FLValidationAll(curItem);\n\n    if (errors) {\n      this.setValidateMessage(errors);\n      return;\n    } //remove message validation\n\n\n    this.removeAllValidateMessage();\n    params.screen_mode = screenMode;\n    params.iso_code_lang = this.employee.lang;\n    params.id_language = this.employee.id_language;\n    params.iso_code = this.employee.iso_code;\n    var dataEmployees = [];\n\n    if (Libs.isArrayData(dataListEmployee)) {\n      for (var i = 0, len = dataListEmployee.length; i < len; i++) {\n        if (dataListEmployee[i].is_checked) {\n          dataEmployees.push({\n            id_project: null,\n            id_employee: dataListEmployee[i].id\n          });\n        }\n      }\n    }\n\n    params.dataEmployees = dataEmployees;\n\n    if (Libs.isArrayData(params.data)) {\n      let itemLanguageDefault = Libs.find(params.data, 'is_default', 1);\n      if (!itemLanguageDefault) return;\n      params.data.map((item, index) => {\n        params.data[index].name = item.name === '' ? itemLanguageDefault.name : item.name;\n        params.data[index].site_name = item.site_name === '' ? itemLanguageDefault.site_name : item.site_name;\n        params.data[index].description = item.description === '' ? itemLanguageDefault.description : item.description;\n        return params;\n      });\n    } else {\n      return false;\n    }\n\n    ProjectService.instance.save(params, function (status, data, msg) {\n      if (status) {\n        self.toast(msg, \"info\");\n        self.props.onClickCloseAdd(true);\n      } else if (data) {\n        self.setValidateMessage(data);\n      } else if (!Libs.isBlank(msg)) {\n        self.toast(msg, \"error\");\n      }\n    }, true);\n  }\n\n}\n\nexport default AddPopup;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/desktop/ModuleSystem/Project/AddPopup.js"],"names":["BaseComponent","Libs","Constants","AddPopupJsx","AddPopupValidate","ProjectGroupService","ProjectService","EmployeeService","AddPopup","constructor","props","onIsCheckedChange","index","dataListEmployee","state","isArrayData","item","isObjectEmpty","is_checked","setState","onFileAvatarChange","event","t","target","file","files","undefined","fileName","name","fileSize","size","checkExtFile","checkExtensionFile","msgAvatarError","COMMON","MAX_IMAGE_SIZE","self","curItem","isBlank","upload_thumbnail","thumbnail_message","reader","FileReader","onload","e","result","upload_thumbnail_name","readAsDataURL","onClickDeleteAvatar","thumbnail_upload","thumbnail","handleDropdownChange","id_project_group","value","setValidateMessage","onClickShowTab","tabActive","handleInputTranslateChange","type","checked","allLanguage","isoCode","substr","dataName","dataSiteName","dataDescription","map","language","iso_code","data","validity","valid","site_name","description","Object","assign","dataProjectGroup","jsxTemplate","bind","componentDidMount","screen_mode","SCREEN_MODE","ADD","dataEmployees","push","id_project","id_employee","employee","getDataProjectGroup","getListAllEmployee","params","id_language","instance","getListAll","total_row","i","len","length","findItem","find","id","getDropdownList","validateOne","param","v","error","onSave","screenMode","EDIT","errors","FLValidationAll","removeAllValidateMessage","iso_code_lang","lang","itemLanguageDefault","save","status","msg","toast","onClickCloseAdd"],"mappings":"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","sourcesContent":["\nimport BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport Constants from '../../../../../utils/Constants';\nimport AddPopupJsx from './AddPopup.jsx';\nimport AddPopupValidate from './AddPopupValidate';\nimport ProjectGroupService from '../../../../../services/ProjectGroupService';\nimport ProjectService from '../../../../../services/ProjectService';\nimport EmployeeService from '../../../../../services/EmployeeService';\n\nclass AddPopup extends BaseComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            curItem: Object.assign({}, this.props.curItem),\n            allLanguage: this.props.allLanguage,\n            dataProjectGroup: [],\n            dataListEmployee: []\n        }\n\n        this.jsxTemplate = AddPopupJsx;\n        this.handleDropdownChange = this.handleDropdownChange.bind(this);\n    }\n    /**\n     * @description Called immediately after the component is mounted in the DOM. Called after the render function\n     * @author Long.Pham 12/05/2021\n     */\n    componentDidMount() {\n        var { curItem } = this.state;\n        if (curItem.screen_mode === Constants.SCREEN_MODE.ADD) {\n            var dataEmployees = [];\n            dataEmployees.push({ id_project: null, id_employee: this.employee.id_employee });\n            curItem.dataEmployees = dataEmployees;\n\n        }\n        this.getDataProjectGroup();\n        this.getListAllEmployee();\n    }\n\n    onIsCheckedChange = (index) => {\n        var { dataListEmployee } = this.state;\n        if (!Libs.isArrayData(dataListEmployee)) return;\n        var item = dataListEmployee[index];\n        if (Libs.isObjectEmpty(item)) return;\n        dataListEmployee[index].is_checked = dataListEmployee[index].is_checked ? 0 : 1;\n        this.setState({\n            dataListEmployee: dataListEmployee\n        })\n    }\n    /**\n     * ge list employee\n     * @author Long.Pham 2019-06-03\n     */\n    getListAllEmployee() {\n        let self = this;\n        var params = {\n            id_language: this.employee.id_language\n        };\n\n        var { curItem } = this.state;\n        \n        var dataEmployees = Libs.isArrayData(curItem.dataEmployees) ? curItem.dataEmployees : [];\n        EmployeeService.instance.getListAll(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                for (var i = 0, len = data.length; i < len; i++) {\n                    var findItem = Libs.find(dataEmployees, 'id_employee', data[i].id);\n                    if (!Libs.isObjectEmpty(findItem)) {\n                        data[i].is_checked = 1;\n                    } else {\n                        data[i].is_checked = 0;\n                    }\n                }\n                self.setState({\n                    dataListEmployee: data\n                });\n            } else {\n                self.setState({\n                    dataListEmployee: []\n                });\n            }\n        })\n    }\n\n    /**\n     * @description Upload icon  \n     * @author Long.Pham 12/05/2021\n     */\n    onFileAvatarChange = (event) => {\n        var { t } = this.props;\n        var target = event.target;\n        var file = target.files[0];\n        if (!file || file === undefined || file === null) return;\n        var fileName = file.name, fileSize = file.size;\n        var checkExtFile = Libs.checkExtensionFile(fileName, 1);\n        var msgAvatarError = null;\n        if (!checkExtFile) {\n            msgAvatarError = t('message.msg_err_ext_image_file')\n        }\n        else if (fileSize <= 0) {\n            msgAvatarError = t('message.msg_err_file_size');\n        }\n        else if (fileSize > Constants.COMMON.MAX_IMAGE_SIZE) {\n            msgAvatarError = t('message.msg_err_max_size_upload');\n        }\n\n        var self = this;\n        var { curItem } = this.state;\n        if (!Libs.isBlank(msgAvatarError)) {\n            curItem.upload_thumbnail = '';\n            curItem.thumbnail_message = msgAvatarError;\n            this.setState({\n                curItem: curItem\n            });\n\n            return;\n        } else {\n            curItem.thumbnail_message = '';\n            this.setState({\n                curItem: curItem\n            });\n        }\n\n        //Read file upload\n        var reader = new FileReader();\n        reader.onload = function (e) {\n            curItem.upload_thumbnail = e.target.result;\n            curItem.upload_thumbnail_name = fileName;\n            self.setState({\n                curItem: curItem\n            });\n        };\n        reader.readAsDataURL(file);\n    }\n\n\n    /**\n     * @description Delete icon upload \n     * @author Long.Pham 12/05/2021\n     */\n    onClickDeleteAvatar = (event) => {\n        var { curItem } = this.state;\n        curItem.thumbnail_message = '';\n        curItem.thumbnail_upload = '';\n        curItem.thumbnail = null;\n\n        this.setState({\n            curItem: curItem\n        });\n    }\n\n\n\n    /**\n     * ge list roles\n     * @author Long.Pham 2019-06-03\n     */\n    getDataProjectGroup() {\n        let self = this;\n        var params = {\n            id_language: this.employee.id_language\n        };\n\n        ProjectGroupService.instance.getDropdownList(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataProjectGroup: data\n                });\n            } else {\n                self.setState({\n                    dataProjectGroup: []\n                });\n            }\n        })\n    }\n\n    handleDropdownChange = (item, name) => {\n        var self = this;\n        let curItem = self.state.curItem;\n\n        if (Libs.isObjectEmpty(item)) {\n            curItem.id_project_group = '';\n        } else {\n            var value = item.value;\n            curItem[name] = value;\n            self.setValidateMessage({ id_project_group: '' }, true);\n        }\n\n        self.setState({\n            curItem: curItem\n        });\n    }\n\n    onClickShowTab = (e, tabActive) => {\n        var curItem = this.state.curItem;\n        if (Libs.isBlank(tabActive)) return;\n        curItem.tabActive = tabActive;\n\n        this.setState({\n            curItem: curItem\n        });\n    }\n\n\n    /**\n     * @description validate a field input\n     * @author Long.Pham 12/05/2021\n     * @param {*} event \n     */\n    async validateOne(event) {\n        let target = event.target;\n        let name = target.name;\n        let value = target.value\n        if (name) {\n            let param = {\n                [name]: value\n            }\n            let v = new AddPopupValidate(this.props);\n            let error = await v.validateOne(param, name);\n            if (error != null) {\n                this.setValidateMessage(error, true);\n            }\n        }\n    }\n\n    /**\n     * @description select change\n     * @author Long.Pham 12/05/2021\n     * @param {*} event \n     */\n\n    handleInputTranslateChange = (event) => {\n        var target = event.target;\n        var name = target.name;\n        var value = target.value;\n        if (target.type === 'checkbox') {\n            value = target.checked ? 1 : 0;\n        }\n        if (name) {\n            let item = this.state.curItem;\n            let allLanguage = this.state.allLanguage;\n            let isoCode = name.substr(-2, 2),\n                dataName = name.substr(0, 4),\n                dataSiteName = name.substr(0,9),\n                dataDescription = name.substr(0, 11);\n\n            allLanguage.map((language, index) => {\n                if (isoCode === language.iso_code && dataName === 'name') {\n                    item.data[index].name = (event.target.validity.valid) ? value : this.state.curItem.data[index].name;\n                }\n\n                if (isoCode === language.iso_code && dataSiteName === 'site_name') {\n                    item.data[index].site_name = (event.target.validity.valid) ? value : this.state.curItem.data[index].site_name;\n                }\n\n                if (isoCode === language.iso_code && dataDescription === 'description') {\n                    item.data[index].description = (event.target.validity.valid) ? value : this.state.curItem.data[index].description;\n                }\n                return 1;\n            });\n\n            item[name] = (event.target.validity.valid) ? value : this.state.curItem[name];\n\n            this.setState({ curItem: item });\n        }\n    }\n\n\n\n    /**\n     * @description save data\n     * @author long.pham 12/05/2021\n     */\n    async onSave() {\n        var {curItem, dataListEmployee} = this.state, self = this;\n        var params = Object.assign({}, this.state.curItem);\n        var screenMode = (!Libs.isBlank(curItem.id)) ? Constants.SCREEN_MODE.EDIT : ((!Libs.isBlank(this.props.curItem.screen_mode)) ? this.props.curItem.screen_mode : Constants.SCREEN_MODE.ADD);\n        let v = new AddPopupValidate(this.props);\n        let errors = await v.FLValidationAll(curItem);\n        if (errors) {\n            this.setValidateMessage(errors);\n            return;\n        }\n        //remove message validation\n        this.removeAllValidateMessage();\n        params.screen_mode = screenMode;\n\n        params.iso_code_lang = this.employee.lang;\n        params.id_language = this.employee.id_language;\n        params.iso_code = this.employee.iso_code;\n\n        var dataEmployees = [];\n        if(Libs.isArrayData(dataListEmployee)){\n            for(var i = 0, len = dataListEmployee.length; i < len; i++){\n                if(dataListEmployee[i].is_checked){\n                    dataEmployees.push({\n                        id_project: null,\n                        id_employee: dataListEmployee[i].id\n                    })\n                }\n            }\n        }\n        params.dataEmployees = dataEmployees;\n\n        if (Libs.isArrayData(params.data)) {\n            let itemLanguageDefault = Libs.find(params.data, 'is_default', 1);\n            if (!itemLanguageDefault) return;\n\n            params.data.map((item, index) => {\n                params.data[index].name = (item.name === '') ? itemLanguageDefault.name : item.name;\n                params.data[index].site_name = (item.site_name === '') ? itemLanguageDefault.site_name : item.site_name;\n                params.data[index].description = (item.description === '') ? itemLanguageDefault.description : item.description;\n                return params;\n\n            });\n        } else { return false; }\n\n        ProjectService.instance.save(params, function (status, data, msg) {\n            if (status) {\n                self.toast(msg, \"info\");\n                self.props.onClickCloseAdd(true);\n            }\n            else if (data) {\n                self.setValidateMessage(data);\n            }\n\n            else if (!Libs.isBlank(msg)) {\n                self.toast(msg, \"error\");\n            }\n        }, true);\n    }\n}\nexport default AddPopup;"]},"metadata":{},"sourceType":"module"}