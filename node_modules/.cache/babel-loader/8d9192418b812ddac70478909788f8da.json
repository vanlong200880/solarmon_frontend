{"ast":null,"code":"import BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport Constants from '../../../../../utils/Constants';\nimport AddPopupJsx from './AddPopup.jsx';\nimport AddPopupValidate from './AddPopupValidate';\nimport DeviceParameterService from '../../../../../services/DeviceParameterService';\nimport DeviceGroupService from '../../../../../services/DeviceGroupService';\n\nclass AddPopup extends BaseComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleDropdownChange = (item, name) => {\n      var self = this;\n      let curItem = self.state.curItem;\n\n      if (name === 'id_device_group') {\n        if (Libs.isObjectEmpty(item)) {\n          curItem.id_device_group = '';\n        } else {\n          var value = item.value;\n          curItem[name] = value;\n          self.setValidateMessage({\n            id_device_group: ''\n          }, true);\n        }\n      }\n\n      self.setState({\n        curItem: curItem\n      });\n    };\n\n    this.state = {\n      curItem: Object.assign({}, this.props.curItem),\n      dataDeviceGroup: []\n    };\n    this.jsxTemplate = AddPopupJsx;\n    this.handleDropdownChange = this.handleDropdownChange.bind(this);\n  }\n  /**\n   * @description Called immediately after the component is mounted in the DOM. Called after the render function\n   * @author Long.Pham 12/05/2021\n   */\n\n\n  componentDidMount() {\n    var {\n      curItem\n    } = this.state;\n\n    if (Constants.SCREEN_MODE.ADD == curItem.screen_mode) {\n      curItem.status = 1;\n    }\n\n    this.getListDeviceGroup();\n    this.setState({\n      curItem: curItem\n    });\n  }\n\n  /**\n  * ge list DeviceParameter state\n  * @author Long.Pham 2019-06-03\n  */\n  getListDeviceGroup() {\n    let self = this;\n    var params = {\n      id_language: this.employee.id_language\n    };\n    DeviceGroupService.instance.getDropdownList(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataDeviceGroup: data\n        });\n      } else {\n        self.setState({\n          dataDeviceGroup: []\n        });\n      }\n    });\n  }\n  /**\n   * @description validate a field input\n   * @author Long.Pham 12/05/2021\n   * @param {*} event \n   */\n\n\n  async validateOne(event) {\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (name) {\n      let param = {\n        [name]: value\n      };\n      let v = new AddPopupValidate(this.props);\n      let DeviceParameter = await v.validateOne(param, name);\n\n      if (DeviceParameter != null) {\n        this.setValidateMessage(DeviceParameter, true);\n      }\n    }\n  }\n  /**\n   * @description save data\n   * @author long.pham 12/05/2021\n   */\n\n\n  async onSave() {\n    var {\n      curItem\n    } = this.state,\n        self = this;\n    var params = Object.assign({}, this.state.curItem);\n    var screenMode = !Libs.isBlank(curItem.id) ? Constants.SCREEN_MODE.EDIT : !Libs.isBlank(this.props.curItem.screen_mode) ? this.props.curItem.screen_mode : Constants.SCREEN_MODE.ADD;\n    let v = new AddPopupValidate(this.props);\n    let DeviceParameters = await v.FLValidationAll(curItem);\n\n    if (DeviceParameters) {\n      this.setValidateMessage(DeviceParameters);\n      return;\n    } //remove message validation\n\n\n    this.removeAllValidateMessage();\n    params.screen_mode = screenMode;\n    params.iso_code_lang = this.employee.lang;\n    params.id_language = this.employee.id_language;\n    params.iso_code = this.employee.iso_code;\n    DeviceParameterService.instance.save(params, function (status, data, msg) {\n      if (status) {\n        self.toast(msg, \"info\");\n        self.props.onClickCloseAdd(true);\n      } else if (data) {\n        self.setValidateMessage(data);\n      } else if (!Libs.isBlank(msg)) {\n        self.toast(msg, \"error\");\n      }\n    }, true);\n  }\n\n}\n\nexport default AddPopup;","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/src/containers/views/desktop/ModuleSystem/DeviceParameter/AddPopup.js"],"names":["BaseComponent","Libs","Constants","AddPopupJsx","AddPopupValidate","DeviceParameterService","DeviceGroupService","AddPopup","constructor","props","handleDropdownChange","item","name","self","curItem","state","isObjectEmpty","id_device_group","value","setValidateMessage","setState","Object","assign","dataDeviceGroup","jsxTemplate","bind","componentDidMount","SCREEN_MODE","ADD","screen_mode","status","getListDeviceGroup","params","id_language","employee","instance","getDropdownList","data","total_row","isArrayData","validateOne","event","target","param","v","DeviceParameter","onSave","screenMode","isBlank","id","EDIT","DeviceParameters","FLValidationAll","removeAllValidateMessage","iso_code_lang","lang","iso_code","save","msg","toast","onClickCloseAdd"],"mappings":"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","sourcesContent":["\nimport BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport Constants from '../../../../../utils/Constants';\nimport AddPopupJsx from './AddPopup.jsx';\nimport AddPopupValidate from './AddPopupValidate';\nimport DeviceParameterService from '../../../../../services/DeviceParameterService';\nimport DeviceGroupService from '../../../../../services/DeviceGroupService';\n\nclass AddPopup extends BaseComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            curItem: Object.assign({}, this.props.curItem),\n            dataDeviceGroup: []\n        }\n\n        this.jsxTemplate = AddPopupJsx;\n        this.handleDropdownChange = this.handleDropdownChange.bind(this);\n    }\n    /**\n     * @description Called immediately after the component is mounted in the DOM. Called after the render function\n     * @author Long.Pham 12/05/2021\n     */\n    componentDidMount() {\n        var { curItem } = this.state;\n        if(Constants.SCREEN_MODE.ADD == curItem.screen_mode){\n            curItem.status = 1;\n        }\n        this.getListDeviceGroup();\n        this.setState({\n            curItem: curItem\n        })\n    }\n\n    handleDropdownChange = (item, name) => {\n        var self = this;\n        let curItem = self.state.curItem;\n\n        if (name === 'id_device_group') {\n            if (Libs.isObjectEmpty(item)) {\n                curItem.id_device_group = '';\n            } else {\n                var value = item.value;\n                curItem[name] = value;\n                self.setValidateMessage({ id_device_group: '' }, true);\n            }\n        }\n\n        self.setState({\n            curItem: curItem\n        });\n    }\n\n\n     /**\n    * ge list DeviceParameter state\n    * @author Long.Pham 2019-06-03\n    */\n      getListDeviceGroup() {\n        let self = this;\n        var params = { id_language: this.employee.id_language };\n\n        DeviceGroupService.instance.getDropdownList(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataDeviceGroup: data\n                });\n            } else {\n                self.setState({\n                    dataDeviceGroup: []\n                });\n            }\n        })\n    }\n\n   \n    /**\n     * @description validate a field input\n     * @author Long.Pham 12/05/2021\n     * @param {*} event \n     */\n    async validateOne(event) {\n        let target = event.target;\n        let name = target.name;\n        let value = target.value\n        if (name) {\n            let param = {\n                [name]: value\n            }\n            let v = new AddPopupValidate(this.props);\n            let DeviceParameter = await v.validateOne(param, name);\n            if (DeviceParameter != null) {\n                this.setValidateMessage(DeviceParameter, true);\n            }\n        }\n    }\n\n    /**\n     * @description save data\n     * @author long.pham 12/05/2021\n     */\n    async onSave() {\n        var {curItem} = this.state, self = this;\n        var params = Object.assign({}, this.state.curItem);\n        var screenMode = (!Libs.isBlank(curItem.id)) ? Constants.SCREEN_MODE.EDIT : ((!Libs.isBlank(this.props.curItem.screen_mode)) ? this.props.curItem.screen_mode : Constants.SCREEN_MODE.ADD);\n        let v = new AddPopupValidate(this.props);\n        let DeviceParameters = await v.FLValidationAll(curItem);\n        if (DeviceParameters) {\n            this.setValidateMessage(DeviceParameters);\n            return;\n        }\n        //remove message validation\n        this.removeAllValidateMessage();\n        params.screen_mode = screenMode;\n\n        params.iso_code_lang = this.employee.lang;\n        params.id_language = this.employee.id_language;\n        params.iso_code = this.employee.iso_code;\n\n        DeviceParameterService.instance.save(params, function (status, data, msg) {\n            if (status) {\n                self.toast(msg, \"info\");\n                self.props.onClickCloseAdd(true);\n            }\n            else if (data) {\n                self.setValidateMessage(data);\n            }\n\n            else if (!Libs.isBlank(msg)) {\n                self.toast(msg, \"error\");\n            }\n        }, true);\n    }\n}\nexport default AddPopup;"]},"metadata":{},"sourceType":"module"}