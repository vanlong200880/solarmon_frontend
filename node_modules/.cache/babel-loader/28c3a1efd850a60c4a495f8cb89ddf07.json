{"ast":null,"code":"import ChartDeviceProfileJsx from './ChartDeviceProfile.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport AnalyticsService from '../../../../../../services/AnalyticsService';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport moment from 'moment';\n\nclass ChartDeviceProfile extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.downloadDataPerformanceToday = () => {\n      var {\n        dataPerformanceToday,\n        curItem\n      } = this.state;\n      if (!Libs.isArrayData(dataPerformanceToday)) return;\n      var dataExport = [];\n\n      for (var i = 0, len = dataPerformanceToday.length; i < len; i++) {\n        dataExport.push({\n          'Time': dataPerformanceToday[i].time_full,\n          'Project name': curItem.name,\n          'Energy now (kWh)': dataPerformanceToday[i].activeEnergy,\n          \"Power now (kW)\": dataPerformanceToday[i].activePower\n        });\n      }\n\n      const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      const fileExtension = '.xlsx';\n      const ws = XLSX.utils.json_to_sheet(dataExport, {\n        skipHeader: false\n      });\n      const wb = {\n        SheetNames: ['Performance - Today'],\n        Sheets: {\n          'Performance - Today': ws\n        }\n      };\n      const excelBuffer = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      const data = new Blob([excelBuffer], {\n        type: fileType\n      });\n      FileSaver.saveAs(data, \"Export-performance-today-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n    };\n\n    this.downloadDataP12Month = () => {\n      var {\n        dataP12Months,\n        curItem\n      } = this.state;\n      if (!Libs.isArrayData(dataP12Months)) return;\n      var dataExport = [];\n\n      for (var i = 0, len = dataP12Months.length; i < len; i++) {\n        dataExport.push({\n          'Time': dataP12Months[i].time_full,\n          'Project name': curItem.name,\n          'Energy now (kWh)': dataP12Months[i].activeEnergy,\n          \"Power now (kW)\": dataP12Months[i].activePower\n        });\n      }\n\n      const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      const fileExtension = '.xlsx';\n      const ws = XLSX.utils.json_to_sheet(dataExport, {\n        skipHeader: false\n      });\n      const wb = {\n        SheetNames: ['Performance - Last 12 months'],\n        Sheets: {\n          'Performance - Last 12 months': ws\n        }\n      };\n      const excelBuffer = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      const data = new Blob([excelBuffer], {\n        type: fileType\n      });\n      FileSaver.saveAs(data, \"Export-performance-12-month-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n    };\n\n    this.downloadDataP30Days = () => {\n      var {\n        dataP30Days,\n        curItem\n      } = this.state;\n      if (!Libs.isArrayData(dataP30Days)) return;\n      var dataExport = [];\n\n      for (var i = 0, len = dataP30Days.length; i < len; i++) {\n        dataExport.push({\n          'Time': dataP30Days[i].time_full,\n          'Project name': curItem.name,\n          'Energy now (kWh)': dataP30Days[i].activeEnergy,\n          \"Power now (kW)\": dataP30Days[i].activePower\n        });\n      }\n\n      const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      const fileExtension = '.xlsx';\n      const ws = XLSX.utils.json_to_sheet(dataExport, {\n        skipHeader: false\n      });\n      const wb = {\n        SheetNames: ['Performance - Last 30 days'],\n        Sheets: {\n          'Performance - Last 30 days': ws\n        }\n      };\n      const excelBuffer = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      const data = new Blob([excelBuffer], {\n        type: fileType\n      });\n      FileSaver.saveAs(data, \"Export-performance-30-days-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n    };\n\n    this.downloadDataMaxPower = () => {\n      var {\n        maxPower12Months,\n        curItem\n      } = this.state;\n      if (!Libs.isArrayData(maxPower12Months)) return;\n      var dataExport = [];\n\n      for (var i = 0, len = maxPower12Months.length; i < len; i++) {\n        dataExport.push({\n          'Time': maxPower12Months[i].time_full,\n          'Project name': curItem.name,\n          \"Max power (kW)\": maxPower12Months[i].activePower\n        });\n      }\n\n      const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      const fileExtension = '.xlsx';\n      const ws = XLSX.utils.json_to_sheet(dataExport, {\n        skipHeader: false\n      });\n      const wb = {\n        SheetNames: ['Daily Max Power'],\n        Sheets: {\n          'Daily Max Power': ws\n        }\n      };\n      const excelBuffer = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      const data = new Blob([excelBuffer], {\n        type: fileType\n      });\n      FileSaver.saveAs(data, \"Export-max-power-12-months-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n    };\n\n    this.state = {\n      hash_id: this.props.hash_id,\n      curItem: {},\n      dataPerformanceToday: [],\n      dataP12Months: [],\n      dataP30Days: [],\n      maxPower12Months: []\n    };\n    this.jsxTemplate = ChartDeviceProfileJsx;\n  }\n\n  componentDidMount() {\n    this.getDataChartProfile();\n  }\n\n  getDataChartProfile() {\n    var {\n      hash_id,\n      curItem\n    } = this.state,\n        self = this;\n    if (Libs.isBlank(hash_id)) return;\n    var params = {\n      hash_id: hash_id,\n      id_language: this.employee.id_language,\n      id_employee: this.employee.id_employee,\n      type: 'customer'\n    };\n    AnalyticsService.instance.getDataChartProfile(params, data => {\n      if (data) {\n        curItem.name = data.name;\n        curItem.current_day = data.current_day; // Performance - Today\n\n        var dataListEnergy = data.dataChartProfile;\n        var series = [],\n            categories = [];\n        let seriesItemEnergy = {\n          data: [],\n          name: 'Energy yield',\n          zIndex: 1,\n          type: 'column',\n          tooltip: {\n            valueSuffix: ' kWh'\n          }\n        };\n        let seriesItemPower = {\n          data: [],\n          name: 'Power',\n          zIndex: 1,\n          type: 'spline',\n          xAxis: 1,\n          yAxis: 1,\n          id: 's1',\n          lineWidth: 1,\n          tooltip: {\n            valueSuffix: ' kW'\n          },\n          marker: {\n            radius: 1.5\n          }\n        };\n        var rowItemEnergy = [],\n            rowItemPower = [];\n\n        if (Libs.isArrayData(dataListEnergy)) {\n          categories = ['5AM', '5:05 AM', '5:10 AM', '5:15 AM', '5:20 AM', '5:25 AM', '5:30 AM', '5:35 AM', '5:40 AM', '5:45 AM', '5:50 AM', '5:55 AM', '6AM', '6:05 AM', '6:10 AM', '6:15 AM', '6:20 AM', '6:25 AM', '6:30 AM', '6:35 AM', '6:40 AM', '6:45 AM', '6:50 AM', '6:55 AM', '7AM', '7:05 AM', '7:10 AM', '7:15 AM', '7:20 AM', '7:25 AM', '7:30 AM', '7:35 AM', '7:40 AM', '7:45 AM', '7:50 AM', '7:55 AM', '8AM', '8:05 AM', '8:10 AM', '8:15 AM', '8:20 AM', '8:25 AM', '8:30 AM', '8:35 AM', '8:40 AM', '8:45 AM', '8:50 AM', '8:55 AM', '9AM', '9:05 AM', '9:10 AM', '9:15 AM', '9:20 AM', '9:25 AM', '9:30 AM', '9:35 AM', '9:40 AM', '9:45 AM', '9:50 AM', '9:55 AM', '10AM', '10:05 AM', '10:10 AM', '10:15 AM', '10:20 AM', '10:25 AM', '10:30 AM', '10:35 AM', '10:40 AM', '10:45 AM', '10:50 AM', '10:55 AM', '11AM', '11:05 AM', '11:10 AM', '11:15 AM', '11:20 AM', '11:25 AM', '11:30 AM', '11:35 AM', '11:40 AM', '11:45 AM', '11:50 AM', '11:55 AM', '12PM', '12:05 PM', '12:10 PM', '12:15 PM', '12:20 PM', '12:25 PM', '12:30 PM', '12:35 PM', '12:40 PM', '12:45 PM', '12:50 PM', '12:55 PM', '13PM', '13:05 PM', '13:10 PM', '13:15 PM', '13:20 PM', '13:25 PM', '13:30 PM', '13:35 PM', '13:40 PM', '13:45 PM', '13:50 PM', '13:55 PM', '14PM', '14:05 PM', '14:10 PM', '14:15 PM', '14:20 PM', '14:25 PM', '14:30 PM', '14:35 PM', '14:40 PM', '14:45 PM', '14:50 PM', '14:55 PM', '15PM', '15:05 PM', '15:10 PM', '15:15 PM', '15:20 PM', '15:25 PM', '15:30 PM', '15:35 PM', '15:40 PM', '15:45 PM', '15:50 PM', '15:55 PM', '16PM', '16:05 PM', '16:10 PM', '16:15 PM', '16:20 PM', '16:25 PM', '16:30 PM', '16:35 PM', '16:40 PM', '16:45 PM', '16:50 PM', '16:55 PM', '17PM', '17:05 PM', '17:10 PM', '17:15 PM', '17:20 PM', '17:25 PM', '17:30 PM', '17:35 PM', '17:40 PM', '17:45 PM', '17:50 PM', '17:55 PM', '18PM', '18:05 PM', '18:10 PM', '18:15 PM', '18:20 PM', '18:25 PM', '18:30 PM', '18:35 PM', '18:40 PM', '18:45 PM', '18:50 PM', '18:55 PM', '19PM'];\n          var range5Minute = 0;\n\n          for (let i = 0; i < dataListEnergy.length; i++) {\n            if (i == 0) {\n              var hour = Libs.dateFormat(dataListEnergy[i].time_format, 'HH', 'YYYY-MM-DD HH:mm:ss');\n              var minutes = Libs.dateFormat(dataListEnergy[i].time_format, 'mm', 'YYYY-MM-DD HH:mm:ss');\n              range5Minute = (parseInt(hour) - 5) * 12 + Math.round(minutes / 5);\n\n              if (range5Minute > 0) {\n                for (var j = 0; j < range5Minute; j++) {\n                  var dateF = Libs.dateFormat(Libs.addMinutes(Libs.dateFormat(dataListEnergy[i].time_format, 'YYYY-MM-DD 05:00', 'YYYY-MM-DD HH:mm:ss'), j * 5), 'DD/MM/YYYY HH:mm', 'YYYY-MM-DD HH:mm:ss');\n                  rowItemEnergy.push([dateF, null]);\n                  rowItemPower.push([dateF, null]);\n                }\n              }\n            }\n\n            rowItemEnergy.push([dataListEnergy[i].time_full, dataListEnergy[i].activeEnergy]);\n            rowItemPower.push([dataListEnergy[i].time_full, dataListEnergy[i].activePower]);\n          } // set chart line end\n\n\n          let range5MinuteLine = range5Minute + dataListEnergy.length;\n\n          if (range5MinuteLine < 168 && range5MinuteLine > 0) {\n            let lastDate = '';\n\n            for (let izero1 = range5MinuteLine; izero1 < 168; izero1++) {\n              if (izero1 == range5MinuteLine) {\n                lastDate = dataListEnergy[dataListEnergy.length - 1].time_format;\n              }\n\n              if (lastDate != null) {\n                lastDate = Libs.addMinutes(lastDate, 5);\n                rowItemEnergy.push([Libs.dateFormat(lastDate, 'YYYY-MM-DD HH:mm', 'YYYY-MM-DD HH:mm:ss'), null]);\n                rowItemPower.push([Libs.dateFormat(lastDate, 'YYYY-MM-DD HH:mm', 'YYYY-MM-DD HH:mm:ss'), null]);\n              }\n            }\n          }\n\n          seriesItemEnergy.data = rowItemEnergy;\n          series.push(seriesItemEnergy);\n          seriesItemPower.data = rowItemPower;\n          series.push(seriesItemPower);\n        } // Performance - Last 12 months\n\n\n        var rowItemEnergyP12Month = [],\n            rowItemPowerP12Month = [];\n        var performanceLast12Months = data.performanceLast12Months;\n        var seriesP12Month = [],\n            categoriesP12Month = [];\n        let seriesItemEnergyP12Month = {\n          data: [],\n          name: 'Energy yield',\n          zIndex: 1,\n          type: 'column',\n          tooltip: {\n            valueSuffix: ' kWh'\n          }\n        };\n        let seriesItemPowerP12Month = {\n          data: [],\n          name: 'Power',\n          zIndex: 1,\n          type: 'spline',\n          xAxis: 1,\n          yAxis: 1,\n          id: 's1',\n          lineWidth: 1,\n          tooltip: {\n            valueSuffix: ' kW'\n          },\n          marker: {\n            radius: 1.5\n          }\n        }; // Performance - Last 12 months\n\n        if (Libs.isArrayData(performanceLast12Months)) {\n          categoriesP12Month = [];\n          var lastDate = '',\n              minMonth = '',\n              maxMonth = '';\n\n          for (let i = 0; i < performanceLast12Months.length; i++) {\n            categoriesP12Month.push([performanceLast12Months[i].category_time_format]);\n            lastDate = performanceLast12Months[i].time_format;\n\n            if (i === 0) {\n              let date = new Date(performanceLast12Months[i].time_format);\n              minMonth = date.getMonth() + 1;\n            }\n\n            if (i === performanceLast12Months.length - 1) {\n              let date = new Date(performanceLast12Months[i].time_format);\n              maxMonth = date.getMonth() + 1;\n            }\n\n            rowItemEnergyP12Month.push([performanceLast12Months[i].time_full, performanceLast12Months[i].activeEnergy]);\n            rowItemPowerP12Month.push([performanceLast12Months[i].time_full, performanceLast12Months[i].activePower]);\n          }\n\n          if (!Libs.isBlank(minMonth) && !Libs.isBlank(maxMonth)) {\n            let firstArrEnergyP12Month = [],\n                firstArrayPowerP12Month = [],\n                firstArrCategoryP12Month = [];\n            let date = new Date(lastDate);\n\n            for (let i = 1; i < minMonth; i++) {\n              firstArrEnergyP12Month.push([(i < 10 ? '0' + i : i) + \"/\" + date.getFullYear(), null]);\n              firstArrayPowerP12Month.push([(i < 10 ? '0' + i : i) + \"/\" + date.getFullYear(), null]);\n              firstArrCategoryP12Month.push([Libs.getStringMonthNumber(i)]);\n            }\n\n            firstArrCategoryP12Month.push(...categoriesP12Month);\n            firstArrEnergyP12Month.push(...rowItemEnergyP12Month);\n            firstArrayPowerP12Month.push(...rowItemPowerP12Month);\n\n            for (let i = maxMonth + 1; i <= 12; i++) {\n              firstArrEnergyP12Month.push([(i < 10 ? '0' + i : i) + \"/\" + date.getFullYear(), null]);\n              firstArrayPowerP12Month.push([(i < 10 ? '0' + i : i) + \"/\" + date.getFullYear(), null]);\n              firstArrCategoryP12Month.push([Libs.getStringMonthNumber(i)]);\n            }\n\n            categoriesP12Month = firstArrCategoryP12Month;\n            rowItemEnergyP12Month = firstArrEnergyP12Month;\n            rowItemPowerP12Month = firstArrayPowerP12Month;\n          }\n\n          seriesItemEnergyP12Month.data = rowItemEnergyP12Month;\n          seriesP12Month.push(seriesItemEnergyP12Month);\n          seriesItemPowerP12Month.data = rowItemPowerP12Month;\n          seriesP12Month.push(seriesItemPowerP12Month);\n        } // Performance - Last 31 days\n\n\n        var dataP30Days = data.performanceLast30Days;\n        var rowItemEnergyP30Days = [],\n            rowItemPowerP30Days = [];\n        var seriesP30Days = [],\n            categoriesP30Days = [];\n        let seriesItemEnergyP30Days = {\n          data: [],\n          name: 'Energy yield',\n          zIndex: 1,\n          type: 'column',\n          tooltip: {\n            valueSuffix: ' kWh'\n          }\n        };\n        let seriesItemPowerP30Days = {\n          data: [],\n          name: 'Power',\n          zIndex: 1,\n          type: 'spline',\n          xAxis: 1,\n          yAxis: 1,\n          id: 's1',\n          lineWidth: 1,\n          tooltip: {\n            valueSuffix: ' kW'\n          },\n          marker: {\n            radius: 1.5\n          }\n        };\n\n        if (Libs.isArrayData(dataP30Days)) {\n          categoriesP30Days = [];\n\n          for (let i = 0; i < dataP30Days.length; i++) {\n            categoriesP30Days.push([dataP30Days[i].category_time_format]);\n            rowItemEnergyP30Days.push([dataP30Days[i].time_full, dataP30Days[i].activeEnergy]);\n            rowItemPowerP30Days.push([dataP30Days[i].time_full, dataP30Days[i].activePower]);\n          }\n\n          seriesItemEnergyP30Days.data = rowItemEnergyP30Days;\n          seriesP30Days.push(seriesItemEnergyP30Days);\n          seriesItemPowerP30Days.data = rowItemPowerP30Days;\n          seriesP30Days.push(seriesItemPowerP30Days);\n        } // Daily Max Power - Last 12 Months\n\n\n        var maxPower12Months = data.maxPower12Months;\n        var rowItemPowerMaxPower = [];\n        var seriesMaxPower = [];\n        let seriesItemPowerMax = {\n          data: [],\n          name: 'Measured AC Power (max)',\n          tooltip: {\n            valueSuffix: ' kW'\n          }\n        };\n\n        if (Libs.isArrayData(maxPower12Months)) {\n          for (let i = 0; i < maxPower12Months.length; i++) {\n            rowItemPowerMaxPower.push([Date.UTC(maxPower12Months[i].year, maxPower12Months[i].month, maxPower12Months[i].day), maxPower12Months[i].activePower]);\n          }\n\n          seriesItemPowerMax.data = rowItemPowerMaxPower;\n          seriesMaxPower.push(seriesItemPowerMax);\n        }\n\n        self.setState({\n          curItem: curItem,\n          dataCategories: categories,\n          dataPerformanceToday: dataListEnergy,\n          series: series,\n          dataP12Months: performanceLast12Months,\n          dataCategoriesP12Month: categoriesP12Month,\n          seriesP12Month: seriesP12Month,\n          dataP30Days: dataP30Days,\n          categoriesP30Days: categoriesP30Days,\n          seriesP30Days: seriesP30Days,\n          maxPower12Months: maxPower12Months,\n          seriesMaxPower: seriesMaxPower\n        }, () => {\n          self.performanceTodayOption();\n        });\n      }\n    }, false);\n  }\n\n  performanceTodayOption() {\n    // Performance - Today\n    var performanceTodayOption = {\n      credits: {\n        enabled: false\n      },\n      exporting: {\n        enabled: true\n      },\n      title: {\n        text: null\n      },\n      chart: {\n        type: 'column'\n      },\n      legend: {\n        layout: 'horizontal',\n        align: 'center',\n        verticalAlign: 'bottom',\n        borderWidth: 0,\n        showInLegend: false\n      },\n      colors: ['#82cdff', '#f5893b', '#f2ae1b', '#1e477f', '#e68600', '#00b767', '#ffc300'],\n      xAxis: [{\n        title: {\n          text: \"Power\",\n          enabled: false\n        },\n        alignTicks: true,\n        gridLineWidth: 1,\n        tickInterval: 24,\n        visible: true,\n        categories: this.state.dataCategories\n      }, {\n        title: {\n          text: 'Data',\n          enabled: false\n        },\n        tickInterval: 1,\n        opposite: true,\n        visible: false\n      }],\n      yAxis: [{\n        min: 0,\n        title: {\n          text: 'kWh',\n          enabled: true\n        },\n        lineWidth: 1,\n        gridLineWidth: 1,\n        labels: {\n          enabled: true\n        }\n      }, {\n        title: {\n          text: 'kW',\n          enabled: true\n        },\n        lineWidth: 1,\n        opposite: true,\n        gridLineWidth: 1,\n        labels: {\n          enabled: true\n        }\n      }],\n      plotOptions: {\n        column: {\n          stacking: 'normal'\n        }\n      },\n      tooltip: {\n        shared: false,\n        crosshairs: true\n      },\n      series: this.state.series\n    }; // Performance - Last 12 months\n\n    var performance12MonthOption = {\n      credits: {\n        enabled: false\n      },\n      exporting: {\n        enabled: true\n      },\n      title: {\n        text: null\n      },\n      chart: {\n        type: 'column'\n      },\n      legend: {\n        layout: 'horizontal',\n        align: 'center',\n        verticalAlign: 'bottom',\n        borderWidth: 0,\n        showInLegend: false\n      },\n      colors: ['#82cdff', '#f5893b', '#f2ae1b', '#1e477f', '#e68600', '#00b767', '#ffc300'],\n      xAxis: [{\n        title: {\n          text: \"Power\",\n          enabled: false\n        },\n        alignTicks: true,\n        gridLineWidth: 1,\n        tickInterval: 1,\n        visible: true,\n        categories: this.state.dataCategoriesP12Month\n      }, {\n        title: {\n          text: 'Data',\n          enabled: false\n        },\n        tickInterval: 1,\n        opposite: true,\n        visible: false\n      }],\n      yAxis: [{\n        min: 0,\n        title: {\n          text: 'kWh',\n          enabled: true\n        },\n        lineWidth: 1,\n        gridLineWidth: 1,\n        labels: {\n          enabled: true\n        }\n      }, {\n        title: {\n          text: 'kW',\n          enabled: true\n        },\n        lineWidth: 1,\n        opposite: true,\n        gridLineWidth: 1,\n        labels: {\n          enabled: true\n        }\n      }],\n      plotOptions: {\n        column: {\n          stacking: 'normal'\n        }\n      },\n      tooltip: {\n        shared: false,\n        crosshairs: true\n      },\n      series: this.state.seriesP12Month\n    }; // Performance - Last 12 months\n\n    var performance30DaysOption = {\n      credits: {\n        enabled: false\n      },\n      exporting: {\n        enabled: true\n      },\n      title: {\n        text: null\n      },\n      chart: {\n        type: 'xy'\n      },\n      legend: {\n        layout: 'horizontal',\n        align: 'center',\n        verticalAlign: 'bottom',\n        borderWidth: 0,\n        showInLegend: false\n      },\n      colors: ['#82cdff', '#f5893b', '#f2ae1b', '#1e477f', '#e68600', '#00b767', '#ffc300'],\n      xAxis: [{\n        title: {\n          text: \"Power\",\n          enabled: false\n        },\n        alignTicks: true,\n        gridLineWidth: 1,\n        tickInterval: 3,\n        visible: true,\n        categories: this.state.categoriesP30Days,\n        crosshair: true\n      }, {\n        title: {\n          text: 'Data',\n          enabled: false\n        },\n        tickInterval: 1,\n        opposite: true,\n        visible: false\n      }],\n      yAxis: [{\n        min: 0,\n        title: {\n          text: 'kWh',\n          enabled: true\n        },\n        lineWidth: 1,\n        gridLineWidth: 1,\n        labels: {\n          enabled: true\n        }\n      }, {\n        title: {\n          text: 'kW',\n          enabled: true\n        },\n        lineWidth: 1,\n        opposite: true,\n        gridLineWidth: 1,\n        labels: {\n          enabled: true\n        }\n      }],\n      tooltip: {\n        shared: false,\n        crosshairs: true\n      },\n      series: this.state.seriesP30Days\n    }; // Daily Max Power - Last 12 Months\n\n    var maxPowerOption = {\n      credits: {\n        enabled: false\n      },\n      exporting: {\n        enabled: true\n      },\n      chart: {\n        zoomType: 'xy'\n      },\n      title: {\n        text: null\n      },\n      colors: ['#f5893b', '#66bc51', '#004ec3'],\n      xAxis: {\n        type: 'datetime',\n        dateTimeLabelFormats: {\n          month: '%e. %b',\n          year: '%Y'\n        },\n        title: {\n          text: null,\n          enabled: false\n        }\n      },\n      yAxis: {\n        title: {\n          text: 'kW'\n        },\n        min: 0,\n        lineWidth: 1,\n        gridLineWidth: 1\n      },\n      plotOptions: {\n        series: {\n          marker: {\n            enabled: true\n          }\n        }\n      },\n      series: this.state.seriesMaxPower\n    };\n    this.setState({\n      performanceTodayOption: performanceTodayOption,\n      performance12MonthOption: performance12MonthOption,\n      performance30DaysOption: performance30DaysOption,\n      maxPowerOption: maxPowerOption\n    });\n  }\n\n  render() {\n    return this.jsxTemplate.call(this);\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(ChartDeviceProfile);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/desktop/ModuleProject/Analytics/ChartDeviceProfile/ChartDeviceProfile.js"],"names":["ChartDeviceProfileJsx","BaseComponent","Libs","withTranslation","AnalyticsService","FileSaver","XLSX","moment","ChartDeviceProfile","constructor","props","context","downloadDataPerformanceToday","dataPerformanceToday","curItem","state","isArrayData","dataExport","i","len","length","push","time_full","name","activeEnergy","activePower","fileType","fileExtension","ws","utils","json_to_sheet","skipHeader","wb","SheetNames","Sheets","excelBuffer","write","bookType","type","data","Blob","saveAs","format","downloadDataP12Month","dataP12Months","downloadDataP30Days","dataP30Days","downloadDataMaxPower","maxPower12Months","hash_id","jsxTemplate","componentDidMount","getDataChartProfile","self","isBlank","params","id_language","employee","id_employee","instance","current_day","dataListEnergy","dataChartProfile","series","categories","seriesItemEnergy","zIndex","tooltip","valueSuffix","seriesItemPower","xAxis","yAxis","id","lineWidth","marker","radius","rowItemEnergy","rowItemPower","range5Minute","hour","dateFormat","time_format","minutes","parseInt","Math","round","j","dateF","addMinutes","range5MinuteLine","lastDate","izero1","rowItemEnergyP12Month","rowItemPowerP12Month","performanceLast12Months","seriesP12Month","categoriesP12Month","seriesItemEnergyP12Month","seriesItemPowerP12Month","minMonth","maxMonth","category_time_format","date","Date","getMonth","firstArrEnergyP12Month","firstArrayPowerP12Month","firstArrCategoryP12Month","getFullYear","getStringMonthNumber","performanceLast30Days","rowItemEnergyP30Days","rowItemPowerP30Days","seriesP30Days","categoriesP30Days","seriesItemEnergyP30Days","seriesItemPowerP30Days","rowItemPowerMaxPower","seriesMaxPower","seriesItemPowerMax","UTC","year","month","day","setState","dataCategories","dataCategoriesP12Month","performanceTodayOption","credits","enabled","exporting","title","text","chart","legend","layout","align","verticalAlign","borderWidth","showInLegend","colors","alignTicks","gridLineWidth","tickInterval","visible","opposite","min","labels","plotOptions","column","stacking","shared","crosshairs","performance12MonthOption","performance30DaysOption","crosshair","maxPowerOption","zoomType","dateTimeLabelFormats","render","call","HighOrderComponentTranslated"],"mappings":"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","sourcesContent":["import ChartDeviceProfileJsx from './ChartDeviceProfile.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport AnalyticsService from '../../../../../../services/AnalyticsService';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport moment from 'moment';\nclass ChartDeviceProfile extends BaseComponent {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            hash_id: this.props.hash_id,\n            curItem: {},\n            dataPerformanceToday: [],\n            dataP12Months: [],\n            dataP30Days: [],\n            maxPower12Months: []\n        };\n\n        this.jsxTemplate = ChartDeviceProfileJsx;\n    }\n\n    componentDidMount() {\n        this.getDataChartProfile();\n    }\n\n    getDataChartProfile() {\n        var { hash_id, curItem } = this.state, self = this;\n        if (Libs.isBlank(hash_id)) return;\n        var params = {\n            hash_id: hash_id,\n            id_language: this.employee.id_language,\n            id_employee: this.employee.id_employee,\n            type: 'customer'\n        };\n\n        AnalyticsService.instance.getDataChartProfile(params, data => {\n            if (data) {\n                curItem.name = data.name;\n                curItem.current_day = data.current_day;\n                // Performance - Today\n                var dataListEnergy = data.dataChartProfile;\n                var series = [], categories = [];\n                let seriesItemEnergy = {\n                    data: [],\n                    name: 'Energy yield',\n                    zIndex: 1,\n                    type: 'column',\n                    tooltip: {\n                        valueSuffix: ' kWh'\n                    }\n                };\n\n                let seriesItemPower = {\n                    data: [],\n                    name: 'Power',\n                    zIndex: 1,\n                    type: 'spline',\n                    xAxis: 1,\n                    yAxis: 1,\n                    id: 's1',\n                    lineWidth: 1,\n                    tooltip: {\n                        valueSuffix: ' kW'\n                    },\n                    marker: {\n                        radius: 1.5\n                    }\n                };\n                var rowItemEnergy = [], rowItemPower = [];\n\n                if (Libs.isArrayData(dataListEnergy)) {\n                    categories = [\n                        '5AM', '5:05 AM', '5:10 AM', '5:15 AM', '5:20 AM', '5:25 AM', '5:30 AM', '5:35 AM', '5:40 AM', '5:45 AM', '5:50 AM', '5:55 AM',\n                        '6AM', '6:05 AM', '6:10 AM', '6:15 AM', '6:20 AM', '6:25 AM', '6:30 AM', '6:35 AM', '6:40 AM', '6:45 AM', '6:50 AM', '6:55 AM',\n                        '7AM', '7:05 AM', '7:10 AM', '7:15 AM', '7:20 AM', '7:25 AM', '7:30 AM', '7:35 AM', '7:40 AM', '7:45 AM', '7:50 AM', '7:55 AM',\n                        '8AM', '8:05 AM', '8:10 AM', '8:15 AM', '8:20 AM', '8:25 AM', '8:30 AM', '8:35 AM', '8:40 AM', '8:45 AM', '8:50 AM', '8:55 AM',\n                        '9AM', '9:05 AM', '9:10 AM', '9:15 AM', '9:20 AM', '9:25 AM', '9:30 AM', '9:35 AM', '9:40 AM', '9:45 AM', '9:50 AM', '9:55 AM',\n                        '10AM', '10:05 AM', '10:10 AM', '10:15 AM', '10:20 AM', '10:25 AM', '10:30 AM', '10:35 AM', '10:40 AM', '10:45 AM', '10:50 AM', '10:55 AM',\n                        '11AM', '11:05 AM', '11:10 AM', '11:15 AM', '11:20 AM', '11:25 AM', '11:30 AM', '11:35 AM', '11:40 AM', '11:45 AM', '11:50 AM', '11:55 AM',\n                        '12PM', '12:05 PM', '12:10 PM', '12:15 PM', '12:20 PM', '12:25 PM', '12:30 PM', '12:35 PM', '12:40 PM', '12:45 PM', '12:50 PM', '12:55 PM',\n                        '13PM', '13:05 PM', '13:10 PM', '13:15 PM', '13:20 PM', '13:25 PM', '13:30 PM', '13:35 PM', '13:40 PM', '13:45 PM', '13:50 PM', '13:55 PM',\n                        '14PM', '14:05 PM', '14:10 PM', '14:15 PM', '14:20 PM', '14:25 PM', '14:30 PM', '14:35 PM', '14:40 PM', '14:45 PM', '14:50 PM', '14:55 PM',\n                        '15PM', '15:05 PM', '15:10 PM', '15:15 PM', '15:20 PM', '15:25 PM', '15:30 PM', '15:35 PM', '15:40 PM', '15:45 PM', '15:50 PM', '15:55 PM',\n                        '16PM', '16:05 PM', '16:10 PM', '16:15 PM', '16:20 PM', '16:25 PM', '16:30 PM', '16:35 PM', '16:40 PM', '16:45 PM', '16:50 PM', '16:55 PM',\n                        '17PM', '17:05 PM', '17:10 PM', '17:15 PM', '17:20 PM', '17:25 PM', '17:30 PM', '17:35 PM', '17:40 PM', '17:45 PM', '17:50 PM', '17:55 PM',\n                        '18PM', '18:05 PM', '18:10 PM', '18:15 PM', '18:20 PM', '18:25 PM', '18:30 PM', '18:35 PM', '18:40 PM', '18:45 PM', '18:50 PM', '18:55 PM',\n                        '19PM'\n                    ];\n                    var range5Minute = 0;\n                    for (let i = 0; i < dataListEnergy.length; i++) {\n                        if (i == 0) {\n                            var hour = Libs.dateFormat(dataListEnergy[i].time_format, 'HH', 'YYYY-MM-DD HH:mm:ss');\n                            var minutes = Libs.dateFormat(dataListEnergy[i].time_format, 'mm', 'YYYY-MM-DD HH:mm:ss');\n                            range5Minute = ((parseInt(hour) - 5) * 12) + (Math.round(minutes / 5));\n                            if (range5Minute > 0) {\n                                for (var j = 0; j < range5Minute; j++) {\n                                    var dateF = Libs.dateFormat(Libs.addMinutes(Libs.dateFormat(dataListEnergy[i].time_format, 'YYYY-MM-DD 05:00', 'YYYY-MM-DD HH:mm:ss'), j * 5), 'DD/MM/YYYY HH:mm', 'YYYY-MM-DD HH:mm:ss');\n                                    rowItemEnergy.push([dateF, null]);\n                                    rowItemPower.push([dateF, null]);\n                                }\n                            }\n                        }\n                        rowItemEnergy.push([dataListEnergy[i].time_full, dataListEnergy[i].activeEnergy]);\n                        rowItemPower.push([dataListEnergy[i].time_full, dataListEnergy[i].activePower]);\n                    }\n\n\n                    // set chart line end\n                    let range5MinuteLine = range5Minute + dataListEnergy.length;\n\n                    if (range5MinuteLine < 168 && range5MinuteLine > 0) {\n                        let lastDate = '';\n                        for (let izero1 = range5MinuteLine; izero1 < 168; izero1++) {\n                            if (izero1 == range5MinuteLine) {\n                                lastDate = dataListEnergy[dataListEnergy.length - 1].time_format;\n                            }\n                            if (lastDate != null) {\n                                lastDate = Libs.addMinutes(lastDate, 5);\n                                rowItemEnergy.push([Libs.dateFormat(lastDate, 'YYYY-MM-DD HH:mm', 'YYYY-MM-DD HH:mm:ss'), null]);\n                                rowItemPower.push([Libs.dateFormat(lastDate, 'YYYY-MM-DD HH:mm', 'YYYY-MM-DD HH:mm:ss'), null]);\n                            }\n                        }\n                    }\n                    seriesItemEnergy.data = rowItemEnergy;\n                    series.push(seriesItemEnergy);\n                    seriesItemPower.data = rowItemPower;\n                    series.push(seriesItemPower);\n\n                }\n\n                // Performance - Last 12 months\n                var rowItemEnergyP12Month = [], rowItemPowerP12Month = [];\n                var performanceLast12Months = data.performanceLast12Months;\n                var seriesP12Month = [], categoriesP12Month = [];\n                let seriesItemEnergyP12Month = {\n                    data: [],\n                    name: 'Energy yield',\n                    zIndex: 1,\n                    type: 'column',\n                    tooltip: {\n                        valueSuffix: ' kWh'\n                    }\n                };\n\n                let seriesItemPowerP12Month = {\n                    data: [],\n                    name: 'Power',\n                    zIndex: 1,\n                    type: 'spline',\n                    xAxis: 1,\n                    yAxis: 1,\n                    id: 's1',\n                    lineWidth: 1,\n                    tooltip: {\n                        valueSuffix: ' kW'\n                    },\n                    marker: {\n                        radius: 1.5\n                    }\n                };\n\n                // Performance - Last 12 months\n                if (Libs.isArrayData(performanceLast12Months)) {\n                    categoriesP12Month = [];\n                    var lastDate = '', minMonth = '', maxMonth = '';\n                    for (let i = 0; i < performanceLast12Months.length; i++) {\n                        categoriesP12Month.push([performanceLast12Months[i].category_time_format]);\n                        lastDate = performanceLast12Months[i].time_format;\n                        if (i === 0) {\n                            let date = new Date(performanceLast12Months[i].time_format);\n                            minMonth = date.getMonth() + 1;\n                        }\n\n                        if (i === performanceLast12Months.length - 1) {\n                            let date = new Date(performanceLast12Months[i].time_format);\n                            maxMonth = date.getMonth() + 1;\n                        }\n                        rowItemEnergyP12Month.push([performanceLast12Months[i].time_full, performanceLast12Months[i].activeEnergy]);\n                        rowItemPowerP12Month.push([performanceLast12Months[i].time_full, performanceLast12Months[i].activePower]);\n\n                    }\n\n                    if (!Libs.isBlank(minMonth) && !Libs.isBlank(maxMonth)) {\n                        let firstArrEnergyP12Month = [], firstArrayPowerP12Month = [], firstArrCategoryP12Month = [];\n                        let date = new Date(lastDate);\n\n                        for (let i = 1; i < minMonth; i++) {\n                            firstArrEnergyP12Month.push([(i < 10 ? ('0' + i) : i) + \"/\" + date.getFullYear(), null]);\n                            firstArrayPowerP12Month.push([(i < 10 ? ('0' + i) : i) + \"/\" + date.getFullYear(), null]);\n                            firstArrCategoryP12Month.push([Libs.getStringMonthNumber(i)]);\n                        }\n\n                        firstArrCategoryP12Month.push(...categoriesP12Month);\n                        firstArrEnergyP12Month.push(...rowItemEnergyP12Month);\n                        firstArrayPowerP12Month.push(...rowItemPowerP12Month);\n\n                        for (let i = maxMonth + 1; i <= 12; i++) {\n                            firstArrEnergyP12Month.push([(i < 10 ? ('0' + i) : i) + \"/\" + date.getFullYear(), null]);\n                            firstArrayPowerP12Month.push([(i < 10 ? ('0' + i) : i) + \"/\" + date.getFullYear(), null]);\n                            firstArrCategoryP12Month.push([Libs.getStringMonthNumber(i)]);\n                        }\n\n                        categoriesP12Month = firstArrCategoryP12Month;\n                        rowItemEnergyP12Month = firstArrEnergyP12Month;\n                        rowItemPowerP12Month = firstArrayPowerP12Month;\n                    }\n\n\n                    seriesItemEnergyP12Month.data = rowItemEnergyP12Month;\n                    seriesP12Month.push(seriesItemEnergyP12Month);\n                    seriesItemPowerP12Month.data = rowItemPowerP12Month;\n                    seriesP12Month.push(seriesItemPowerP12Month);\n\n\n                }\n\n                // Performance - Last 31 days\n                var dataP30Days = data.performanceLast30Days;\n                var rowItemEnergyP30Days = [], rowItemPowerP30Days = [];\n                var seriesP30Days = [], categoriesP30Days = [];\n                let seriesItemEnergyP30Days = {\n                    data: [],\n                    name: 'Energy yield',\n                    zIndex: 1,\n                    type: 'column',\n                    tooltip: {\n                        valueSuffix: ' kWh'\n                    }\n                };\n\n                let seriesItemPowerP30Days = {\n                    data: [],\n                    name: 'Power',\n                    zIndex: 1,\n                    type: 'spline',\n                    xAxis: 1,\n                    yAxis: 1,\n                    id: 's1',\n                    lineWidth: 1,\n                    tooltip: {\n                        valueSuffix: ' kW'\n                    },\n                    marker: {\n                        radius: 1.5\n                    }\n                };\n\n                if (Libs.isArrayData(dataP30Days)) {\n                    categoriesP30Days = [];\n                    for (let i = 0; i < dataP30Days.length; i++) {\n                        categoriesP30Days.push([dataP30Days[i].category_time_format]);\n                        rowItemEnergyP30Days.push([dataP30Days[i].time_full, dataP30Days[i].activeEnergy]);\n                        rowItemPowerP30Days.push([dataP30Days[i].time_full, dataP30Days[i].activePower]);\n\n                    }\n\n                    seriesItemEnergyP30Days.data = rowItemEnergyP30Days;\n                    seriesP30Days.push(seriesItemEnergyP30Days);\n                    seriesItemPowerP30Days.data = rowItemPowerP30Days;\n                    seriesP30Days.push(seriesItemPowerP30Days);\n\n                }\n\n                // Daily Max Power - Last 12 Months\n                var maxPower12Months = data.maxPower12Months;\n                var rowItemPowerMaxPower = [];\n                var seriesMaxPower = [];\n                let seriesItemPowerMax = {\n                    data: [],\n                    name: 'Measured AC Power (max)',\n                    tooltip: {\n                        valueSuffix: ' kW'\n                    }\n                };\n\n                if (Libs.isArrayData(maxPower12Months)) {\n                    for (let i = 0; i < maxPower12Months.length; i++) {\n                        rowItemPowerMaxPower.push([Date.UTC(maxPower12Months[i].year, maxPower12Months[i].month, maxPower12Months[i].day), maxPower12Months[i].activePower]);\n                    }\n                    seriesItemPowerMax.data = rowItemPowerMaxPower;\n                    seriesMaxPower.push(seriesItemPowerMax);\n                }\n\n                self.setState({\n                    curItem: curItem,\n                    dataCategories: categories,\n                    dataPerformanceToday: dataListEnergy,\n                    series: series,\n\n                    dataP12Months: performanceLast12Months,\n                    dataCategoriesP12Month: categoriesP12Month,\n                    seriesP12Month: seriesP12Month,\n\n                    dataP30Days: dataP30Days,\n                    categoriesP30Days: categoriesP30Days,\n                    seriesP30Days: seriesP30Days,\n\n                    maxPower12Months: maxPower12Months,\n                    seriesMaxPower: seriesMaxPower,\n\n                }, () => {\n                    self.performanceTodayOption();\n                });\n            }\n        }, false);\n    }\n\n\n\n\n    performanceTodayOption() {\n        // Performance - Today\n        var performanceTodayOption = {\n            credits: { enabled: false },\n            exporting: { enabled: true },\n            title: { text: null },\n\n            chart: {\n                type: 'column'\n            },\n            legend: {\n                layout: 'horizontal',\n                align: 'center',\n                verticalAlign: 'bottom',\n                borderWidth: 0,\n                showInLegend: false\n            },\n            colors: ['#82cdff', '#f5893b', '#f2ae1b', '#1e477f', '#e68600', '#00b767', '#ffc300'],\n            xAxis: [\n                {\n                    title: { text: \"Power\", enabled: false },\n                    alignTicks: true,\n                    gridLineWidth: 1,\n                    tickInterval: 24,\n                    visible: true,\n                    categories: this.state.dataCategories\n                },\n\n                {\n                    title: { text: 'Data', enabled: false },\n                    tickInterval: 1,\n                    opposite: true,\n                    visible: false,\n                },\n\n            ],\n\n            yAxis: [{\n                min: 0,\n                title: {\n                    text: 'kWh',\n                    enabled: true\n                },\n                lineWidth: 1,\n                gridLineWidth: 1,\n                labels: {\n                    enabled: true\n                },\n            }, {\n                title: { text: 'kW', enabled: true },\n                lineWidth: 1,\n                opposite: true,\n                gridLineWidth: 1,\n                labels: {\n                    enabled: true\n                },\n            }\n            ],\n\n            plotOptions: {\n                column: {\n                    stacking: 'normal'\n                },\n            },\n\n            tooltip: {\n                shared: false,\n                crosshairs: true\n            },\n            series: this.state.series\n        };\n\n        // Performance - Last 12 months\n        var performance12MonthOption = {\n            credits: { enabled: false },\n            exporting: { enabled: true },\n            title: { text: null },\n\n            chart: {\n                type: 'column'\n            },\n            legend: {\n                layout: 'horizontal',\n                align: 'center',\n                verticalAlign: 'bottom',\n                borderWidth: 0,\n                showInLegend: false\n            },\n            colors: ['#82cdff', '#f5893b', '#f2ae1b', '#1e477f', '#e68600', '#00b767', '#ffc300'],\n            xAxis: [\n                {\n                    title: { text: \"Power\", enabled: false },\n                    alignTicks: true,\n                    gridLineWidth: 1,\n                    tickInterval: 1,\n                    visible: true,\n                    categories: this.state.dataCategoriesP12Month\n                },\n\n                {\n                    title: { text: 'Data', enabled: false },\n                    tickInterval: 1,\n                    opposite: true,\n                    visible: false,\n                },\n\n            ],\n\n            yAxis: [{\n                min: 0,\n                title: {\n                    text: 'kWh',\n                    enabled: true\n                },\n                lineWidth: 1,\n                gridLineWidth: 1,\n                labels: {\n                    enabled: true\n                },\n            }, {\n                title: { text: 'kW', enabled: true },\n                lineWidth: 1,\n                opposite: true,\n                gridLineWidth: 1,\n                labels: {\n                    enabled: true\n                },\n            }\n            ],\n\n            plotOptions: {\n                column: {\n                    stacking: 'normal'\n                },\n            },\n\n            tooltip: {\n                shared: false,\n                crosshairs: true\n            },\n            series: this.state.seriesP12Month\n        };\n\n\n        // Performance - Last 12 months\n        var performance30DaysOption = {\n            credits: { enabled: false },\n            exporting: { enabled: true },\n            title: { text: null },\n\n            chart: {\n                type: 'xy'\n            },\n            legend: {\n                layout: 'horizontal',\n                align: 'center',\n                verticalAlign: 'bottom',\n                borderWidth: 0,\n                showInLegend: false\n            },\n            colors: ['#82cdff', '#f5893b', '#f2ae1b', '#1e477f', '#e68600', '#00b767', '#ffc300'],\n            xAxis: [\n                {\n                    title: { text: \"Power\", enabled: false },\n                    alignTicks: true,\n                    gridLineWidth: 1,\n                    tickInterval: 3,\n                    visible: true,\n                    categories: this.state.categoriesP30Days,\n                    crosshair: true\n                },\n\n                {\n                    title: { text: 'Data', enabled: false },\n                    tickInterval: 1,\n                    opposite: true,\n                    visible: false,\n                },\n\n            ],\n\n            yAxis: [{\n                min: 0,\n                title: {\n                    text: 'kWh',\n                    enabled: true\n                },\n                lineWidth: 1,\n                gridLineWidth: 1,\n                labels: {\n                    enabled: true\n                },\n            }, {\n                title: { text: 'kW', enabled: true },\n                lineWidth: 1,\n                opposite: true,\n                gridLineWidth: 1,\n                labels: {\n                    enabled: true\n                },\n            }\n            ],\n\n            tooltip: {\n                shared: false,\n                crosshairs: true\n            },\n            series: this.state.seriesP30Days\n        };\n\n\n        // Daily Max Power - Last 12 Months\n        var maxPowerOption = {\n            credits: { enabled: false },\n            exporting: { enabled: true },\n            chart: {\n                zoomType: 'xy'\n            },\n            title: {\n                text: null\n            },\n            colors: ['#f5893b', '#66bc51', '#004ec3'],\n\n            xAxis: {\n                type: 'datetime',\n                dateTimeLabelFormats: {\n                    month: '%e. %b',\n                    year: '%Y'\n                },\n                title: {\n                    text: null,\n                    enabled: false \n                }\n            },\n            yAxis: {\n                title: {\n                    text: 'kW'\n                },\n                min: 0,\n                lineWidth: 1,\n                gridLineWidth: 1,\n            },\n\n            plotOptions: {\n                series: {\n                    marker: {\n                        enabled: true\n                    }\n                }\n            },\n            series: this.state.seriesMaxPower\n        };\n\n\n        this.setState({\n            performanceTodayOption: performanceTodayOption,\n            performance12MonthOption: performance12MonthOption,\n            performance30DaysOption: performance30DaysOption,\n            maxPowerOption: maxPowerOption\n        });\n    }\n\n\n\n    downloadDataPerformanceToday = () => {\n        var { dataPerformanceToday, curItem } = this.state;\n        if (!Libs.isArrayData(dataPerformanceToday)) return;\n\n        var dataExport = [];\n        for (var i = 0, len = dataPerformanceToday.length; i < len; i++) {\n            dataExport.push({\n                'Time': dataPerformanceToday[i].time_full,\n                'Project name': curItem.name,\n                'Energy now (kWh)': dataPerformanceToday[i].activeEnergy,\n                \"Power now (kW)\": dataPerformanceToday[i].activePower\n            });\n        }\n\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n        const fileExtension = '.xlsx';\n        const ws = XLSX.utils.json_to_sheet(dataExport, { skipHeader: false });\n        const wb = {\n            SheetNames: ['Performance - Today'],\n            Sheets: { 'Performance - Today': ws }\n        };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, \"Export-performance-today-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n    }\n\n\n\n    downloadDataP12Month = () => {\n        var { dataP12Months, curItem } = this.state;\n        if (!Libs.isArrayData(dataP12Months)) return;\n\n        var dataExport = [];\n        for (var i = 0, len = dataP12Months.length; i < len; i++) {\n            dataExport.push({\n                'Time': dataP12Months[i].time_full,\n                'Project name': curItem.name,\n                'Energy now (kWh)': dataP12Months[i].activeEnergy,\n                \"Power now (kW)\": dataP12Months[i].activePower\n            });\n        }\n\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n        const fileExtension = '.xlsx';\n        const ws = XLSX.utils.json_to_sheet(dataExport, { skipHeader: false });\n        const wb = {\n            SheetNames: ['Performance - Last 12 months'],\n            Sheets: { 'Performance - Last 12 months': ws }\n        };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, \"Export-performance-12-month-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n    }\n\n\n    downloadDataP30Days = () => {\n        var { dataP30Days, curItem } = this.state;\n        if (!Libs.isArrayData(dataP30Days)) return;\n\n        var dataExport = [];\n        for (var i = 0, len = dataP30Days.length; i < len; i++) {\n            dataExport.push({\n                'Time': dataP30Days[i].time_full,\n                'Project name': curItem.name,\n                'Energy now (kWh)': dataP30Days[i].activeEnergy,\n                \"Power now (kW)\": dataP30Days[i].activePower\n            });\n        }\n\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n        const fileExtension = '.xlsx';\n        const ws = XLSX.utils.json_to_sheet(dataExport, { skipHeader: false });\n        const wb = {\n            SheetNames: ['Performance - Last 30 days'],\n            Sheets: { 'Performance - Last 30 days': ws }\n        };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, \"Export-performance-30-days-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n    }\n\n\n    downloadDataMaxPower = () => {\n        var { maxPower12Months, curItem } = this.state;\n        if (!Libs.isArrayData(maxPower12Months)) return;\n\n        var dataExport = [];\n        for (var i = 0, len = maxPower12Months.length; i < len; i++) {\n            dataExport.push({\n                'Time': maxPower12Months[i].time_full,\n                'Project name': curItem.name,\n                \"Max power (kW)\": maxPower12Months[i].activePower\n            });\n        }\n\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n        const fileExtension = '.xlsx';\n        const ws = XLSX.utils.json_to_sheet(dataExport, { skipHeader: false });\n        const wb = {\n            SheetNames: ['Daily Max Power'],\n            Sheets: { 'Daily Max Power': ws }\n        };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, \"Export-max-power-12-months-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n    }\n\n    render() {\n        return this.jsxTemplate.call(this)\n    }\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(ChartDeviceProfile)\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}