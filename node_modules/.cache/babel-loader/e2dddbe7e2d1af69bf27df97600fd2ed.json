{"ast":null,"code":"import BaseComponent from '../../../BaseComponent';\nimport AccountJsx from './Account.jsx';\nimport { withTranslation } from 'react-i18next';\nimport AccountValidate from './AccountValidate';\nimport Libs from '../../../../utils/Libs';\nimport Constants from '../../../../utils/Constants';\nimport EmployeeService from '../../../../services/EmployeeService';\nimport './Account.scss';\n\nclass Account extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.onAddChangePassword = () => {\n      this.setState({\n        add: true\n      });\n    };\n\n    this.onCloseChangePassword = () => {\n      this.setState({\n        add: false\n      });\n    };\n\n    this.onFileAvatarChange = event => {\n      var {\n        t\n      } = this.props;\n      var target = event.target;\n      var file = target.files[0];\n      if (!file || file === undefined || file === null) return;\n      var fileName = file.name,\n          fileSize = file.size;\n      var checkExtFile = Libs.checkExtensionFile(fileName, 1);\n      var msgAvatarError = null;\n\n      if (!checkExtFile) {\n        msgAvatarError = t('message.msg_err_ext_image_file');\n      } else if (fileSize <= 0) {\n        msgAvatarError = t('message.msg_err_file_size');\n      } else if (fileSize > Constants.COMMON.MAX_IMAGE_SIZE) {\n        msgAvatarError = t('message.msg_err_max_size_upload');\n      }\n\n      var self = this;\n      var {\n        curItem\n      } = this.state;\n\n      if (!Libs.isBlank(msgAvatarError)) {\n        curItem.file_upload = '';\n        curItem.file_message = msgAvatarError;\n        this.setState({\n          curItem: curItem\n        });\n        return;\n      } else {\n        curItem.file_message = '';\n        this.setState({\n          curItem: curItem\n        });\n      } //Read file upload\n\n\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        curItem.file_upload = e.target.result;\n        curItem.file_name = fileName;\n        self.setState({\n          curItem: curItem\n        });\n      };\n\n      reader.readAsDataURL(file);\n    };\n\n    this.onClickDeleteAvatar = event => {\n      var {\n        curItem\n      } = this.state;\n      curItem.file_message = '';\n      curItem.file_upload = '';\n      curItem.avatar_full = null;\n      this.setState({\n        curItem: curItem\n      });\n    };\n\n    this.jsxTemplate = AccountJsx;\n    this.state = {\n      curItem: {\n        max_date: Libs.getCurrentDDMMYYYY()\n      },\n      add: false\n    };\n  }\n\n  componentDidMount() {\n    this.getDetail();\n  }\n\n  /**\r\n   * get employee detail\r\n   * @author Long.Pham 15/06/2021\r\n   */\n  getDetail() {\n    let self = this,\n        curItem = this.state.curItem;\n    var params = {\n      id: this.employee.id_employee,\n      iso_code: this.employee.iso_code\n    };\n    EmployeeService.instance.getDetailEmployee(params, (status, msg, data) => {\n      if (status) {\n        if (data != null) {\n          self.setState({\n            curItem: Object.assign(curItem, data)\n          });\n        }\n      } else {\n        self.toast(msg, \"error\");\n      }\n    });\n  }\n\n  async onSaveAction() {\n    var curItem = this.state.curItem,\n        self = this;\n    var screenMode = Constants.SCREEN_MODE.EDIT;\n    let v = new AccountValidate(this.props);\n    let errors = await v.FLValidationAll(curItem);\n\n    if (errors) {\n      this.setValidateMessage(errors);\n      return;\n    } //remove message validation\n\n\n    this.removeAllValidateMessage();\n    curItem.screen_mode = screenMode;\n    curItem.iso_code = this.employee.iso_code;\n    var params = Object.assign({}, curItem);\n    EmployeeService.instance.saveUpdateProfile(params, function (status, data, msg) {\n      if (status) {\n        self.toast(msg, \"info\");\n        let info = localStorage.getItem(Constants.COMMON.EMPLOYEE_INFO);\n        let employeeInfo = JSON.parse(Libs.base64Decrypt(info));\n        employeeInfo.first_name = data.first_name;\n        employeeInfo.last_name = data.last_name;\n        employeeInfo.full_name = data.first_name + \" \" + data.last_name;\n        employeeInfo.avatar = data.avatar;\n        let jsonUser = JSON.stringify(employeeInfo);\n        localStorage.setItem(Constants.COMMON.EMPLOYEE_INFO, Libs.base64Encrypt(jsonUser));\n        setTimeout(function () {\n          window.location.reload();\n        }, 4000);\n      } else if (data) {\n        self.setValidateMessage(data);\n      } else if (!Libs.isBlank(msg)) {\n        self.toast(msg, \"error\");\n      }\n    }, true);\n  }\n  /**\r\n   * @description Upload icon  \r\n   * @author Long.Pham 12/05/2021\r\n   */\n\n\n  /**\r\n   * @description validate a field input\r\n   * @author Long.Pham 12/05/2021\r\n   * @param {*} event \r\n   */\n  async validateOne(event) {\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (name) {\n      let param = {\n        [name]: value\n      };\n      let v = new AccountValidate(this.props);\n      let error = await v.validateOne(param, name);\n\n      if (error != null) {\n        this.setValidateMessage(error, true);\n      }\n    }\n  }\n\n  render() {\n    return this.jsxTemplate.call(this);\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(Account);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/desktop/Account/Account.js"],"names":["BaseComponent","AccountJsx","withTranslation","AccountValidate","Libs","Constants","EmployeeService","Account","constructor","props","context","onAddChangePassword","setState","add","onCloseChangePassword","onFileAvatarChange","event","t","target","file","files","undefined","fileName","name","fileSize","size","checkExtFile","checkExtensionFile","msgAvatarError","COMMON","MAX_IMAGE_SIZE","self","curItem","state","isBlank","file_upload","file_message","reader","FileReader","onload","e","result","file_name","readAsDataURL","onClickDeleteAvatar","avatar_full","jsxTemplate","max_date","getCurrentDDMMYYYY","componentDidMount","getDetail","params","id","employee","id_employee","iso_code","instance","getDetailEmployee","status","msg","data","Object","assign","toast","onSaveAction","screenMode","SCREEN_MODE","EDIT","v","errors","FLValidationAll","setValidateMessage","removeAllValidateMessage","screen_mode","saveUpdateProfile","info","localStorage","getItem","EMPLOYEE_INFO","employeeInfo","JSON","parse","base64Decrypt","first_name","last_name","full_name","avatar","jsonUser","stringify","setItem","base64Encrypt","setTimeout","window","location","reload","validateOne","value","param","error","render","call","HighOrderComponentTranslated"],"mappings":"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","sourcesContent":["import BaseComponent from '../../../BaseComponent';\r\nimport AccountJsx from './Account.jsx';\r\nimport { withTranslation } from 'react-i18next';\r\nimport AccountValidate from './AccountValidate';\r\nimport Libs from '../../../../utils/Libs';\r\nimport Constants from '../../../../utils/Constants';\r\nimport EmployeeService from '../../../../services/EmployeeService';\r\nimport './Account.scss';\r\n\r\nclass Account extends BaseComponent {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.jsxTemplate = AccountJsx;\r\n        this.state = {\r\n            curItem: {\r\n                max_date: Libs.getCurrentDDMMYYYY()\r\n            },\r\n            add: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDetail();\r\n    }\r\n\r\n    onAddChangePassword = () => {\r\n        this.setState({\r\n            add: true\r\n        })\r\n    }\r\n\r\n    onCloseChangePassword = () => {\r\n        this.setState({\r\n            add: false\r\n        })\r\n    }\r\n\r\n    /**\r\n     * get employee detail\r\n     * @author Long.Pham 15/06/2021\r\n     */\r\n    getDetail() {\r\n        let self = this, curItem = this.state.curItem;\r\n        var params = {\r\n            id: this.employee.id_employee,\r\n            iso_code: this.employee.iso_code\r\n        };\r\n\r\n        EmployeeService.instance.getDetailEmployee(params, (status, msg, data) => {\r\n            if (status) {\r\n                if (data != null) {\r\n                    self.setState({ curItem: Object.assign(curItem, data) });\r\n                }\r\n            } else {\r\n                self.toast(msg, \"error\");\r\n            }\r\n        })\r\n    }\r\n\r\n    async onSaveAction() {\r\n        var curItem = this.state.curItem, self = this;\r\n        var screenMode = Constants.SCREEN_MODE.EDIT;\r\n        let v = new AccountValidate(this.props);\r\n        let errors = await v.FLValidationAll(curItem);\r\n        if (errors) {\r\n            this.setValidateMessage(errors);\r\n            return;\r\n        }\r\n        //remove message validation\r\n        this.removeAllValidateMessage();\r\n        curItem.screen_mode = screenMode;\r\n        curItem.iso_code = this.employee.iso_code;\r\n        var params = Object.assign({}, curItem);\r\n\r\n        EmployeeService.instance.saveUpdateProfile(params, function (status, data, msg) {\r\n            if (status) {\r\n                self.toast(msg, \"info\");\r\n                let info = localStorage.getItem(Constants.COMMON.EMPLOYEE_INFO);\r\n                let employeeInfo = JSON.parse(Libs.base64Decrypt(info));\r\n                employeeInfo.first_name = data.first_name;\r\n                employeeInfo.last_name = data.last_name;\r\n                employeeInfo.full_name = data.first_name + \" \" + data.last_name;\r\n                employeeInfo.avatar = data.avatar;\r\n                let jsonUser = JSON.stringify(employeeInfo);\r\n                localStorage.setItem(Constants.COMMON.EMPLOYEE_INFO, Libs.base64Encrypt(jsonUser));\r\n                setTimeout(function () {\r\n                    window.location.reload();\r\n                }, 4000);\r\n\r\n            }\r\n            else if (data) {\r\n                self.setValidateMessage(data);\r\n            }\r\n            else if (!Libs.isBlank(msg)) {\r\n                self.toast(msg, \"error\");\r\n            }\r\n        }, true);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @description Upload icon  \r\n     * @author Long.Pham 12/05/2021\r\n     */\r\n    onFileAvatarChange = (event) => {\r\n        var { t } = this.props;\r\n        var target = event.target;\r\n        var file = target.files[0];\r\n        if (!file || file === undefined || file === null) return;\r\n        var fileName = file.name, fileSize = file.size;\r\n        var checkExtFile = Libs.checkExtensionFile(fileName, 1);\r\n        var msgAvatarError = null;\r\n        if (!checkExtFile) {\r\n            msgAvatarError = t('message.msg_err_ext_image_file')\r\n        }\r\n        else if (fileSize <= 0) {\r\n            msgAvatarError = t('message.msg_err_file_size');\r\n        }\r\n        else if (fileSize > Constants.COMMON.MAX_IMAGE_SIZE) {\r\n            msgAvatarError = t('message.msg_err_max_size_upload');\r\n        }\r\n\r\n        var self = this;\r\n        var { curItem } = this.state;\r\n        if (!Libs.isBlank(msgAvatarError)) {\r\n            curItem.file_upload = '';\r\n            curItem.file_message = msgAvatarError;\r\n            this.setState({\r\n                curItem: curItem\r\n            });\r\n\r\n            return;\r\n        } else {\r\n            curItem.file_message = '';\r\n            this.setState({\r\n                curItem: curItem\r\n            });\r\n        }\r\n\r\n        //Read file upload\r\n        var reader = new FileReader();\r\n        reader.onload = function (e) {\r\n            curItem.file_upload = e.target.result;\r\n            curItem.file_name = fileName;\r\n            self.setState({\r\n                curItem: curItem\r\n            });\r\n        };\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n\r\n    /**\r\n     * @description Delete icon upload \r\n     * @author Long.Pham 12/05/2021\r\n     */\r\n    onClickDeleteAvatar = (event) => {\r\n        var { curItem } = this.state;\r\n        curItem.file_message = '';\r\n        curItem.file_upload = '';\r\n        curItem.avatar_full = null;\r\n\r\n        this.setState({\r\n            curItem: curItem\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description validate a field input\r\n     * @author Long.Pham 12/05/2021\r\n     * @param {*} event \r\n     */\r\n    async validateOne(event) {\r\n        let target = event.target;\r\n        let name = target.name;\r\n        let value = target.value\r\n        if (name) {\r\n            let param = {\r\n                [name]: value\r\n            }\r\n            let v = new AccountValidate(this.props);\r\n            let error = await v.validateOne(param, name);\r\n            if (error != null) {\r\n                this.setValidateMessage(error, true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return this.jsxTemplate.call(this);\r\n    }\r\n\r\n}\r\n\r\nconst HighOrderComponentTranslated = withTranslation('common')(Account)\r\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}