{"ast":null,"code":"import BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport MoveDevicePopupJsx from './MoveDevicePopup.jsx';\nimport ProjectService from '../../../../../services/ProjectService';\nimport DeviceService from '../../../../../services/DeviceService';\nimport Constants from '../../../../../utils/Constants'; // import MoveDevicePopupValidate from './MoveDevicePopupValidate';\n\nimport EstimationSensorValidate from './EstimationSensorValidate';\n\nclass MoveDevicePopup extends BaseComponent {\n  constructor(props) {\n    super(props);\n\n    this.loadConfig = () => {\n      var item = this.props.curItem,\n          self = this;\n      if (Libs.isObjectEmpty(item)) return;\n      ProjectService.instance.getDetailConfig(item, data => {\n        if (data) {\n          self.setState({\n            curItem: data,\n            dataConfigRevenue: Libs.isArrayData(data.dataConfigRevenue) ? data.dataConfigRevenue : []\n          });\n        }\n      }, false);\n    };\n\n    this.handleDropdownChange = (item, name) => {\n      var self = this;\n      let curItem = self.state.curItem;\n\n      if (Libs.isObjectEmpty(item)) {\n        curItem.year = '';\n      } else {\n        var value = item.value;\n        curItem[name] = value;\n        self.setValidateMessage({\n          year: ''\n        }, true);\n      }\n\n      self.setState({\n        curItem: curItem\n      });\n    };\n\n    this.onItemClickDelete = index => {\n      var {\n        dataConfigRevenue\n      } = this.state;\n      if (!Libs.isArrayData(dataConfigRevenue)) return;\n      var item = dataConfigRevenue[index];\n      if (Libs.isObjectEmpty(item)) return;\n      dataConfigRevenue.splice(index, 1);\n      this.setState({\n        dataConfigRevenue: dataConfigRevenue\n      });\n    };\n\n    this.addRowConfigRevenue = () => {\n      var {\n        dataConfigRevenue\n      } = this.state;\n      dataConfigRevenue.push({\n        id: '',\n        id_project: '',\n        config_revenue: '',\n        start_date: '',\n        end_date: '',\n        status: 1\n      });\n      this.setState({\n        dataConfigRevenue: dataConfigRevenue\n      });\n    };\n\n    this.state = {\n      curItemProject: this.props.curItem,\n      curItem: {},\n      dataYear: this.getListYear(),\n      dataConfigRevenue: [],\n      dataList: [],\n      searchParam: {}\n    };\n    this.jsxTemplate = MoveDevicePopupJsx;\n    this.handleInputChangeItem = this.handleInputChangeItem.bind(this);\n    this.handleDropdownChange = this.handleDropdownChange.bind(this);\n  }\n\n  componentDidMount() {\n    // this.loadConfig();\n    this.getListDeviceByProject();\n  }\n  /**\n   * get list\n   * @author Long.Pham 2019-06-03\n   */\n\n\n  getListDeviceByProject() {\n    let self = this;\n    var {\n      curItemProject,\n      searchParam\n    } = this.state;\n    searchParam.id_project = curItemProject.id;\n    searchParam.id_language = this.employee.id_language;\n    DeviceService.instance.getListDeviceByProject(searchParam, (data, total_row) => {\n      console.log(\"data: \", data);\n\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataList: data\n        });\n      } else {\n        self.setState({\n          dataList: []\n        });\n      }\n\n      self.forceUpdate();\n    });\n  }\n  /**\n   * @description Item click event\n   * @author Long.Pham 12-05-2021\n   * @param index element in the list\n   */\n\n\n  /**\n   * setValue method to Input\n   * @author Long.Pham 20/05/2021\n   */\n  handleInputChangeItem(event, index) {\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (target.type === 'checkbox') {\n      value = target.checked ? 1 : 0;\n    }\n\n    if (name) {\n      var {\n        dataConfigRevenue\n      } = this.state;\n      var item = dataConfigRevenue[index];\n\n      if (name == 'config_revenue') {\n        var numericExpression = /^[0-9\\b]+$/;\n\n        if (value == \"\" || numericExpression.test(value)) {\n          item[name] = value;\n          dataConfigRevenue[index] = item;\n          this.setState({\n            dataConfigRevenue: dataConfigRevenue\n          });\n        }\n      } else {\n        item[name] = value;\n        dataConfigRevenue[index] = item;\n        this.setState({\n          dataConfigRevenue: dataConfigRevenue\n        });\n      }\n    }\n  }\n\n  getListYear() {\n    var dataYear = [];\n    let date = new Date();\n    let year = date.getFullYear();\n\n    if (year > 0) {\n      for (var i = year; i >= year - 20; i--) {\n        dataYear.push({\n          id: i,\n          value: i,\n          label: i\n        });\n      }\n    }\n\n    return dataYear;\n  }\n\n  /**\n   * @description save data\n   * @author long.pham 12/05/2021\n   */\n  async onSave() {\n    var {\n      curItem,\n      dataConfigRevenue,\n      curItemProject\n    } = this.state,\n        self = this;\n    var params = Object.assign({}, curItem);\n    params.screen_mode = Constants.SCREEN_MODE.EDIT;\n    params.id_language = this.employee.id_language;\n    params.id_project = curItemProject.id;\n    params.dataConfigRevenue = dataConfigRevenue; // let v = new MoveDevicePopupValidate(this.props);\n    // let errors = await v.FLValidationAll(curItem);\n    // if (errors) {\n    //     this.setValidateMessage(errors);\n    //     return;\n    // }\n    //remove message validation\n\n    this.removeAllValidateMessage();\n    ProjectService.instance.saveConfig(params, function (status, data, msg) {\n      if (status) {\n        self.toast(msg, \"info\");\n        self.props.onItemClickCloseMoveDevice(false);\n      } else if (data) {\n        self.setValidateMessage(data);\n      } else if (!Libs.isBlank(msg)) {\n        self.toast(msg, \"error\");\n      }\n    }, true);\n  }\n  /**\n   * @description save data\n   * @author long.pham 12/05/2021\n   */\n\n\n  async onSaveEstimationSenSor() {\n    var {\n      curItem,\n      curItemProject\n    } = this.state,\n        self = this;\n    var params = Object.assign({}, curItem);\n    params.screen_mode = Constants.SCREEN_MODE.EDIT;\n    params.id_language = this.employee.id_language;\n    params.id_project = curItemProject.id;\n    let v = new EstimationSensorValidate(this.props);\n    let errors = await v.FLValidationAll(curItem);\n\n    if (errors) {\n      this.setValidateMessage(errors);\n      return;\n    } //remove message validation\n\n\n    this.removeAllValidateMessage();\n    ProjectService.instance.saveConfigEstimationSenSor(params, function (status, data, msg) {\n      if (status) {\n        self.toast(msg, \"info\");\n      } else if (data) {\n        self.setValidateMessage(data);\n      } else if (!Libs.isBlank(msg)) {\n        self.toast(msg, \"error\");\n      }\n    }, true);\n  }\n  /**\n  * @description validate a field input\n  * @author Long.Pham 12/05/2021\n  * @param {*} event \n  */\n  //   async validateOne(event) {\n  //     let target = event.target;\n  //     let name = target.name;\n  //     let value = target.value\n  //     if (name) {\n  //         let param = {\n  //             [name]: value\n  //         }\n  //         let v = new MoveDevicePopupValidate(this.props);\n  //         let error = await v.validateOne(param, name);\n  //         if (error != null) {\n  //             this.setValidateMessage(error, true);\n  //         }\n  //     }\n  // }\n\n  /**\n   * @description validate a field input\n   * @author Long.Pham 12/05/2021\n   * @param {*} event \n   */\n\n\n  async validateOneEst(event) {\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (name) {\n      let param = {\n        [name]: value\n      };\n      let v = new EstimationSensorValidate(this.props);\n      let error = await v.validateOne(param, name);\n\n      if (error != null) {\n        this.setValidateMessage(error, true);\n      }\n    }\n  }\n\n}\n\nexport default MoveDevicePopup;","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/src/containers/views/desktop/ModuleSystem/Project/MoveDevicePopup.js"],"names":["BaseComponent","Libs","MoveDevicePopupJsx","ProjectService","DeviceService","Constants","EstimationSensorValidate","MoveDevicePopup","constructor","props","loadConfig","item","curItem","self","isObjectEmpty","instance","getDetailConfig","data","setState","dataConfigRevenue","isArrayData","handleDropdownChange","name","state","year","value","setValidateMessage","onItemClickDelete","index","splice","addRowConfigRevenue","push","id","id_project","config_revenue","start_date","end_date","status","curItemProject","dataYear","getListYear","dataList","searchParam","jsxTemplate","handleInputChangeItem","bind","componentDidMount","getListDeviceByProject","id_language","employee","total_row","console","log","forceUpdate","event","target","type","checked","numericExpression","test","date","Date","getFullYear","i","label","onSave","params","Object","assign","screen_mode","SCREEN_MODE","EDIT","removeAllValidateMessage","saveConfig","msg","toast","onItemClickCloseMoveDevice","isBlank","onSaveEstimationSenSor","v","errors","FLValidationAll","saveConfigEstimationSenSor","validateOneEst","param","error","validateOne"],"mappings":"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","sourcesContent":["\nimport BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport MoveDevicePopupJsx from './MoveDevicePopup.jsx';\nimport ProjectService from '../../../../../services/ProjectService';\nimport DeviceService from '../../../../../services/DeviceService';\nimport Constants from '../../../../../utils/Constants';\n// import MoveDevicePopupValidate from './MoveDevicePopupValidate';\nimport EstimationSensorValidate from './EstimationSensorValidate';\n\nclass MoveDevicePopup extends BaseComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            curItemProject: this.props.curItem,\n            curItem: {},\n            dataYear: this.getListYear(),\n            dataConfigRevenue: [],\n            dataList: [],\n            searchParam: {}\n        }\n\n        this.jsxTemplate = MoveDevicePopupJsx;\n        this.handleInputChangeItem = this.handleInputChangeItem.bind(this);\n        this.handleDropdownChange = this.handleDropdownChange.bind(this);\n    }\n\n    componentDidMount(){\n        // this.loadConfig();\n        this.getListDeviceByProject();\n    }\n\n\n\n\n    /**\n     * get list\n     * @author Long.Pham 2019-06-03\n     */\n     getListDeviceByProject() {\n        let self = this;\n        var { curItemProject, searchParam } = this.state;\n        searchParam.id_project = curItemProject.id;\n        searchParam.id_language = this.employee.id_language;\n        DeviceService.instance.getListDeviceByProject(searchParam, (data, total_row) => {\n            console.log(\"data: \", data);\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataList: data\n                });\n\n            } else {\n                self.setState({\n                    dataList: []\n                });\n            }\n            self.forceUpdate();\n        });\n    }\n\n\n    /**\n     * @description Item click event\n     * @author Long.Pham 12-05-2021\n     * @param index element in the list\n     */\n     loadConfig = () => {\n        var item = this.props.curItem, self = this;\n        if(Libs.isObjectEmpty(item)) return;\n\n        ProjectService.instance.getDetailConfig(item, data => {\n            if (data) {\n                self.setState({\n                    curItem: data,\n                    dataConfigRevenue: Libs.isArrayData(data.dataConfigRevenue) ? data.dataConfigRevenue: []\n                });\n            }\n        }, false);\n    }\n\n    handleDropdownChange = (item, name) => {\n        var self = this;\n        let curItem = self.state.curItem;\n\n        if (Libs.isObjectEmpty(item)) {\n            curItem.year = '';\n        } else {\n            var value = item.value;\n            curItem[name] = value;\n            self.setValidateMessage({ year: '' }, true);\n        }\n\n        self.setState({\n            curItem: curItem\n        });\n    }\n\n    /**\n     * setValue method to Input\n     * @author Long.Pham 20/05/2021\n     */\n    handleInputChangeItem(event, index) {\n        let target = event.target;\n        let name = target.name;\n        let value = target.value;\n        if (target.type === 'checkbox') {\n            value = target.checked ? 1 : 0;\n        }\n\n        if (name) {\n            var { dataConfigRevenue } = this.state;\n            var item = dataConfigRevenue[index];\n\n            if (name == 'config_revenue') {\n                var numericExpression = /^[0-9\\b]+$/;\n                if (value == \"\" || numericExpression.test(value)) {\n                    item[name] = value;\n                    dataConfigRevenue[index] = item;\n                    this.setState({ dataConfigRevenue: dataConfigRevenue });\n                }\n            } else {\n                item[name] = value;\n                dataConfigRevenue[index] = item;\n                this.setState({ dataConfigRevenue: dataConfigRevenue });\n            }\n        }\n    }\n\n\n    getListYear() {\n        var dataYear = [];\n        let date = new Date();\n        let year = date.getFullYear();\n        if (year > 0) {\n            for (var i = year; i >= year - 20; i--) {\n                dataYear.push({\n                    id: i,\n                    value: i,\n                    label: i\n                })\n            }\n        }\n        return dataYear;\n    }\n\n    onItemClickDelete = (index) => {\n        var { dataConfigRevenue } = this.state;\n        if (!Libs.isArrayData(dataConfigRevenue)) return;\n        var item = dataConfigRevenue[index];\n        if (Libs.isObjectEmpty(item)) return;\n        dataConfigRevenue.splice(index, 1);\n        this.setState({\n            dataConfigRevenue: dataConfigRevenue\n        })\n    }\n\n    addRowConfigRevenue = () => {\n        var { dataConfigRevenue } = this.state;\n        dataConfigRevenue.push({\n            id: '',\n            id_project: '',\n            config_revenue: '',\n            start_date: '',\n            end_date: '',\n            status: 1\n        });\n        this.setState({\n            dataConfigRevenue: dataConfigRevenue\n        })\n    }\n\n\n    /**\n     * @description save data\n     * @author long.pham 12/05/2021\n     */\n    async onSave() {\n        var { curItem, dataConfigRevenue, curItemProject } = this.state, self = this;\n        var params = Object.assign({}, curItem);\n        params.screen_mode = Constants.SCREEN_MODE.EDIT;\n        params.id_language = this.employee.id_language;\n        params.id_project = curItemProject.id;\n        params.dataConfigRevenue = dataConfigRevenue;\n\n        // let v = new MoveDevicePopupValidate(this.props);\n        // let errors = await v.FLValidationAll(curItem);\n        // if (errors) {\n        //     this.setValidateMessage(errors);\n        //     return;\n        // }\n        //remove message validation\n        this.removeAllValidateMessage();\n\n\n\n        ProjectService.instance.saveConfig(params, function (status, data, msg) {\n            if (status) {\n                self.toast(msg, \"info\");\n                self.props.onItemClickCloseMoveDevice(false);\n            }\n            else if (data) {\n                self.setValidateMessage(data);\n            }\n\n            else if (!Libs.isBlank(msg)) {\n                self.toast(msg, \"error\");\n            }\n        }, true);\n    }\n\n\n    \n    /**\n     * @description save data\n     * @author long.pham 12/05/2021\n     */\n     async onSaveEstimationSenSor() {\n        var { curItem, curItemProject } = this.state, self = this;\n        var params = Object.assign({}, curItem);\n        params.screen_mode = Constants.SCREEN_MODE.EDIT;\n        params.id_language = this.employee.id_language;\n        params.id_project = curItemProject.id;\n\n        let v = new EstimationSensorValidate(this.props);\n        let errors = await v.FLValidationAll(curItem);\n        if (errors) {\n            this.setValidateMessage(errors);\n            return;\n        }\n        //remove message validation\n        this.removeAllValidateMessage();\n\n\n        ProjectService.instance.saveConfigEstimationSenSor(params, function (status, data, msg) {\n            if (status) {\n                self.toast(msg, \"info\");\n            }\n            else if (data) {\n                self.setValidateMessage(data);\n            }\n\n            else if (!Libs.isBlank(msg)) {\n                self.toast(msg, \"error\");\n            }\n        }, true);\n    }\n\n\n     /**\n     * @description validate a field input\n     * @author Long.Pham 12/05/2021\n     * @param {*} event \n     */\n    //   async validateOne(event) {\n    //     let target = event.target;\n    //     let name = target.name;\n    //     let value = target.value\n    //     if (name) {\n    //         let param = {\n    //             [name]: value\n    //         }\n    //         let v = new MoveDevicePopupValidate(this.props);\n    //         let error = await v.validateOne(param, name);\n    //         if (error != null) {\n    //             this.setValidateMessage(error, true);\n    //         }\n    //     }\n    // }\n\n    /**\n     * @description validate a field input\n     * @author Long.Pham 12/05/2021\n     * @param {*} event \n     */\n     async validateOneEst(event) {\n        let target = event.target;\n        let name = target.name;\n        let value = target.value\n        if (name) {\n            let param = {\n                [name]: value\n            }\n            let v = new EstimationSensorValidate(this.props);\n            let error = await v.validateOne(param, name);\n            if (error != null) {\n                this.setValidateMessage(error, true);\n            }\n        }\n    }\n\n}\nexport default MoveDevicePopup;"]},"metadata":{},"sourceType":"module"}