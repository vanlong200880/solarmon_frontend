{"ast":null,"code":"import Libs from '../utils/Libs';\nimport CMSHttp from '../utils/CMSHttp';\nimport Constants from '../utils/Constants';\nexport default class RoleService {\n  static get instance() {\n    if (!this._instance) {\n      this._instance = new RoleService();\n    }\n\n    return this._instance;\n  }\n  /**\n   * @author long.pham 2018-07-27\n   * @param  {RoleEntity} objE\n   * @param  {function(data,total_row,msg)} callBack\n   * @param  {Boolean} isShowProgress\n   */\n\n\n  getList(objE, callBack) {\n    try {\n      var http = new CMSHttp(true);\n      http.post(Constants.URL.ROLE.LIST, objE, function (status, rs) {\n        if (typeof callBack === 'function') {\n          if (!status || !rs) {\n            //lỗi do http nên không làm gì vì đã có http thư viện xử lý\n            return;\n          }\n\n          var data = [];\n          var total_row = 0;\n\n          if (rs.status && Array.isArray(rs.data)) {\n            data = rs.data;\n            total_row = rs.total_row;\n          }\n\n          callBack(data, total_row, \"\");\n        }\n      });\n    } catch (error) {\n      var msg = error;\n      callBack(false, 0, msg);\n    }\n  }\n  /**\n    * API call for update Role status\n    * @author long.pham\n    * @param @param {RoleEntity} objE\n    * @param {function(status,msg)} callBack \n    * @param  {boolean} isShowProgress\n    */\n\n\n  updateStatus(objE, callBack) {\n    try {\n      var http = new CMSHttp(false);\n      http.post(Constants.URL.ROLE.UPDATE_STATUS, objE, function (status, rs) {\n        if (typeof callBack === 'function') {\n          if (!status || !rs) {\n            return;\n          }\n\n          var msg = rs.mess;\n          callBack(rs.status, msg);\n        }\n      });\n    } catch (error) {\n      callBack(false, error);\n    }\n  }\n  /**\n   * API call for save data\n   * @author long.pham 2018-07-27\n   * @param {Function} callBack\n   * @param {boolean} isShowProgress\n   */\n\n\n  save(objE, callBack) {\n    try {\n      var http = new CMSHttp(true);\n      http.post(Constants.URL.ROLE.SAVE, objE, function (status, rs) {\n        if (typeof callBack === 'function') {\n          if (!status || !rs) {\n            return;\n          }\n\n          var data = null;\n          var msg = rs.mess;\n\n          if (!Libs.isObjectEmpty(rs.data)) {\n            data = rs.data;\n          }\n\n          callBack(rs.status, data, msg);\n        }\n      });\n    } catch (error) {\n      callBack(false, null, error);\n    }\n  }\n  /**\n   * API call for save data\n   * @author long.pham 2018-07-27\n   * @param {RoleEntity} objE\n   * @param {Function} callBack\n   * @param {boolean} isShowProgress\n   */\n\n\n  updateRoleMapScreen(objE, callBack) {\n    try {\n      var http = new CMSHttp(true);\n      http.post(Constants.URL.ROLE.UPDATE_ROLE_MAP_SCREEN, objE, function (status, rs) {\n        if (typeof callBack === 'function') {\n          if (!status || !rs) {\n            return;\n          }\n\n          var data = null;\n          var msg = rs.mess;\n\n          if (!Libs.isObjectEmpty(rs.data)) {\n            data = rs.data;\n          }\n\n          callBack(rs.status, data, msg);\n        }\n      });\n    } catch (error) {\n      callBack(false, null, error);\n    }\n  }\n  /**\n    * API call for delete\n    * @author long.pham\n    * @param @param {RoleEntity} objE\n    * @param {function(status,msg)} callBack \n    * @param  {boolean} isShowProgress\n    */\n\n\n  delete(objE, callBack) {\n    try {\n      var http = new CMSHttp(true);\n      http.post(Constants.URL.ROLE.DELETE, objE, function (status, rs) {\n        if (typeof callBack === 'function') {\n          if (!status || !rs) {\n            return;\n          }\n\n          var data = null;\n          var msg = rs.mess;\n\n          if (!Libs.isObjectEmpty(rs.data)) {\n            data = rs.data;\n          }\n\n          callBack(rs.status, data, msg);\n        }\n      });\n    } catch (error) {\n      callBack(false, error);\n    }\n  }\n  /**\n   * API get detail\n   * @author Long.Pham 2019-05-28\n   * @param {RegenncyEntity} objE \n   * @param {function(data)} callBack\n   * @param {boolean} isShowProgress \n   */\n\n\n  getDetail(objE, callBack) {\n    try {\n      var http = new CMSHttp(true);\n      http.post(Constants.URL.ROLE.DETAIL, objE, function (status, rs) {\n        if (typeof callBack === 'function') {\n          if (!status || !rs) {\n            //error http => lib http  proccess\n            return;\n          }\n\n          var data = {};\n\n          if (rs.status && typeof rs.data === 'object') {\n            data = rs.data;\n          }\n\n          callBack(data);\n        }\n      });\n    } catch (error) {\n      callBack({});\n    }\n  }\n  /**\n  * Get dropdown list\n  * @author Long.Pham\n  * @param {function (data,total_row,msg)} callBack \n  * @param {boolean} isShowProgress \n  */\n\n\n  getDropdownList(objE, callBack) {\n    try {\n      var http = new CMSHttp(false);\n      http.post(Constants.URL.ROLE.DROPDOWN_LIST, objE, function (status, rs) {\n        if (typeof callBack === 'function') {\n          if (!status || !rs) {\n            return;\n          }\n\n          var data = [];\n          var total_row = 0;\n\n          if (rs.status && Array.isArray(rs.data)) {\n            data = rs.data;\n            total_row = rs.total_row;\n          }\n\n          callBack(data, total_row, \"\");\n        }\n      });\n    } catch (error) {\n      var msg = error;\n      callBack(false, 0, msg);\n    }\n  }\n  /**\n  * Get permission by role\n  * @author long.pham\n  * @param {function (data,total_row,msg)} callBack \n  * @param {boolean} isShowProgress \n  */\n\n\n  getListScreenPermissions(objE, callBack) {\n    try {\n      var http = new CMSHttp(true);\n      http.post(Constants.URL.ROLE.PERMISSION, objE, function (status, rs) {\n        if (typeof callBack === 'function') {\n          if (!status || !rs) {\n            return;\n          }\n\n          var data = [];\n          var total_row = 0;\n\n          if (rs.status && Array.isArray(rs.data)) {\n            data = rs.data;\n            total_row = rs.total_row;\n          }\n\n          callBack(data, total_row, \"\");\n        }\n      });\n    } catch (error) {\n      var msg = error;\n      callBack(false, 0, msg);\n    }\n  }\n  /**\n   * API call for save data\n   * @author long.pham 2018-07-27\n   * @param {RolesEntity} objE\n   * @param {Function} callBack\n   * @param {boolean} isShowProgress\n   */\n\n\n  updateRolePermissions(objE, callBack, isShowProgress = true) {\n    try {\n      var http = new CMSHttp(isShowProgress);\n      http.post(Constants.URL.ROLE.UPDATE_PERMISSIONS, objE, function (status, rs) {\n        if (typeof callBack === 'function') {\n          if (!status || !rs) {\n            return;\n          }\n\n          var msg = rs.mess;\n          callBack(rs.status, msg);\n        }\n      });\n    } catch (error) {\n      callBack(false, error);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/services/RoleService.js"],"names":["Libs","CMSHttp","Constants","RoleService","instance","_instance","getList","objE","callBack","http","post","URL","ROLE","LIST","status","rs","data","total_row","Array","isArray","error","msg","updateStatus","UPDATE_STATUS","mess","save","SAVE","isObjectEmpty","updateRoleMapScreen","UPDATE_ROLE_MAP_SCREEN","delete","DELETE","getDetail","DETAIL","getDropdownList","DROPDOWN_LIST","getListScreenPermissions","PERMISSION","updateRolePermissions","isShowProgress","UPDATE_PERMISSIONS"],"mappings":"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","sourcesContent":["import Libs from '../utils/Libs';\nimport CMSHttp from '../utils/CMSHttp';\nimport Constants from '../utils/Constants';\n\nexport default class RoleService {\n    static _instance;\n    static get instance() {\n        if (!this._instance) {\n            this._instance = new RoleService();\n        }\n        return this._instance;\n    }\n\n    /**\n     * @author long.pham 2018-07-27\n     * @param  {RoleEntity} objE\n     * @param  {function(data,total_row,msg)} callBack\n     * @param  {Boolean} isShowProgress\n     */\n    getList(objE, callBack) {\n        try {\n            var http = new CMSHttp(true);\n            http.post(Constants.URL.ROLE.LIST, objE, function (status, rs) {\n                if (typeof callBack === 'function') {\n                    if (!status || !rs) {\n                        //lỗi do http nên không làm gì vì đã có http thư viện xử lý\n                        return;\n                    }\n                    var data = [];\n                    var total_row = 0;\n                    if (rs.status && Array.isArray(rs.data)) {\n                        data = rs.data;\n                        total_row = rs.total_row;\n                    }\n                    callBack(data, total_row, \"\");\n                }\n            });\n        } catch (error) {\n            var msg = error;\n            callBack(false, 0, msg);\n        }\n    }\n\n\n    /**\n      * API call for update Role status\n      * @author long.pham\n      * @param @param {RoleEntity} objE\n      * @param {function(status,msg)} callBack \n      * @param  {boolean} isShowProgress\n      */\n    updateStatus(objE, callBack) {\n        try {\n            var http = new CMSHttp(false);\n            http.post(Constants.URL.ROLE.UPDATE_STATUS, objE, function (status, rs) {\n                if (typeof callBack === 'function') {\n                    if (!status || !rs) {\n                        return;\n                    }\n                    var msg = rs.mess;\n                    callBack(rs.status, msg);\n                }\n            })\n        } catch (error) {\n            callBack(false, error);\n        }\n    }\n\n\n\n\n    /**\n     * API call for save data\n     * @author long.pham 2018-07-27\n     * @param {Function} callBack\n     * @param {boolean} isShowProgress\n     */\n    save(objE, callBack) {\n        try {\n            var http = new CMSHttp(true);\n            http.post(Constants.URL.ROLE.SAVE, objE, function (status, rs) {\n                if (typeof callBack === 'function') {\n                    if (!status || !rs) {\n                        return;\n                    }\n                    var data = null;\n                    var msg = rs.mess;\n                    if (!Libs.isObjectEmpty(rs.data)) {\n                        data = rs.data;\n                    }\n                    callBack(rs.status, data, msg);\n                }\n            })\n        } catch (error) {\n            callBack(false, null, error);\n        }\n    }\n\n\n    \n    /**\n     * API call for save data\n     * @author long.pham 2018-07-27\n     * @param {RoleEntity} objE\n     * @param {Function} callBack\n     * @param {boolean} isShowProgress\n     */\n     updateRoleMapScreen(objE, callBack) {\n        try {\n            var http = new CMSHttp(true);\n            http.post(Constants.URL.ROLE.UPDATE_ROLE_MAP_SCREEN, objE, function (status, rs) {\n                if (typeof callBack === 'function') {\n                    if (!status || !rs) {\n                        return;\n                    }\n                    var data = null;\n                    var msg = rs.mess;\n                    if (!Libs.isObjectEmpty(rs.data)) {\n                        data = rs.data;\n                    }\n                    callBack(rs.status, data, msg);\n                }\n            })\n        } catch (error) {\n            callBack(false, null, error);\n        }\n    }\n\n    /**\n      * API call for delete\n      * @author long.pham\n      * @param @param {RoleEntity} objE\n      * @param {function(status,msg)} callBack \n      * @param  {boolean} isShowProgress\n      */\n    delete(objE, callBack) {\n        try {\n            var http = new CMSHttp(true);\n            http.post(Constants.URL.ROLE.DELETE, objE, function (status, rs) {\n                if (typeof callBack === 'function') {\n                    if (!status || !rs) {\n                        return;\n                    }\n                    var data = null;\n                    var msg = rs.mess;\n                    if (!Libs.isObjectEmpty(rs.data)) {\n                        data = rs.data;\n                    }\n                    callBack(rs.status, data, msg);\n                }\n            })\n        } catch (error) {\n            callBack(false, error);\n        }\n    }\n\n\n    /**\n     * API get detail\n     * @author Long.Pham 2019-05-28\n     * @param {RegenncyEntity} objE \n     * @param {function(data)} callBack\n     * @param {boolean} isShowProgress \n     */\n\n    getDetail(objE, callBack) {\n        try {\n            var http = new CMSHttp(true);\n            http.post(Constants.URL.ROLE.DETAIL, objE, function (status, rs) {\n                if (typeof callBack === 'function') {\n                    if (!status || !rs) {\n                        //error http => lib http  proccess\n                        return;\n                    }\n                    var data = {};\n                    if (rs.status && typeof rs.data === 'object') {\n                        data = rs.data;\n                    }\n                    callBack(data);\n                }\n            })\n        } catch (error) {\n            callBack({});\n        }\n    }\n\n\n\n    /**\n    * Get dropdown list\n    * @author Long.Pham\n    * @param {function (data,total_row,msg)} callBack \n    * @param {boolean} isShowProgress \n    */\n    getDropdownList(objE, callBack) {\n        try {\n            var http = new CMSHttp(false);\n            http.post(Constants.URL.ROLE.DROPDOWN_LIST, objE, function (status, rs) {\n                if (typeof callBack === 'function') {\n                    if (!status || !rs) {\n                        return;\n                    }\n                    var data = [];\n                    var total_row = 0;\n                    if (rs.status && Array.isArray(rs.data)) {\n                        data = rs.data;\n                        total_row = rs.total_row;\n                    }\n                    callBack(data, total_row, \"\");\n                }\n            });\n        } catch (error) {\n            var msg = error;\n            callBack(false, 0, msg);\n        }\n    }\n\n\n    /**\n    * Get permission by role\n    * @author long.pham\n    * @param {function (data,total_row,msg)} callBack \n    * @param {boolean} isShowProgress \n    */\n    getListScreenPermissions(objE, callBack) {\n        try {\n            var http = new CMSHttp(true);\n            http.post(Constants.URL.ROLE.PERMISSION, objE, function (status, rs) {\n                if (typeof callBack === 'function') {\n                    if (!status || !rs) {\n                        return;\n                    }\n                    var data = [];\n                    var total_row = 0;\n                    if (rs.status && Array.isArray(rs.data)) {\n                        data = rs.data;\n                        total_row = rs.total_row;\n                    }\n                    callBack(data, total_row, \"\");\n                }\n            });\n        } catch (error) {\n            var msg = error;\n            callBack(false, 0, msg);\n        }\n    }\n\n    /**\n     * API call for save data\n     * @author long.pham 2018-07-27\n     * @param {RolesEntity} objE\n     * @param {Function} callBack\n     * @param {boolean} isShowProgress\n     */\n    \n     updateRolePermissions(objE, callBack, isShowProgress = true) {\n        try {\n            var http = new CMSHttp(isShowProgress);\n            http.post(Constants.URL.ROLE.UPDATE_PERMISSIONS, objE, function (status, rs) {\n                if (typeof callBack === 'function') {\n                    if(!status || !rs){\n                       return;\n                    }\n                    var msg = rs.mess;\n                    callBack(rs.status,msg);\n                }\n            })\n        } catch (error) {\n            callBack(false,error);\n        }\n\n    }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}