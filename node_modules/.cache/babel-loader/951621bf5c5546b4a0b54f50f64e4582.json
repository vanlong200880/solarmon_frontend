{"ast":null,"code":"import BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport Constants from '../../../../../utils/Constants';\nimport AddDevicePopupJsx from './AddDevicePopup.jsx';\nimport AddDevicePopupValidate from './AddDevicePopupValidate';\nimport DeviceTypeService from '../../../../../services/DeviceTypeService';\nimport DeviceGroupService from '../../../../../services/DeviceGroupService';\nimport DeviceService from '../../../../../services/DeviceService';\n\nclass AddDevicePopup extends BaseComponent {\n  constructor(props) {\n    super(props);\n\n    this.onClickDeviceShare = () => {\n      this.setState({\n        showDeviceShare: true\n      }, () => {\n        document.body.classList.add('modal-multi');\n      });\n    };\n\n    this.onClickCloseDeviceShare = status => {\n      if (status) {\n        this.getListDeviceByProject();\n      }\n\n      this.setState({\n        showDeviceShare: false\n      }, () => {\n        document.body.classList.remove('modal-multi');\n      });\n    };\n\n    this.onClickDeleteDevice = index => {\n      if (!Libs.isArrayData(this.state.dataList)) return;\n      var item = this.state.dataList[index];\n      if (Libs.isObjectEmpty(item)) return;\n      this.setState({\n        showDeleteDevice: true,\n        curItemDelete: item\n      }, () => {\n        document.body.classList.add('modal-multi');\n      });\n    };\n\n    this.onClickCloseDeleteDevice = status => {\n      if (status) {\n        this.getListDeviceByProject();\n      }\n\n      this.setState({\n        curItemDelete: {},\n        showDeleteDevice: false\n      }, () => {\n        document.body.classList.remove('modal-multi');\n      });\n    };\n\n    this.onItemClick = index => {\n      if (!Libs.isArrayData(this.state.dataList)) return;\n      var item = this.state.dataList[index];\n      item.screen_mode = Constants.SCREEN_MODE.EDIT;\n      if (Libs.isObjectEmpty(item)) return;\n      this.setState({\n        curItem: Object.assign({}, item)\n      });\n    };\n\n    this.onIsVirtualChange = index => {\n      var {\n        curItemProject\n      } = this.state;\n      if (!Libs.isArrayData(this.state.dataList)) return;\n      var item = this.state.dataList[index],\n          self = this;\n      item.screen_mode = Constants.SCREEN_MODE.EDIT;\n      item.id_language = this.employee.id_language;\n      var isActiveUpdate = item.is_virtual;\n\n      if (isActiveUpdate * 1 === 1) {\n        isActiveUpdate = 0;\n      } else {\n        isActiveUpdate = 1;\n      }\n\n      item.id_project = curItemProject.id;\n      item.is_virtual = isActiveUpdate;\n      item.updated_by = this.employee.first_name + ' ' + this.employee.last_name;\n      DeviceService.instance.updateIsVirtual(item, function (status, msg) {\n        if (status) {\n          self.setState({\n            dataList: self.state.dataList\n          });\n        }\n      });\n    };\n\n    this.onStatusChange = index => {\n      var {\n        curItemProject\n      } = this.state;\n      if (!Libs.isArrayData(this.state.dataList)) return;\n      var item = this.state.dataList[index],\n          self = this;\n      item.screen_mode = Constants.SCREEN_MODE.EDIT;\n      item.id_language = this.employee.id_language;\n      var isActiveUpdate = item.status;\n\n      if (isActiveUpdate * 1 === 1) {\n        isActiveUpdate = 0;\n      } else {\n        isActiveUpdate = 1;\n      }\n\n      item.id_project = curItemProject.id;\n      item.status = isActiveUpdate;\n      item.updated_by = this.employee.first_name + ' ' + this.employee.last_name;\n      DeviceService.instance.updateStatus(item, function (status, msg) {\n        if (status) {\n          self.setState({\n            dataList: self.state.dataList\n          });\n        }\n      });\n    };\n\n    this.handleDropdownChange = (item, name) => {\n      var self = this;\n      let curItem = self.state.curItem;\n      var {\n        t\n      } = this.props;\n\n      if (name === 'id_device_type') {\n        if (Libs.isObjectEmpty(item)) {\n          curItem.id_device_type = '';\n        } else {\n          var value = item.value;\n          curItem[name] = value;\n          self.setValidateMessage({\n            id_device_type: ''\n          }, true);\n        }\n      }\n\n      if (name === 'id_device_group') {\n        if (Libs.isObjectEmpty(item)) {\n          curItem.id_device_group = '';\n        } else {\n          var value = item.value;\n          curItem[name] = value;\n          self.setValidateMessage({\n            id_device_group: ''\n          }, true);\n        }\n      }\n\n      self.setState({\n        curItem: curItem\n      });\n    };\n\n    this.state = {\n      curItemProject: this.props.curItem,\n      curItem: {},\n      curItemDelete: {},\n      dataDeviceType: [],\n      dataDeviceGroup: [],\n      dataList: [],\n      searchParam: {},\n      showDeleteDevice: false,\n      showDeviceShare: false\n    };\n    this.jsxTemplate = AddDevicePopupJsx;\n    this.handleDropdownChange = this.handleDropdownChange.bind(this);\n  }\n  /**\n   * @description Called immediately after the component is mounted in the DOM. Called after the render function\n   * @author Long.Pham 12/05/2021\n   */\n\n\n  componentDidMount() {\n    this.getDeviceType();\n    this.getDeviceGroup();\n    this.getListDeviceByProject();\n  }\n\n  /**\n   * get list\n   * @author Long.Pham 2019-06-03\n   */\n  getListDeviceByProject() {\n    let self = this;\n    var {\n      curItemProject,\n      searchParam\n    } = this.state;\n    searchParam.id_project = curItemProject.id;\n    searchParam.id_language = this.employee.id_language;\n    DeviceService.instance.getListDeviceByProject(searchParam, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataList: data\n        });\n      } else {\n        self.setState({\n          dataList: []\n        });\n      }\n\n      self.forceUpdate();\n    });\n  }\n  /**\n   * ge list device type\n   * @author Long.Pham 2019-06-03\n   */\n\n\n  getDeviceType() {\n    let self = this;\n    var params = {\n      id_language: this.employee.id_language\n    };\n    DeviceTypeService.instance.getDropdownList(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataDeviceType: data\n        });\n      } else {\n        self.setState({\n          dataDeviceType: []\n        });\n      }\n    });\n  }\n  /**\n   * ge list device group\n   * @author Long.Pham 2019-06-03\n   */\n\n\n  getDeviceGroup() {\n    let self = this;\n    var params = {\n      id_language: this.employee.id_language\n    };\n    DeviceGroupService.instance.getDropdownList(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataDeviceGroup: data\n        });\n      } else {\n        self.setState({\n          dataDeviceGroup: []\n        });\n      }\n    });\n  }\n\n  /**\n   * @description validate a field input\n   * @author Long.Pham 12/05/2021\n   * @param {*} event \n   */\n  async validateOne(event) {\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (name) {\n      let param = {\n        [name]: value\n      };\n      let v = new AddDevicePopupValidate(this.props);\n      let error = await v.validateOne(param, name);\n\n      if (error != null) {\n        this.setValidateMessage(error, true);\n      }\n    }\n  }\n  /**\n   * @description save data\n   * @author long.pham 12/05/2021\n   */\n\n\n  async onSave() {\n    var {\n      curItem,\n      curItemProject\n    } = this.state,\n        self = this;\n    curItem.id_project = curItemProject.id;\n    var params = Object.assign({}, this.state.curItem);\n    var screenMode = !Libs.isBlank(curItem.id) ? Constants.SCREEN_MODE.EDIT : !Libs.isBlank(this.props.curItem.screen_mode) ? this.props.curItem.screen_mode : Constants.SCREEN_MODE.ADD;\n    let v = new AddDevicePopupValidate(this.props);\n    let errors = await v.FLValidationAll(curItem);\n\n    if (errors) {\n      this.setValidateMessage(errors);\n      return;\n    } //remove message validation\n\n\n    this.removeAllValidateMessage();\n    params.screen_mode = screenMode;\n    params.iso_code_lang = this.employee.lang;\n    params.id_language = this.employee.id_language;\n    params.iso_code = this.employee.iso_code;\n    DeviceService.instance.save(params, function (status, data, msg) {\n      if (status) {\n        self.toast(msg, \"info\");\n        self.setState({\n          curItem: {}\n        }, () => {\n          self.getListDeviceByProject();\n        });\n      } else if (data) {\n        self.setValidateMessage(data);\n      } else if (!Libs.isBlank(msg)) {\n        self.toast(msg, \"error\");\n      }\n    }, true);\n  }\n\n}\n\nexport default AddDevicePopup;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/desktop/ModuleSystem/Project/AddDevicePopup.js"],"names":["BaseComponent","Libs","Constants","AddDevicePopupJsx","AddDevicePopupValidate","DeviceTypeService","DeviceGroupService","DeviceService","AddDevicePopup","constructor","props","onClickDeviceShare","setState","showDeviceShare","document","body","classList","add","onClickCloseDeviceShare","status","getListDeviceByProject","remove","onClickDeleteDevice","index","isArrayData","state","dataList","item","isObjectEmpty","showDeleteDevice","curItemDelete","onClickCloseDeleteDevice","onItemClick","screen_mode","SCREEN_MODE","EDIT","curItem","Object","assign","onIsVirtualChange","curItemProject","self","id_language","employee","isActiveUpdate","is_virtual","id_project","id","updated_by","first_name","last_name","instance","updateIsVirtual","msg","onStatusChange","updateStatus","handleDropdownChange","name","t","id_device_type","value","setValidateMessage","id_device_group","dataDeviceType","dataDeviceGroup","searchParam","jsxTemplate","bind","componentDidMount","getDeviceType","getDeviceGroup","data","total_row","forceUpdate","params","getDropdownList","validateOne","event","target","param","v","error","onSave","screenMode","isBlank","ADD","errors","FLValidationAll","removeAllValidateMessage","iso_code_lang","lang","iso_code","save","toast"],"mappings":"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","sourcesContent":["\nimport BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport Constants from '../../../../../utils/Constants';\nimport AddDevicePopupJsx from './AddDevicePopup.jsx';\nimport AddDevicePopupValidate from './AddDevicePopupValidate';\nimport DeviceTypeService from '../../../../../services/DeviceTypeService';\nimport DeviceGroupService from '../../../../../services/DeviceGroupService';\nimport DeviceService from '../../../../../services/DeviceService';\n\nclass AddDevicePopup extends BaseComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            curItemProject: this.props.curItem,\n            curItem: {},\n            curItemDelete: {},\n            dataDeviceType: [],\n            dataDeviceGroup: [],\n            dataList: [],\n            searchParam: {},\n            showDeleteDevice: false,\n            showDeviceShare: false\n        }\n\n        this.jsxTemplate = AddDevicePopupJsx;\n        this.handleDropdownChange = this.handleDropdownChange.bind(this);\n    }\n    /**\n     * @description Called immediately after the component is mounted in the DOM. Called after the render function\n     * @author Long.Pham 12/05/2021\n     */\n    componentDidMount() {\n        this.getDeviceType();\n        this.getDeviceGroup();\n        this.getListDeviceByProject();\n    }\n\n    \n    onClickDeviceShare = () => {\n        this.setState({\n            showDeviceShare: true\n        }, () => {\n            document.body.classList.add('modal-multi');\n        })\n    }\n\n    onClickCloseDeviceShare = (status) => {\n        if (status) {\n            this.getListDeviceByProject();\n        }\n        this.setState({\n            showDeviceShare: false\n        }, () => {\n            document.body.classList.remove('modal-multi');\n        });\n\n    }\n\n\n    onClickDeleteDevice = (index) => {\n        if (!Libs.isArrayData(this.state.dataList)) return;\n        var item = this.state.dataList[index];\n        if (Libs.isObjectEmpty(item)) return;\n        this.setState({\n            showDeleteDevice: true,\n            curItemDelete: item\n        }, () => {\n            document.body.classList.add('modal-multi');\n        })\n    }\n\n    onClickCloseDeleteDevice = (status) => {\n        if (status) {\n            this.getListDeviceByProject();\n        }\n\n        this.setState({\n            curItemDelete: {},\n            showDeleteDevice: false\n        }, () => {\n            document.body.classList.remove('modal-multi');\n        });\n\n    }\n\n\n    /**\n     * @description Item click event\n     * @author Long.Pham 12-05-2021\n     * @param index element in the list\n     */\n    onItemClick = (index) => {\n        if (!Libs.isArrayData(this.state.dataList)) return;\n        var item = this.state.dataList[index];\n        item.screen_mode = Constants.SCREEN_MODE.EDIT;\n        if (Libs.isObjectEmpty(item)) return;\n        this.setState({\n            curItem: Object.assign({}, item)\n        });\n    }\n\n    /**\n     * @description Item click event change status\n     * @author Long.Pham 12-05-2021\n     * @param index element in the list\n     */\n    onIsVirtualChange = (index) => {\n        var { curItemProject } = this.state;\n        if (!Libs.isArrayData(this.state.dataList)) return;\n        var item = this.state.dataList[index], self = this;\n        item.screen_mode = Constants.SCREEN_MODE.EDIT;\n        item.id_language = this.employee.id_language;\n\n        var isActiveUpdate = item.is_virtual;\n        if (isActiveUpdate * 1 === 1) {\n            isActiveUpdate = 0;\n        }\n        else {\n            isActiveUpdate = 1;\n        }\n        item.id_project = curItemProject.id;\n        item.is_virtual = isActiveUpdate;\n        item.updated_by = this.employee.first_name + ' ' + this.employee.last_name;\n\n        DeviceService.instance.updateIsVirtual(item, function (status, msg) {\n            if (status) {\n                self.setState({\n                    dataList: self.state.dataList\n                });\n            }\n        });\n    }\n\n    onStatusChange = (index) =>{\n        var { curItemProject } = this.state;\n        if (!Libs.isArrayData(this.state.dataList)) return;\n        var item = this.state.dataList[index], self = this;\n        item.screen_mode = Constants.SCREEN_MODE.EDIT;\n        item.id_language = this.employee.id_language;\n\n        var isActiveUpdate = item.status;\n        if (isActiveUpdate * 1 === 1) {\n            isActiveUpdate = 0;\n        }\n        else {\n            isActiveUpdate = 1;\n        }\n        item.id_project = curItemProject.id;\n        item.status = isActiveUpdate;\n        item.updated_by = this.employee.first_name + ' ' + this.employee.last_name;\n\n        DeviceService.instance.updateStatus(item, function (status, msg) {\n            if (status) {\n                self.setState({\n                    dataList: self.state.dataList\n                });\n            }\n        });\n    }\n\n    /**\n     * get list\n     * @author Long.Pham 2019-06-03\n     */\n    getListDeviceByProject() {\n        let self = this;\n        var { curItemProject, searchParam } = this.state;\n        searchParam.id_project = curItemProject.id;\n        searchParam.id_language = this.employee.id_language;\n        DeviceService.instance.getListDeviceByProject(searchParam, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataList: data\n                });\n\n            } else {\n                self.setState({\n                    dataList: []\n                });\n            }\n            self.forceUpdate();\n        });\n    }\n\n    /**\n     * ge list device type\n     * @author Long.Pham 2019-06-03\n     */\n    getDeviceType() {\n        let self = this;\n        var params = {\n            id_language: this.employee.id_language\n        };\n\n        DeviceTypeService.instance.getDropdownList(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataDeviceType: data\n                });\n            } else {\n                self.setState({\n                    dataDeviceType: []\n                });\n            }\n        })\n    }\n\n\n    /**\n     * ge list device group\n     * @author Long.Pham 2019-06-03\n     */\n    getDeviceGroup() {\n        let self = this;\n        var params = {\n            id_language: this.employee.id_language\n        };\n\n        DeviceGroupService.instance.getDropdownList(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataDeviceGroup: data\n                });\n            } else {\n                self.setState({\n                    dataDeviceGroup: []\n                });\n            }\n        })\n    }\n\n    handleDropdownChange = (item, name) => {\n        var self = this;\n        let curItem = self.state.curItem;\n        var { t } = this.props;\n\n        if (name === 'id_device_type') {\n            if (Libs.isObjectEmpty(item)) {\n                curItem.id_device_type = '';\n            } else {\n                var value = item.value;\n                curItem[name] = value;\n                self.setValidateMessage({ id_device_type: '' }, true);\n            }\n        }\n\n        if (name === 'id_device_group') {\n            if (Libs.isObjectEmpty(item)) {\n                curItem.id_device_group = '';\n            } else {\n                var value = item.value;\n                curItem[name] = value;\n                self.setValidateMessage({ id_device_group: '' }, true);\n            }\n        }\n\n        self.setState({\n            curItem: curItem\n        });\n    }\n\n\n    /**\n     * @description validate a field input\n     * @author Long.Pham 12/05/2021\n     * @param {*} event \n     */\n    async validateOne(event) {\n        let target = event.target;\n        let name = target.name;\n        let value = target.value\n        if (name) {\n            let param = {\n                [name]: value\n            }\n            let v = new AddDevicePopupValidate(this.props);\n            let error = await v.validateOne(param, name);\n            if (error != null) {\n                this.setValidateMessage(error, true);\n            }\n        }\n    }\n\n\n    /**\n     * @description save data\n     * @author long.pham 12/05/2021\n     */\n    async onSave() {\n        var { curItem, curItemProject } = this.state, self = this;\n        curItem.id_project = curItemProject.id;\n        var params = Object.assign({}, this.state.curItem);\n        var screenMode = (!Libs.isBlank(curItem.id)) ? Constants.SCREEN_MODE.EDIT : ((!Libs.isBlank(this.props.curItem.screen_mode)) ? this.props.curItem.screen_mode : Constants.SCREEN_MODE.ADD);\n        let v = new AddDevicePopupValidate(this.props);\n        let errors = await v.FLValidationAll(curItem);\n        if (errors) {\n            this.setValidateMessage(errors);\n            return;\n        }\n        //remove message validation\n        this.removeAllValidateMessage();\n        params.screen_mode = screenMode;\n        params.iso_code_lang = this.employee.lang;\n        params.id_language = this.employee.id_language;\n        params.iso_code = this.employee.iso_code;\n\n        DeviceService.instance.save(params, function (status, data, msg) {\n            if (status) {\n                self.toast(msg, \"info\");\n                self.setState({\n                    curItem: {}\n                }, () => {\n                    self.getListDeviceByProject();\n                })\n            }\n            else if (data) {\n                self.setValidateMessage(data);\n            }\n\n            else if (!Libs.isBlank(msg)) {\n                self.toast(msg, \"error\");\n            }\n        }, true);\n    }\n}\nexport default AddDevicePopup;"]},"metadata":{},"sourceType":"module"}