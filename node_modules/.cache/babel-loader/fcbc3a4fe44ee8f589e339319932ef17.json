{"ast":null,"code":"/**\n * 表单验证\n * @author ydr.me\n * @create 2015-07-01 16:57\n * @update 2015-10-19 11:44:25\n */\nvar howdo = require('howdo');\n\nvar klass = require('./class.js');\n\nvar dato = require('./dato.js');\n\nvar typeis = require('./typeis.js');\n\nvar allocation = require('./allocation.js');\n\nvar string = require('./string.js');\n\nvar Emitter = require('./emitter.js');\n\nvar random = require('./random.js');\n/**\n * @type {{}}\n * @exmaple\n * {\n     *     // val 值\n     *     // param 参数值\n     *     // done 验证结束回调\n     *     minLength: function (val, done, param0, param1, ...) {\n     *        // done(null); done(null)表示没有错误\n     *        // done('${path}的长度不足xx字符')\n     *     }\n     * }\n */\n\n\nvar validationMap = {};\nvar namespace = 'donkey-libs-validation';\nvar alienIndex = 0;\nvar defaults = {\n  // true: 返回单个错误对象\n  // false: 返回错误对象组成的数组\n  // 浏览器端，默认为 false\n  // 服务器端，默认为 true\n  breakOnInvalid: typeof window === 'undefined',\n  defaultMsg: '${1}不合法'\n};\nvar Validation = klass.extends(Emitter).create({\n  constructor: function (options) {\n    var the = this;\n    the._options = dato.extend({}, defaults, options);\n    the._validateList = [];\n    the._validateIndexMap = {};\n    the._aliasMap = {};\n    the._msgMap = {};\n    the._validationMap = {};\n    the.className = 'validation';\n  },\n\n  /**\n   * 为路径设置别名\n   * @param path {String} 字段\n   * @param [alias] {String} 别名\n   * @returns {Validation}\n   */\n  setAlias: function (path, alias) {\n    var the = this;\n\n    if (typeis(path) === 'object') {\n      dato.extend(the._aliasMap, path);\n      return the;\n    }\n\n    the._aliasMap[path] = alias;\n    return the;\n  },\n\n  /**\n   * 获取字段别名\n   * @param path\n   * @returns {*}\n   */\n  getAlias: function (path) {\n    return this._aliasMap[path];\n  },\n\n  /**\n   * 重设验证消息\n   * @param path\n   * @param ruleName\n   * @param msg\n   * @returns {Validation}\n   */\n  setMsg: function (path, ruleName, msg) {\n    var the = this;\n    the._msgMap[path] = the._msgMap[path] || {};\n    the._msgMap[path][ruleName] = msg;\n    return the;\n  },\n\n  /**\n   * 注册验证规则，按顺序执行验证\n   * @param path {String} 字段\n   * @param nameOrfn {String|Function} 验证规则，可以是静态规则，也可以添加规则\n   * @returns {Validation}\n   */\n  addRule: function (path, nameOrfn\n  /*arguments*/\n  ) {\n    var the = this;\n    var args = allocation.args(arguments);\n    var params = args.slice(2);\n    var index = the._validateIndexMap[path];\n\n    if (typeis.Undefined(index)) {\n      index = the._validateIndexMap[path] = the._validateList.length;\n\n      the._validateList.push({\n        path: path,\n        rules: []\n      });\n    }\n\n    if (typeis.String(nameOrfn)) {\n      var name = nameOrfn;\n\n      if (!validationMap[name]) {\n        throw 'can not found `' + name + '` validation';\n      }\n\n      the._validateList[index].rules.push({\n        name: name,\n        params: params,\n        fn: validationMap[name],\n        id: random.guid()\n      });\n    } else if (typeis.Function(nameOrfn)) {\n      the._validateList[index].rules.push({\n        name: namespace + alienIndex++,\n        params: params,\n        fn: nameOrfn,\n        id: random.guid()\n      });\n    }\n\n    return the;\n  },\n\n  /**\n   * 获取字段的规则\n   * @param [path] {String} 字段\n   * @returns {Array}\n   */\n  getRules: function (path) {\n    var the = this;\n\n    if (!path) {\n      return the._validateList;\n    }\n\n    var rules = [];\n    dato.each(the._validateList, function (i, validate) {\n      if (path === validate.path) {\n        rules = validate.rules;\n        return false;\n      }\n    });\n    return rules;\n  },\n\n  /**\n   * 获取字段验证规则的参数\n   * @param path {String} 字段\n   * @param name {String} 规则名称\n   * @returns {*|Array}}\n   */\n  getRuleParams: function (path, name) {\n    var the = this;\n    var rules = the.getRules(path);\n    var rule;\n    dato.each(rules, function (index, _rule) {\n      if (_rule.name === name) {\n        rule = _rule;\n        return false;\n      }\n    });\n    return rule && rule.params;\n  },\n\n  /**\n   * 返回待验证的数据\n   * @param [path] {String} 字段\n   * @returns {*}\n   */\n  getData: function (path) {\n    var the = this;\n\n    if (typeis.Array(path)) {\n      return dato.select(the.data, path);\n    } else if (typeis.String(path)) {\n      return the.data[path];\n    }\n\n    return the.data;\n  },\n\n  /**\n   * 设置待验证的数据\n   * @param path {String} 数据字段\n   * @param val {*} 数据值\n   * @returns {Validation}\n   */\n  setData: function (path, val) {\n    var the = this;\n    the.data[path] = val;\n    return the;\n  },\n\n  /**\n   * 执行单个验证\n   * @param data {Object} 待验证的数据\n   * @param [path] {String} 指定验证的字段\n   * @param [callback] {Function} 验证回调\n   * @returns {Validation}\n   */\n  validateOne: function (data, path, callback) {\n    var args = allocation.args(arguments);\n\n    if (!typeis.String(args[1])) {\n      callback = args[1];\n      path = Object.keys(data)[0];\n    }\n\n    return this.validateSome(data, path, callback);\n  },\n\n  /**\n   * 执行部分验证\n   * @param data {Object} 待验证的数据\n   * @param [paths] {String} 指定验证的字段\n   * @param [callback] {Function} 验证回调\n   * @returns {Validation}\n   */\n  validateSome: function (data, paths, callback) {\n    var the = this;\n    var options = the._options;\n    var path = '';\n    var args = allocation.args(arguments);\n    var pathMap = {};\n\n    if (the._isValidating) {\n      return the;\n    } // validateSome(data, callback)\n\n\n    if (!typeis.String(args[1]) && !typeis.Array(args[1])) {\n      paths = Object.keys(data);\n      callback = args[1];\n    }\n\n    paths = typeis.String(paths) ? [paths] : paths;\n    dato.each(paths, function (index, path) {\n      pathMap[path] = 1;\n    });\n    the._isValidating = true;\n    the.data = data; // var errorLength = 0;\n\n    var firstInvlidError = null;\n    var firstInvlidPath = null;\n    howdo // 遍历验证顺序\n    .each(the._validateList, function (i, item, next) {\n      if (!(item.path in pathMap)) {\n        return next();\n      }\n\n      the._validateOne(path = item.path, item.rules, function (err) {\n        if (err) {\n          if (!firstInvlidPath) {\n            firstInvlidError = err;\n            firstInvlidPath = item.path;\n          } // errorLength++;\n\n        } // 有错误 && 失败不断开\n\n\n        if (err && !options.breakOnInvalid) {\n          err = null;\n        }\n\n        next(err);\n      });\n    }).follow(function () {\n      the._isValidating = false;\n\n      if (typeis.Function(callback)) {\n        callback.call(the, firstInvlidError, firstInvlidPath);\n      }\n    });\n    return the;\n  },\n\n  /**\n   * @description Validate all data\n   * @author thanh.bay\n   * @param data {Object} 待验证的数据\n   * @param [paths] {String} 指定验证的字段\n   * @param [callback] {Function} 验证回调\n   * @returns {Validation}\n   */\n  validateSomeAll: function (data, paths, callback) {\n    var the = this;\n    var options = the._options;\n    var path = '';\n    var args = allocation.args(arguments);\n    var pathMap = {};\n\n    if (the._isValidating) {\n      return the;\n    } // validateSome(data, callback)\n\n\n    if (!typeis.String(args[1]) && !typeis.Array(args[1])) {\n      paths = Object.keys(data);\n      callback = args[1];\n    }\n\n    paths = typeis.String(paths) ? [paths] : paths;\n    dato.each(paths, function (index, path) {\n      pathMap[path] = 1;\n    });\n    the._isValidating = true;\n    the.data = data; // var errorLength = 0;\n\n    var invalidData = {};\n    howdo // 遍历验证顺序\n    .each(the._validateList, function (i, item, next) {\n      if (!(item.path in pathMap)) {\n        return next();\n      }\n\n      the._validateOne(path = item.path, item.rules, function (err) {\n        if (err) {\n          invalidData[item.path] = err.message; // errorLength++;\n        } // 有错误 && 失败不断开\n\n\n        if (err && !options.breakOnInvalid) {\n          err = null;\n        }\n\n        next(err);\n      });\n    }).follow(function () {\n      the._isValidating = false;\n\n      if (typeis.Function(callback)) {\n        callback.call(the, invalidData);\n      }\n    });\n    return the;\n  },\n\n  /**\n   * 执行全部验证\n   * @param data {Object} 待验证的数据\n   * @param [callback] {Function} 验证回调\n   * @returns {Validation}\n   */\n  validateAll: function (data, callback) {\n    var the = this;\n    var paths = [];\n    dato.each(the._validateList, function (index, item) {\n      paths.push(item.path);\n    });\n    return the.validateSome(data, paths, callback);\n  },\n\n  /**\n   * @description validate all data at the same time\n   * @param data {Object} 待验证的数据\n   * @param [callback] {Function} 验证回调\n   * @returns {Validation}\n   */\n  FLValidateAll: function (data, callback) {\n    var the = this;\n    var paths = [];\n    dato.each(the._validateList, function (index, item) {\n      paths.push(item.path);\n    });\n    return the.validateSomeAll(data, paths, callback);\n  },\n\n  /**\n   * 表单验证\n   * @param path {String} 字段\n   * @param rules {Array} 验证规则\n   * @param callback {Function} 验证回调\n   * @private\n   */\n  _validateOne: function (path, rules, callback) {\n    var the = this;\n    var options = the._options;\n    var data = the.data;\n    /**\n     * 验证之前\n     * @event beforeValidate\n     * @param path {String} 字段\n     */\n\n    the.emit('beforeValidate', path);\n    var currentRule;\n    howdo // 遍历验证规则\n    .each(rules, function (j, rule, next) {\n      var args = [data[path], next];\n      currentRule = rule;\n      the.emit('validate', path, rule.name);\n      args = args.concat(rule.params);\n      the.path = path;\n      rule.fn.apply(the, args);\n    }).follow().try(function () {\n      /**\n       * 验证成功\n       * @event valid\n       * @param path {String} 字段\n       */\n      the.emit('valid', path);\n      /**\n       * 验证之后\n       * @event validate\n       * @param path {String} 字段\n       */\n\n      the.emit('validate', path);\n\n      if (typeis.Function(callback)) {\n        callback.call(the, null);\n      }\n    }).catch(function (err) {\n      var overrideMsg = the._msgMap[path] && the._msgMap[path][currentRule.name];\n      var args = [overrideMsg || err || options.defaultMsg, the.getAlias(path) || path];\n      args = args.concat(currentRule.params);\n      err = new TypeError(string.assign.apply(string, args));\n      err.id = currentRule.id;\n      /**\n       * 验证失败\n       * @event invalid\n       * @param error {Object} 错误对象\n       * @param path {String} 字段\n       */\n\n      the.emit('invalid', err, path);\n      /**\n       * 验证之后\n       * @event validate\n       * @param path {String} 字段\n       */\n\n      the.emit('validate', path);\n\n      if (typeis.Function(callback)) {\n        callback.call(the, err);\n      }\n    });\n  },\n\n  /**\n   * 表单验证\n   * @param path {String} 字段\n   * @param rules {Array} 验证规则\n   * @param callback {Function} 验证回调\n   * @private\n   */\n  _validateAll: function (path, rules, callback) {\n    var the = this;\n    var options = the._options;\n    var data = the.data;\n    /**\n     * 验证之前\n     * @event beforeValidate\n     * @param path {String} 字段\n     */\n\n    the.emit('beforeValidate', path);\n    var currentRule;\n    howdo // 遍历验证规则\n    .each(rules, function (j, rule, next) {\n      var args = [data[path], next];\n      currentRule = rule;\n      the.emit('validate', path, rule.name);\n      args = args.concat(rule.params);\n      the.path = path;\n      rule.fn.apply(the, args);\n    }).follow().try(function () {\n      /**\n       * 验证成功\n       * @event valid\n       * @param path {String} 字段\n       */\n      the.emit('valid', path);\n      /**\n       * 验证之后\n       * @event validate\n       * @param path {String} 字段\n       */\n\n      the.emit('validate', path);\n\n      if (typeis.Function(callback)) {\n        callback.call(the, null);\n      }\n    }).catch(function (err) {\n      var overrideMsg = the._msgMap[path] && the._msgMap[path][currentRule.name];\n      var args = [overrideMsg || err || options.defaultMsg, the.getAlias(path) || path];\n      args = args.concat(currentRule.params);\n      err = new TypeError(string.assign.apply(string, args));\n      err.id = currentRule.id;\n      /**\n       * 验证失败\n       * @event invalid\n       * @param error {Object} 错误对象\n       * @param path {String} 字段\n       */\n\n      the.emit('invalid', err, path);\n      /**\n       * 验证之后\n       * @event validate\n       * @param path {String} 字段\n       */\n\n      the.emit('validate', path);\n\n      if (typeis.Function(callback)) {\n        callback.call(the, err);\n      }\n    });\n  }\n});\n/**\n * 注册静态验证规则\n * @param name {String} 规则名称\n * @param fn {Function} 规则回调\n *\n * @example\n * Validation.addRule('number', function (val, done, param0, param1, ...) {\n *    done(/^\\d+$/.test(val) ? null : '${path}必须是数字');\n * });\n */\n\nValidation.addRule = function (name, fn\n/*arguments*/\n) {\n  validationMap[name] = fn;\n};\n/**\n * 返回静态规则\n * @param [name] {String} 规则名\n * @returns {Object|Function}\n */\n\n\nValidation.getRule = function (name) {\n  return name ? validationMap[name] : validationMap;\n};\n\nrequire('./_validation-rules.js')(Validation);\n\nValidation.defaults = defaults;\nmodule.exports = Validation;","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/src/validator/libs/validation.js"],"names":["howdo","require","klass","dato","typeis","allocation","string","Emitter","random","validationMap","namespace","alienIndex","defaults","breakOnInvalid","window","defaultMsg","Validation","extends","create","constructor","options","the","_options","extend","_validateList","_validateIndexMap","_aliasMap","_msgMap","_validationMap","className","setAlias","path","alias","getAlias","setMsg","ruleName","msg","addRule","nameOrfn","args","arguments","params","slice","index","Undefined","length","push","rules","String","name","fn","id","guid","Function","getRules","each","i","validate","getRuleParams","rule","_rule","getData","Array","select","data","setData","val","validateOne","callback","Object","keys","validateSome","paths","pathMap","_isValidating","firstInvlidError","firstInvlidPath","item","next","_validateOne","err","follow","call","validateSomeAll","invalidData","message","validateAll","FLValidateAll","emit","currentRule","j","concat","apply","try","catch","overrideMsg","TypeError","assign","_validateAll","getRule","module","exports"],"mappings":"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","sourcesContent":["/**\n * 表单验证\n * @author ydr.me\n * @create 2015-07-01 16:57\n * @update 2015-10-19 11:44:25\n */\n\n\nvar howdo = require('howdo');\n\nvar klass = require('./class.js');\nvar dato = require('./dato.js');\nvar typeis = require('./typeis.js');\nvar allocation = require('./allocation.js');\nvar string = require('./string.js');\nvar Emitter = require('./emitter.js');\nvar random = require('./random.js');\n\n\n/**\n * @type {{}}\n * @exmaple\n * {\n     *     // val 值\n     *     // param 参数值\n     *     // done 验证结束回调\n     *     minLength: function (val, done, param0, param1, ...) {\n     *        // done(null); done(null)表示没有错误\n     *        // done('${path}的长度不足xx字符')\n     *     }\n     * }\n */\nvar validationMap = {};\nvar namespace = 'donkey-libs-validation';\nvar alienIndex = 0;\nvar defaults = {\n    // true: 返回单个错误对象\n    // false: 返回错误对象组成的数组\n    // 浏览器端，默认为 false\n    // 服务器端，默认为 true\n    breakOnInvalid: typeof window === 'undefined',\n    defaultMsg: '${1}不合法'\n};\nvar Validation = klass.extends(Emitter).create({\n    constructor: function (options) {\n        var the = this;\n\n        the._options = dato.extend({}, defaults, options);\n        the._validateList = [];\n        the._validateIndexMap = {};\n        the._aliasMap = {};\n        the._msgMap = {};\n        the._validationMap = {};\n        the.className = 'validation';\n    },\n\n\n    /**\n     * 为路径设置别名\n     * @param path {String} 字段\n     * @param [alias] {String} 别名\n     * @returns {Validation}\n     */\n    setAlias: function (path, alias) {\n        var the = this;\n\n        if (typeis(path) === 'object') {\n            dato.extend(the._aliasMap, path);\n            return the;\n        }\n\n        the._aliasMap[path] = alias;\n        return the;\n    },\n\n\n    /**\n     * 获取字段别名\n     * @param path\n     * @returns {*}\n     */\n    getAlias: function (path) {\n        return this._aliasMap[path];\n    },\n\n\n    /**\n     * 重设验证消息\n     * @param path\n     * @param ruleName\n     * @param msg\n     * @returns {Validation}\n     */\n    setMsg: function (path, ruleName, msg) {\n        var the = this;\n\n        the._msgMap[path] = the._msgMap[path] || {};\n        the._msgMap[path][ruleName] = msg;\n\n        return the;\n    },\n\n\n    /**\n     * 注册验证规则，按顺序执行验证\n     * @param path {String} 字段\n     * @param nameOrfn {String|Function} 验证规则，可以是静态规则，也可以添加规则\n     * @returns {Validation}\n     */\n    addRule: function (path, nameOrfn/*arguments*/) {\n        var the = this;\n        var args = allocation.args(arguments);\n        var params = args.slice(2);\n        var index = the._validateIndexMap[path];\n        if (typeis.Undefined(index)) {\n            index = the._validateIndexMap[path] = the._validateList.length;\n            the._validateList.push({\n                path: path,\n                rules: []\n            });\n        }\n\n        if (typeis.String(nameOrfn)) {\n            var name = nameOrfn;\n\n            if (!validationMap[name]) {\n                throw 'can not found `' + name + '` validation';\n            }\n\n            the._validateList[index].rules.push({\n                name: name,\n                params: params,\n                fn: validationMap[name],\n                id: random.guid()\n            });\n        } else if (typeis.Function(nameOrfn)) {\n            the._validateList[index].rules.push({\n                name: namespace + alienIndex++,\n                params: params,\n                fn: nameOrfn,\n                id: random.guid()\n            });\n        }\n\n        return the;\n    },\n\n\n    /**\n     * 获取字段的规则\n     * @param [path] {String} 字段\n     * @returns {Array}\n     */\n    getRules: function (path) {\n        var the = this;\n\n        if (!path) {\n            return the._validateList;\n        }\n\n        var rules = [];\n\n        dato.each(the._validateList, function (i, validate) {\n            if (path === validate.path) {\n                rules = validate.rules;\n\n                return false;\n            }\n        });\n\n        return rules;\n    },\n\n\n    /**\n     * 获取字段验证规则的参数\n     * @param path {String} 字段\n     * @param name {String} 规则名称\n     * @returns {*|Array}}\n     */\n    getRuleParams: function (path, name) {\n        var the = this;\n        var rules = the.getRules(path);\n        var rule;\n\n        dato.each(rules, function (index, _rule) {\n            if (_rule.name === name) {\n                rule = _rule;\n                return false;\n            }\n        });\n\n        return rule && rule.params;\n    },\n\n\n    /**\n     * 返回待验证的数据\n     * @param [path] {String} 字段\n     * @returns {*}\n     */\n    getData: function (path) {\n        var the = this;\n\n        if (typeis.Array(path)) {\n            return dato.select(the.data, path);\n        } else if (typeis.String(path)) {\n            return the.data[path];\n        }\n\n        return the.data;\n    },\n\n\n    /**\n     * 设置待验证的数据\n     * @param path {String} 数据字段\n     * @param val {*} 数据值\n     * @returns {Validation}\n     */\n    setData: function (path, val) {\n        var the = this;\n\n        the.data[path] = val;\n\n        return the;\n    },\n\n\n    /**\n     * 执行单个验证\n     * @param data {Object} 待验证的数据\n     * @param [path] {String} 指定验证的字段\n     * @param [callback] {Function} 验证回调\n     * @returns {Validation}\n     */\n    validateOne: function (data, path, callback) {\n        var args = allocation.args(arguments);\n        if (!typeis.String(args[1])) {\n            callback = args[1];\n            path = Object.keys(data)[0];\n        }\n\n        return this.validateSome(data, path, callback);\n    },\n\n\n    /**\n     * 执行部分验证\n     * @param data {Object} 待验证的数据\n     * @param [paths] {String} 指定验证的字段\n     * @param [callback] {Function} 验证回调\n     * @returns {Validation}\n     */\n    validateSome: function (data, paths, callback) {\n        var the = this;\n        var options = the._options;\n        var path = '';\n        var args = allocation.args(arguments);\n        var pathMap = {};\n\n        if (the._isValidating) {\n            return the;\n        }\n\n        // validateSome(data, callback)\n        if(!typeis.String(args[1]) && !typeis.Array(args[1])){\n            paths = Object.keys(data);\n            callback = args[1];\n        }\n\n        paths = typeis.String(paths) ? [paths] : paths;\n\n        dato.each(paths, function (index, path) {\n            pathMap[path] = 1;\n        });\n\n        the._isValidating = true;\n        the.data = data;\n        // var errorLength = 0;\n        var firstInvlidError = null;\n        var firstInvlidPath = null;\n        howdo\n        // 遍历验证顺序\n            .each(the._validateList, function (i, item, next) {\n                if (!(item.path in pathMap)) {\n                    return next();\n                }\n                the._validateOne(path = item.path, item.rules, function (err) {\n                    if (err) {\n                        if (!firstInvlidPath) {\n                            firstInvlidError = err;\n                            firstInvlidPath = item.path;\n                        }\n\n                        // errorLength++;\n                    }\n\n                    // 有错误 && 失败不断开\n                    if (err && !options.breakOnInvalid) {\n                        err = null;\n                    }\n\n                    next(err);\n                });\n            })\n            .follow(function () {\n                the._isValidating = false;\n                if (typeis.Function(callback)) {\n                    callback.call(the, firstInvlidError, firstInvlidPath);\n                }\n            });\n\n        return the;\n    },\n\n    /**\n     * @description Validate all data\n     * @author thanh.bay\n     * @param data {Object} 待验证的数据\n     * @param [paths] {String} 指定验证的字段\n     * @param [callback] {Function} 验证回调\n     * @returns {Validation}\n     */\n    validateSomeAll: function (data, paths, callback) {\n        var the = this;\n        var options = the._options;\n        var path = '';\n        var args = allocation.args(arguments);\n        var pathMap = {};\n\n        if (the._isValidating) {\n            return the;\n        }\n\n        // validateSome(data, callback)\n        if (!typeis.String(args[1]) && !typeis.Array(args[1])) {\n            paths = Object.keys(data);\n            callback = args[1];\n        }\n\n        paths = typeis.String(paths) ? [paths] : paths;\n\n        dato.each(paths, function (index, path) {\n            pathMap[path] = 1;\n        });\n\n        the._isValidating = true;\n        the.data = data;\n        // var errorLength = 0;\n        var invalidData = {}\n\n        howdo\n            // 遍历验证顺序\n            .each(the._validateList, function (i, item, next) {\n                if (!(item.path in pathMap)) {\n                    return next();\n                }\n\n                the._validateOne(path = item.path, item.rules, function (err) {\n                    if (err) {\n                        invalidData[item.path] = err.message;\n                        // errorLength++;\n                    }\n\n                    // 有错误 && 失败不断开\n                    if (err && !options.breakOnInvalid) {\n                        err = null;\n                    }\n\n                    next(err);\n                });\n            })\n            .follow(function () {\n                the._isValidating = false;\n\n                if (typeis.Function(callback)) {\n                    callback.call(the, invalidData);\n                }\n            });\n        return the;\n    },\n\n\n    /**\n     * 执行全部验证\n     * @param data {Object} 待验证的数据\n     * @param [callback] {Function} 验证回调\n     * @returns {Validation}\n     */\n    validateAll: function (data, callback) {\n        var the = this;\n        var paths = [];\n\n        dato.each(the._validateList, function (index, item) {\n            paths.push(item.path);\n        });\n\n        return the.validateSome(data, paths, callback);\n    },\n\n    /**\n     * @description validate all data at the same time\n     * @param data {Object} 待验证的数据\n     * @param [callback] {Function} 验证回调\n     * @returns {Validation}\n     */\n    FLValidateAll: function (data, callback) {\n        var the = this;\n        var paths = [];\n\n        dato.each(the._validateList, function (index, item) {\n            paths.push(item.path);\n        });\n\n        return the.validateSomeAll(data, paths, callback);\n    },\n\n    /**\n     * 表单验证\n     * @param path {String} 字段\n     * @param rules {Array} 验证规则\n     * @param callback {Function} 验证回调\n     * @private\n     */\n    _validateOne: function (path, rules, callback) {\n        var the = this;\n        var options = the._options;\n        var data = the.data;\n\n        /**\n         * 验证之前\n         * @event beforeValidate\n         * @param path {String} 字段\n         */\n        the.emit('beforeValidate', path);\n        var currentRule;\n        howdo\n        // 遍历验证规则\n            .each(rules, function (j, rule, next) {\n                var args = [data[path], next];\n\n                currentRule = rule;\n                the.emit('validate', path, rule.name);\n                args = args.concat(rule.params);\n                the.path = path;\n                rule.fn.apply(the, args);\n            })\n            .follow()\n            .try(function () {\n                /**\n                 * 验证成功\n                 * @event valid\n                 * @param path {String} 字段\n                 */\n                the.emit('valid', path);\n\n                /**\n                 * 验证之后\n                 * @event validate\n                 * @param path {String} 字段\n                 */\n                the.emit('validate', path);\n\n                if (typeis.Function(callback)) {\n                    callback.call(the, null);\n                }\n            })\n            .catch(function (err) {\n                var overrideMsg = the._msgMap[path] && the._msgMap[path][currentRule.name];\n                var args = [overrideMsg || err || options.defaultMsg, the.getAlias(path) || path];\n                args = args.concat(currentRule.params);\n                err = new TypeError(string.assign.apply(string, args));\n                err.id = currentRule.id;\n                /**\n                 * 验证失败\n                 * @event invalid\n                 * @param error {Object} 错误对象\n                 * @param path {String} 字段\n                 */\n                the.emit('invalid', err, path);\n\n                /**\n                 * 验证之后\n                 * @event validate\n                 * @param path {String} 字段\n                 */\n                the.emit('validate', path);\n\n                if (typeis.Function(callback)) {\n                    callback.call(the, err);\n                }\n            });\n    },\n\n    /**\n     * 表单验证\n     * @param path {String} 字段\n     * @param rules {Array} 验证规则\n     * @param callback {Function} 验证回调\n     * @private\n     */\n    _validateAll: function (path, rules, callback) {\n        var the = this;\n        var options = the._options;\n        var data = the.data;\n\n        /**\n         * 验证之前\n         * @event beforeValidate\n         * @param path {String} 字段\n         */\n        the.emit('beforeValidate', path);\n        var currentRule;\n        howdo\n            // 遍历验证规则\n            .each(rules, function (j, rule, next) {\n                var args = [data[path], next];\n\n                currentRule = rule;\n                the.emit('validate', path, rule.name);\n                args = args.concat(rule.params);\n                the.path = path;\n                rule.fn.apply(the, args);\n            })\n            .follow()\n            .try(function () {\n                /**\n                 * 验证成功\n                 * @event valid\n                 * @param path {String} 字段\n                 */\n                the.emit('valid', path);\n\n                /**\n                 * 验证之后\n                 * @event validate\n                 * @param path {String} 字段\n                 */\n                the.emit('validate', path);\n\n                if (typeis.Function(callback)) {\n                    callback.call(the, null);\n                }\n            })\n            .catch(function (err) {\n                var overrideMsg = the._msgMap[path] && the._msgMap[path][currentRule.name];\n                var args = [overrideMsg || err || options.defaultMsg, the.getAlias(path) || path];\n\n                args = args.concat(currentRule.params);\n                err = new TypeError(string.assign.apply(string, args));\n                err.id = currentRule.id;\n\n                /**\n                 * 验证失败\n                 * @event invalid\n                 * @param error {Object} 错误对象\n                 * @param path {String} 字段\n                 */\n                the.emit('invalid', err, path);\n\n                /**\n                 * 验证之后\n                 * @event validate\n                 * @param path {String} 字段\n                 */\n                the.emit('validate', path);\n\n                if (typeis.Function(callback)) {\n                    callback.call(the, err);\n                }\n            });\n    }\n    \n});\n\n/**\n * 注册静态验证规则\n * @param name {String} 规则名称\n * @param fn {Function} 规则回调\n *\n * @example\n * Validation.addRule('number', function (val, done, param0, param1, ...) {\n *    done(/^\\d+$/.test(val) ? null : '${path}必须是数字');\n * });\n */\nValidation.addRule = function (name, fn/*arguments*/) {\n    validationMap[name] = fn;\n};\n\n\n/**\n * 返回静态规则\n * @param [name] {String} 规则名\n * @returns {Object|Function}\n */\nValidation.getRule = function (name) {\n    return name ? validationMap[name] : validationMap;\n};\n\nrequire('./_validation-rules.js')(Validation);\nValidation.defaults = defaults;\nmodule.exports = Validation;\n"]},"metadata":{},"sourceType":"module"}