{"ast":null,"code":"'use strict';\n\nfunction round(method, number, precision) {\n  if (typeof number !== 'number') {\n    throw new TypeError('Expected value to be a number');\n  }\n\n  if (precision === Infinity) {\n    return number;\n  }\n\n  if (!Number.isInteger(precision)) {\n    throw new TypeError('Expected precision to be an integer');\n  }\n\n  const isRoundingAndNegative = method === 'round' && number < 0;\n\n  if (isRoundingAndNegative) {\n    number = Math.abs(number);\n  }\n\n  const power = 10 ** precision;\n  let result = Math[method](Number((number * power).toPrecision(15))) / power;\n\n  if (isRoundingAndNegative) {\n    result = -result;\n  }\n\n  return result;\n}\n\nmodule.exports = round.bind(undefined, 'round');\nmodule.exports.up = round.bind(undefined, 'ceil');\nmodule.exports.down = round.bind(undefined, 'floor');","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/node_modules/round-to/index.js"],"names":["round","method","number","precision","TypeError","Infinity","Number","isInteger","isRoundingAndNegative","Math","abs","power","result","toPrecision","module","exports","bind","undefined","up","down"],"mappings":"AAAA;;AAEA,SAASA,KAAT,CAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,SAA/B,EAA0C;AACzC,MAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC/B,UAAM,IAAIE,SAAJ,CAAc,+BAAd,CAAN;AACA;;AAED,MAAID,SAAS,KAAKE,QAAlB,EAA4B;AAC3B,WAAOH,MAAP;AACA;;AAED,MAAI,CAACI,MAAM,CAACC,SAAP,CAAiBJ,SAAjB,CAAL,EAAkC;AACjC,UAAM,IAAIC,SAAJ,CAAc,qCAAd,CAAN;AACA;;AAED,QAAMI,qBAAqB,GAAGP,MAAM,KAAK,OAAX,IAAsBC,MAAM,GAAG,CAA7D;;AACA,MAAIM,qBAAJ,EAA2B;AAC1BN,IAAAA,MAAM,GAAGO,IAAI,CAACC,GAAL,CAASR,MAAT,CAAT;AACA;;AAED,QAAMS,KAAK,GAAG,MAAMR,SAApB;AAEA,MAAIS,MAAM,GAAGH,IAAI,CAACR,MAAD,CAAJ,CAAaK,MAAM,CAAC,CAACJ,MAAM,GAAGS,KAAV,EAAiBE,WAAjB,CAA6B,EAA7B,CAAD,CAAnB,IAAyDF,KAAtE;;AAEA,MAAIH,qBAAJ,EAA2B;AAC1BI,IAAAA,MAAM,GAAG,CAACA,MAAV;AACA;;AAED,SAAOA,MAAP;AACA;;AAEDE,MAAM,CAACC,OAAP,GAAiBf,KAAK,CAACgB,IAAN,CAAWC,SAAX,EAAsB,OAAtB,CAAjB;AACAH,MAAM,CAACC,OAAP,CAAeG,EAAf,GAAoBlB,KAAK,CAACgB,IAAN,CAAWC,SAAX,EAAsB,MAAtB,CAApB;AACAH,MAAM,CAACC,OAAP,CAAeI,IAAf,GAAsBnB,KAAK,CAACgB,IAAN,CAAWC,SAAX,EAAsB,OAAtB,CAAtB","sourcesContent":["'use strict';\n\nfunction round(method, number, precision) {\n\tif (typeof number !== 'number') {\n\t\tthrow new TypeError('Expected value to be a number');\n\t}\n\n\tif (precision === Infinity) {\n\t\treturn number;\n\t}\n\n\tif (!Number.isInteger(precision)) {\n\t\tthrow new TypeError('Expected precision to be an integer');\n\t}\n\n\tconst isRoundingAndNegative = method === 'round' && number < 0;\n\tif (isRoundingAndNegative) {\n\t\tnumber = Math.abs(number);\n\t}\n\n\tconst power = 10 ** precision;\n\n\tlet result = Math[method](Number((number * power).toPrecision(15))) / power;\n\n\tif (isRoundingAndNegative) {\n\t\tresult = -result;\n\t}\n\n\treturn result;\n}\n\nmodule.exports = round.bind(undefined, 'round');\nmodule.exports.up = round.bind(undefined, 'ceil');\nmodule.exports.down = round.bind(undefined, 'floor');\n"]},"metadata":{},"sourceType":"script"}