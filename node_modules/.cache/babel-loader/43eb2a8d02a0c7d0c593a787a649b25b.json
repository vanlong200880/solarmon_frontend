{"ast":null,"code":"import React from 'react';\nimport ChartDeviceJsx from './ChartDevice.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport AnalyticsService from '../../../../../../services/AnalyticsService';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport moment from 'moment';\n\nclass ChartDevice extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.callBackLoadChart = (dataDevice, dataParameter) => {\n      var self = this;\n      if (!Libs.isArrayData(dataDevice) || !Libs.isArrayData(dataParameter)) return;\n      this.setState({\n        dataDevice: dataDevice,\n        dataParameter: dataParameter\n      }, () => {\n        self.loadDataChart();\n      });\n    };\n\n    this.changeViewMinute = value => {\n      var chartParams = this.state.chartParams,\n          self = this;\n      if (Libs.isBlank(value)) return;\n      chartParams.data_send_time = value;\n      this.setState({\n        chartParams: chartParams\n      }, () => {\n        self.loadDataChart();\n      });\n    };\n\n    this.handleClickOutside = event => {\n      const {\n        target\n      } = event;\n      var {\n        chartParams\n      } = this.state,\n          self = this;\n\n      if (!this.wrapperRef.current.contains(target)) {\n        if (chartParams.show_filter) {\n          chartParams.show_filter = false;\n          self.setState({\n            chartParams: chartParams\n          });\n        }\n      }\n    };\n\n    this.onClickFilter = value => {\n      var {\n        chartParams,\n        dataFilter,\n        curItem\n      } = this.state;\n      var self = this;\n      if (!Libs.isArrayData(dataFilter)) return;\n      var item = Libs.find(dataFilter, 'id', value);\n      if (Libs.isObjectEmpty(item)) return;\n      chartParams.id_filter = item.id;\n      chartParams.text_filter = item.text;\n      chartParams.show_filter = false;\n      chartParams.showNextBtn = false;\n\n      switch (value) {\n        case 'today':\n          chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n          chartParams.max_date = Libs.getCurrentMMDDYYYYHI();\n          break;\n\n        case '3_day':\n          chartParams.end_date = Libs.getCurrentDDMMYYYY();\n          chartParams.start_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n          chartParams.start_max_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n          chartParams.max_date = Libs.getCurrentDDMMYYYY();\n          break;\n\n        case 'this_month':\n          chartParams.max_date = moment().format('MM/YYYY');\n          chartParams.end_date = moment().format('MM/YYYY');\n          break;\n\n        case 'last_month':\n          chartParams.max_date = moment().format('MM/YYYY');\n          var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n          var ylast = tlast.getFullYear(),\n              mlast = tlast.getMonth();\n          chartParams.end_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).endOf('month').format('MM/YYYY');\n          chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).format('MM/YYYY');\n          break;\n\n        case 'lifetime':\n        case '12_month':\n          chartParams.max_date = moment().format('MM/YYYY');\n          chartParams.end_date = moment().format('MM/YYYY');\n          chartParams.start_date = moment(Libs.addMonths(Libs.getCurrentMMDDYYYYHI(), -12)).format('MM/YYYY');\n          break;\n        // case 'lifetime':\n        //     chartParams.start_date = moment(curItem.commissioning).format('MM/DD/YYYY HH:mm:ss');\n        //     chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n        //     break;\n      }\n\n      this.setState({\n        chartParams: chartParams\n      }, () => {\n        self.loadDataChart();\n      });\n    };\n\n    this.onClickShowFilter = () => {\n      var {\n        chartParams\n      } = this.state;\n      chartParams.show_filter = true;\n      this.setState({\n        chartParams: chartParams\n      });\n    };\n\n    this.downloadData = () => {\n      var {\n        dataExport\n      } = this.state;\n\n      if (Libs.isArrayData(dataExport)) {\n        var SheetNames = [],\n            Sheets = {};\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n        const fileExtension = '.xlsx';\n\n        for (var i = 0; i < dataExport.length; i++) {\n          SheetNames.push(dataExport[i].name);\n          var dataSheets = [];\n          var dataRows = dataExport[i].data;\n\n          if (Libs.isArrayData(dataRows)) {\n            dataRows.map((item, index) => {\n              dataSheets.push(item);\n            });\n          }\n\n          const ws = XLSX.utils.json_to_sheet(dataSheets, {\n            skipHeader: false\n          });\n          Sheets[dataExport[i].name] = ws;\n        }\n\n        const wb = {\n          SheetNames: SheetNames,\n          Sheets: Sheets\n        };\n        const excelBuffer = XLSX.write(wb, {\n          bookType: 'xlsx',\n          type: 'array'\n        });\n        const data = new Blob([excelBuffer], {\n          type: fileType\n        });\n        FileSaver.saveAs(data, \"export-charting-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n      }\n    };\n\n    this.state = {\n      hash_id: this.props.hash_id,\n      curItem: {\n        data_send_time: 1,\n        type: 2\n      },\n      dataExport: [],\n      dataListDevice: [],\n      dataChartDevice: [],\n      chartToolOption: {},\n      dataParameter: [],\n      dataDevice: [],\n      dataFilter: [{\n        id: \"today\",\n        text: \"Today\"\n      }, {\n        id: \"3_day\",\n        text: \"3 days\"\n      }, {\n        id: \"this_month\",\n        text: \"This month\"\n      }, {\n        id: \"last_month\",\n        text: \"Last month\"\n      }, {\n        id: \"12_month\",\n        text: \"Last 12 months\"\n      }, {\n        id: \"lifetime\",\n        text: \"Lifetime\"\n      }],\n      chartParams: {\n        id_filter: 'today',\n        text_filter: 'Today',\n        show_filter: false,\n        max_date: Libs.getCurrentDDMMYYYY(),\n        data_send_time: 1\n      }\n    };\n    this.jsxTemplate = ChartDeviceJsx;\n    this.wrapperRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this.getListDeviceByProject();\n    this.loadConfigDefaultDate();\n    document.addEventListener('click', this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleClickOutside);\n  }\n\n  loadDataChart() {\n    var {\n      chartParams,\n      dataDevice,\n      dataParameter\n    } = this.state,\n        self = this;\n    if (!Libs.isArrayData(dataDevice) || !Libs.isArrayData(dataParameter)) return;\n    var chartToolOption = {};\n    var params = {};\n\n    switch (chartParams.id_filter) {\n      case 'today':\n        params.start_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\");\n        params.end_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\");\n        break;\n\n      case '3_day':\n        params.start_date = Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\";\n        params.end_date = Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\";\n        break;\n\n      case 'last_month':\n      case 'this_month':\n        params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n        params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n        break;\n\n      case 'lifetime':\n      case '12_month':\n        params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n        params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n        break;\n    }\n\n    params.id_language = this.employee.id_language;\n    params.id_employee = this.employee.id_employee;\n    params.dataDevice = dataDevice;\n    params.filterBy = chartParams.id_filter;\n    params.data_send_time = chartParams.data_send_time;\n    let elHeight = document.getElementById('main-chart-view').clientHeight - 60;\n    chartToolOption.chart = {\n      zoomType: 'xy',\n      height: elHeight ? elHeight : null\n    };\n    chartToolOption.credits = {\n      enabled: false\n    };\n    chartToolOption.exporting = {\n      enabled: true\n    };\n    chartToolOption.title = {\n      text: null,\n      align: 'left'\n    };\n    chartToolOption.xAxis = [];\n    chartToolOption.yAxis = [];\n    chartToolOption.tooltip = {\n      shared: true,\n      crosshairs: true\n    };\n    chartToolOption.plotOptions = {\n      series: {\n        turboThreshold: 5000\n      },\n      column: {\n        stacking: 'normal'\n      }\n    };\n    chartToolOption.series = [];\n    var tickInterval = 24;\n\n    switch (chartParams.id_filter) {\n      case 'today':\n        if (chartParams.data_send_time == 1) {\n          tickInterval = 24;\n        } else if (chartParams.data_send_time == 2) {\n          tickInterval = 12;\n        } else if (chartParams.data_send_time == 3) {\n          tickInterval = 2;\n        }\n\n        break;\n\n      case '3_day':\n        if (chartParams.data_send_time == 1) {\n          tickInterval = 168;\n        } else if (chartParams.data_send_time == 2) {\n          tickInterval = 57;\n        } else if (chartParams.data_send_time == 3) {\n          tickInterval = 15;\n        }\n\n        break;\n\n      case 'last_month':\n      case 'this_month':\n        tickInterval = 4;\n        break;\n\n      case 'lifetime':\n      case '12_month':\n        tickInterval = 1;\n        break;\n    }\n\n    var paramerter = [];\n\n    for (var j = 0, leng = dataParameter.length; j < leng; j++) {\n      var childs = dataParameter[j].dataParameter;\n      if (!Libs.isArrayData(childs)) return;\n      var dataChildTmp = childs.filter(item => item.is_checked == 1);\n\n      if (Libs.isArrayData(dataChildTmp)) {\n        paramerter.push(...dataChildTmp);\n      }\n    }\n\n    if (!Libs.isArrayData(paramerter)) return;\n    params.type = 'customer';\n    AnalyticsService.instance.getChartByListDevice(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        var categories = [],\n            series = [],\n            yAxis = [];\n        var yAxisUnit = [];\n\n        for (var i = 0; i < paramerter.length; i++) {\n          if (i === 0) {\n            yAxisUnit.push(paramerter[i]);\n            yAxis.push({\n              gridLineWidth: 1,\n              lineWidth: 1,\n              labels: {\n                enabled: true\n              },\n              title: {\n                text: !Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : '',\n                enabled: true\n              },\n              opposite: false\n            });\n          } else {\n            var findyAxisUnit = Libs.find(yAxisUnit, 'unit', paramerter[i].unit);\n\n            if (Libs.isObjectEmpty(findyAxisUnit)) {\n              yAxisUnit.push(paramerter[i]);\n              yAxis.push({\n                gridLineWidth: 1,\n                lineWidth: 1,\n                labels: {\n                  enabled: true\n                },\n                title: {\n                  text: !Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : '',\n                  enabled: true\n                },\n                opposite: true\n              });\n            }\n          }\n\n          var idyAxis = 0;\n\n          if (Libs.isArrayData(yAxisUnit)) {\n            yAxisUnit.map((h, index) => {\n              if (paramerter[i].unit == h.unit) {\n                idyAxis = index;\n              }\n            });\n          }\n\n          for (let k = 0, lenk = data.length; k < lenk; k++) {\n            var seriesItem = {\n              name: data[k].device_name + \" - \" + paramerter[i].name,\n              type: 'spline',\n              yAxis: idyAxis,\n              tooltip: {\n                valueSuffix: ' ' + (!Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : '')\n              },\n              data: [],\n              gridLineWidth: 1,\n              lineWidth: 1,\n              marker: {\n                radius: 1.5,\n                enabled: false\n              }\n            };\n            var dataRow = data[k].data;\n            var itemData = [];\n\n            for (let j = 0; j < dataRow.length; j++) {\n              // generate series\n              var value = !Libs.isBlank(dataRow[j][paramerter[i].slug]) && dataRow[j][paramerter[i].slug] > 0 ? dataRow[j][paramerter[i].slug] : null;\n              itemData.push([dataRow[j].time_full, value]);\n              categories.push(dataRow[j].categories_time);\n            }\n\n            seriesItem.data = itemData;\n            series.push(seriesItem);\n          }\n        }\n\n        if (Libs.isArrayData(categories) && Libs.isArrayData(series) && Libs.isArrayData(yAxis)) {\n          chartToolOption.xAxis = [{\n            categories: categories,\n            alignTicks: true,\n            tickInterval: tickInterval\n          }];\n          chartToolOption.series = series;\n          chartToolOption.yAxis = yAxis;\n          this.setState({\n            chartToolOption: chartToolOption,\n            dataChartDevice: data,\n            dataExport: data\n          });\n        }\n      } else {\n        self.setState({\n          chartToolOption: {},\n          dataChartDevice: [],\n          dataExport: []\n        });\n      }\n    });\n  }\n\n  loadConfigDefaultDate() {\n    var {\n      chartParams\n    } = this.state;\n\n    switch (chartParams.id_filter) {\n      case 'today':\n        chartParams.max_date = Libs.getCurrentMMDDYYYYHI();\n        chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n        break;\n\n      case '3_day':\n        chartParams.end_date = Libs.getCurrentDDMMYYYY();\n        chartParams.start_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n        chartParams.start_max_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n        break;\n\n      case 'this_month':\n        chartParams.max_date = moment().format('MM/YYYY');\n        chartParams.end_date = moment().format('MM/YYYY');\n        break;\n\n      case 'last_month':\n        chartParams.max_date = moment().format('MM/YYYY');\n        var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n        var ylast = tlast.getFullYear(),\n            mlast = tlast.getMonth();\n        chartParams.end_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).endOf('month').format('MM/YYYY');\n        chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).format('MM/YYYY');\n        break;\n\n      case 'lifetime':\n      case '12_month':\n        chartParams.max_date = moment().format('MM/YYYY');\n        chartParams.end_date = moment().format('MM/YYYY');\n        var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n        var ylast = tlast.getFullYear(),\n            mlast = tlast.getMonth();\n        chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -12)).format('MM/YYYY');\n        chartParams.max_start_date = moment(Libs.addMonths(Libs.getCurrentMMDDYYYYHI(), -12)).format('MM/YYYY');\n        break;\n    }\n\n    this.setState({\n      chartParams: chartParams\n    });\n  }\n\n  /**\n   * setValue method to Input\n   * @author Long.Pham 20/05/2021\n   */\n  handleInputDateChange(event) {\n    let target = event.target;\n    let name = target.name;\n    var self = this;\n    let value = target.value;\n\n    if (target.type === 'checkbox') {\n      value = target.checked ? 1 : 0;\n    }\n\n    if (name) {\n      let {\n        chartParams\n      } = this.state;\n\n      switch (chartParams.id_filter) {\n        case 'today':\n        case 'last_month':\n        case 'this_month':\n          chartParams.start_date = value;\n          chartParams[name] = value;\n          break;\n\n        case '3_day':\n          if (name == 'start_date') {\n            chartParams.start_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n              chartParams.end_date = moment(Libs.addDays(currentDate, 2)).format('DD/MM/YYYY');\n            }\n          }\n\n          if (name == 'end_date') {\n            chartParams.end_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n              chartParams.start_date = moment(Libs.addDays(currentDate, -2)).format('DD/MM/YYYY');\n            }\n          }\n\n          break;\n\n        case '12_month':\n          if (name == 'start_date') {\n            chartParams.start_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n              const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n              chartParams.end_date = moment(Libs.addMonths(startOfMonth, 12)).format('MM/YYYY');\n            }\n          }\n\n          if (name == 'end_date') {\n            chartParams.end_date = value;\n            let arrDate = value.split('/');\n\n            if (arrDate) {\n              let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n              const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n              chartParams.start_date = moment(Libs.addMonths(startOfMonth, -12)).format('MM/YYYY');\n            }\n          }\n\n          break;\n      }\n\n      self.setState({\n        chartParams: chartParams\n      });\n      self.loadDataChart();\n    }\n  }\n\n  /**\n   * get list\n   * @author Long.Pham 2019-06-03\n   */\n  getListDeviceByProject() {\n    let self = this;\n    let params = {\n      hash_id: this.state.hash_id,\n      id_employee: this.employee.id_employee,\n      id_language: this.employee.id_language\n    };\n    AnalyticsService.instance.getListDeviceByProject(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataListDevice: data\n        });\n      } else {\n        self.setState({\n          dataListDevice: []\n        });\n      }\n\n      self.forceUpdate();\n    });\n  }\n\n  render() {\n    return this.jsxTemplate.call(this);\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(ChartDevice);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/src/containers/views/desktop/ModuleProject/Analytics/ChartDevice/ChartDevice.js"],"names":["React","ChartDeviceJsx","BaseComponent","Libs","withTranslation","AnalyticsService","FileSaver","XLSX","moment","ChartDevice","constructor","props","context","callBackLoadChart","dataDevice","dataParameter","self","isArrayData","setState","loadDataChart","changeViewMinute","value","chartParams","state","isBlank","data_send_time","handleClickOutside","event","target","wrapperRef","current","contains","show_filter","onClickFilter","dataFilter","curItem","item","find","isObjectEmpty","id_filter","id","text_filter","text","showNextBtn","end_date","getCurrentMMDDYYYYHI","max_date","getCurrentDDMMYYYY","start_date","addDays","format","start_max_date","tlast","Date","ylast","getFullYear","mlast","getMonth","addMonths","endOf","onClickShowFilter","downloadData","dataExport","SheetNames","Sheets","fileType","fileExtension","i","length","push","name","dataSheets","dataRows","data","map","index","ws","utils","json_to_sheet","skipHeader","wb","excelBuffer","write","bookType","type","Blob","saveAs","hash_id","dataListDevice","dataChartDevice","chartToolOption","jsxTemplate","createRef","componentDidMount","getListDeviceByProject","loadConfigDefaultDate","document","addEventListener","componentWillUnmount","removeEventListener","params","convertAllFormatDate","dateFormat","id_language","employee","id_employee","filterBy","elHeight","getElementById","clientHeight","chart","zoomType","height","credits","enabled","exporting","title","align","xAxis","yAxis","tooltip","shared","crosshairs","plotOptions","series","turboThreshold","column","stacking","tickInterval","paramerter","j","leng","childs","dataChildTmp","filter","is_checked","instance","getChartByListDevice","total_row","categories","yAxisUnit","gridLineWidth","lineWidth","labels","unit","opposite","findyAxisUnit","idyAxis","h","k","lenk","seriesItem","device_name","valueSuffix","marker","radius","dataRow","itemData","slug","time_full","categories_time","alignTicks","max_start_date","handleInputDateChange","checked","arrDate","split","currentDate","startOfMonth","startOf","forceUpdate","render","call","HighOrderComponentTranslated"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ChartDeviceJsx from './ChartDevice.jsx';\nimport BaseComponent from '../../../../../BaseComponent';\nimport Libs from '../../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport AnalyticsService from '../../../../../../services/AnalyticsService';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport moment from 'moment';\n\nclass ChartDevice extends BaseComponent {\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            hash_id: this.props.hash_id,\n            curItem: {\n                data_send_time: 1,\n                type: 2\n            },\n            dataExport: [],\n            dataListDevice: [],\n            dataChartDevice: [],\n            chartToolOption: {},\n            dataParameter: [],\n            dataDevice: [],\n            dataFilter: [\n                { id: \"today\", text: \"Today\" },\n                { id: \"3_day\", text: \"3 days\" },\n                { id: \"this_month\", text: \"This month\" },\n                { id: \"last_month\", text: \"Last month\" },\n                { id: \"12_month\", text: \"Last 12 months\" },\n                { id: \"lifetime\", text: \"Lifetime\" }\n            ],\n\n            chartParams: {\n                id_filter: 'today',\n                text_filter: 'Today',\n                show_filter: false,\n                max_date: Libs.getCurrentDDMMYYYY(),\n                data_send_time: 1\n            },\n        };\n\n        this.jsxTemplate = ChartDeviceJsx;\n        this.wrapperRef = React.createRef();\n\n    }\n\n    componentDidMount() {\n        this.getListDeviceByProject();\n        this.loadConfigDefaultDate();\n        document.addEventListener('click', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('click', this.handleClickOutside)\n    }\n\n\n    callBackLoadChart = (dataDevice, dataParameter) => {\n        var self = this;\n        if (!Libs.isArrayData(dataDevice) || !Libs.isArrayData(dataParameter)) return;\n        this.setState({\n            dataDevice: dataDevice,\n            dataParameter: dataParameter\n        }, () => {\n            self.loadDataChart();\n        })\n\n    }\n\n\n    loadDataChart() {\n        var { chartParams, dataDevice, dataParameter } = this.state, self = this;\n        if (!Libs.isArrayData(dataDevice) || !Libs.isArrayData(dataParameter)) return;\n        var chartToolOption = {};\n        var params = {};\n        switch (chartParams.id_filter) {\n            case 'today':\n                params.start_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\");\n                params.end_date = Libs.convertAllFormatDate(Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\");\n                break;\n            case '3_day':\n                params.start_date = Libs.dateFormat(chartParams.start_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 00:00:00\";\n                params.end_date = Libs.dateFormat(chartParams.end_date, \"MM/DD/YYYY\", \"MM/DD/YYYY\") + \" 19:00:00\";\n                break;\n            case 'last_month':\n            case 'this_month':\n                params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n                params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n                break;\n            case 'lifetime':\n            case '12_month':\n                params.start_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.start_date + \" 00:00:00\";\n                params.end_date = Libs.dateFormat(Libs.getCurrentMMDDYYYYHI(), \"DD\", \"MM/DD/YYYY\") + \"/\" + chartParams.end_date + \" 19:00:00\";\n                break;\n        }\n\n\n\n        params.id_language = this.employee.id_language;\n        params.id_employee = this.employee.id_employee;\n        params.dataDevice = dataDevice;\n        params.filterBy = chartParams.id_filter;\n        params.data_send_time = chartParams.data_send_time;\n\n        let elHeight = (document.getElementById('main-chart-view').clientHeight) - 60;\n\n        chartToolOption.chart = { zoomType: 'xy', height: elHeight ? elHeight : null };\n        chartToolOption.credits = { enabled: false };\n        chartToolOption.exporting = { enabled: true };\n        chartToolOption.title = {\n            text: null,\n            align: 'left'\n        };\n        chartToolOption.xAxis = [];\n        chartToolOption.yAxis = [];\n        chartToolOption.tooltip = {\n            shared: true,\n            crosshairs: true\n        };\n        chartToolOption.plotOptions = {\n            series: {\n                turboThreshold: 5000\n            },\n            column: {\n                stacking: 'normal'\n            }\n        };\n        chartToolOption.series = [];\n        var tickInterval = 24;\n        switch (chartParams.id_filter) {\n            case 'today':\n                if (chartParams.data_send_time == 1) {\n                    tickInterval = 24;\n                } else if (chartParams.data_send_time == 2) {\n                    tickInterval = 12;\n                } else if (chartParams.data_send_time == 3) {\n                    tickInterval = 2;\n                }\n\n                break;\n            case '3_day':\n                if (chartParams.data_send_time == 1) {\n                    tickInterval = 168;\n                } else if (chartParams.data_send_time == 2) {\n                    tickInterval = 57;\n                } else if (chartParams.data_send_time == 3) {\n                    tickInterval = 15;\n                }\n                break;\n            case 'last_month':\n            case 'this_month':\n                tickInterval = 4;\n                break;\n            case 'lifetime':\n            case '12_month':\n                tickInterval = 1;\n                break;\n        }\n\n        var paramerter = [];\n        for (var j = 0, leng = dataParameter.length; j < leng; j++) {\n            var childs = dataParameter[j].dataParameter;\n            if (!Libs.isArrayData(childs)) return;\n            var dataChildTmp = childs.filter((item) => item.is_checked == 1);\n            if (Libs.isArrayData(dataChildTmp)) {\n                paramerter.push(...dataChildTmp);\n            }\n        }\n        if (!Libs.isArrayData(paramerter)) return;\n        params.type = 'customer';\n        \n        AnalyticsService.instance.getChartByListDevice(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                var categories = [], series = [], yAxis = [];\n                var yAxisUnit = [];\n                for (var i = 0; i < paramerter.length; i++) {\n                    if (i === 0) {\n                        yAxisUnit.push(paramerter[i]);\n                        yAxis.push({\n                            gridLineWidth: 1,\n                            lineWidth: 1,\n                            labels: {\n                                enabled: true\n                            },\n                            title: {\n                                text: (!Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : ''),\n                                enabled: true\n                            },\n                            opposite: false\n                        });\n                    } else {\n                        var findyAxisUnit = Libs.find(yAxisUnit, 'unit', paramerter[i].unit);\n                        if (Libs.isObjectEmpty(findyAxisUnit)) {\n                            yAxisUnit.push(paramerter[i]);\n                            yAxis.push({\n                                gridLineWidth: 1,\n                                lineWidth: 1,\n                                labels: {\n                                    enabled: true\n                                },\n                                title: {\n                                    text: (!Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : ''),\n                                    enabled: true\n                                },\n                                opposite: true\n                            });\n                        }\n                    }\n\n                    var idyAxis = 0;\n\n                    if (Libs.isArrayData(yAxisUnit)) {\n                        yAxisUnit.map((h, index) => {\n                            if (paramerter[i].unit == h.unit) {\n                                idyAxis = index;\n                            }\n                        })\n                    }\n\n                    for (let k = 0, lenk = data.length; k < lenk; k++) {\n                        var seriesItem = {\n                            name: data[k].device_name + \" - \" + paramerter[i].name,\n                            type: 'spline',\n                            yAxis: idyAxis,\n                            tooltip: {\n                                valueSuffix: ' ' + (!Libs.isBlank(paramerter[i].unit) ? paramerter[i].unit : '')\n                            },\n                            data: [],\n                            gridLineWidth: 1,\n                            lineWidth: 1,\n                            marker: {\n                                radius: 1.5,\n                                enabled: false\n                            }\n                        };\n\n                        var dataRow = data[k].data;\n                        var itemData = [];\n                        for (let j = 0; j < dataRow.length; j++) {\n                            // generate series\n                            var value = (!Libs.isBlank(dataRow[j][paramerter[i].slug]) && dataRow[j][paramerter[i].slug] > 0) ? dataRow[j][paramerter[i].slug] : null;\n                            itemData.push([dataRow[j].time_full, value]);\n                            categories.push(dataRow[j].categories_time);\n                        }\n\n                        seriesItem.data = itemData;\n                        series.push(seriesItem);\n                    }\n                }\n\n                if (Libs.isArrayData(categories) && Libs.isArrayData(series) && Libs.isArrayData(yAxis)) {\n                    chartToolOption.xAxis = [\n                        {\n                            categories: categories,\n                            alignTicks: true,\n                            tickInterval: tickInterval\n                        }\n                    ];\n                    chartToolOption.series = series;\n                    chartToolOption.yAxis = yAxis;\n\n                    this.setState({\n                        chartToolOption: chartToolOption,\n                        dataChartDevice: data,\n                        dataExport: data\n                    })\n                }\n            } else {\n                self.setState({\n                    chartToolOption: {},\n                    dataChartDevice: [],\n                    dataExport: []\n                });\n            }\n        });\n    }\n\n\n    changeViewMinute = (value) => {\n        var chartParams = this.state.chartParams, self = this;\n        if (Libs.isBlank(value)) return;\n        chartParams.data_send_time = value;\n        this.setState({ chartParams: chartParams }, () => {\n            self.loadDataChart();\n        });\n    }\n\n    handleClickOutside = (event) => {\n        const { target } = event;\n        var { chartParams } = this.state, self = this;\n        if (!this.wrapperRef.current.contains(target)) {\n            if (chartParams.show_filter) {\n                chartParams.show_filter = false;\n                self.setState({\n                    chartParams: chartParams\n                })\n            }\n        }\n    }\n\n    loadConfigDefaultDate() {\n        var { chartParams } = this.state;\n        switch (chartParams.id_filter) {\n            case 'today':\n                chartParams.max_date = Libs.getCurrentMMDDYYYYHI();\n                chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n                break;\n            case '3_day':\n                chartParams.end_date = Libs.getCurrentDDMMYYYY();\n                chartParams.start_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n                chartParams.start_max_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n                break;\n            case 'this_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                chartParams.end_date = moment().format('MM/YYYY');\n                break;\n            case 'last_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n                var ylast = tlast.getFullYear(), mlast = tlast.getMonth();\n                chartParams.end_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).endOf('month').format('MM/YYYY');\n                chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).format('MM/YYYY');\n\n                break;\n            case 'lifetime':\n            case '12_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                chartParams.end_date = moment().format('MM/YYYY');\n                var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n                var ylast = tlast.getFullYear(), mlast = tlast.getMonth();\n                chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -12)).format('MM/YYYY');\n                chartParams.max_start_date = moment(Libs.addMonths(Libs.getCurrentMMDDYYYYHI(), -12)).format('MM/YYYY');\n                break;\n        }\n        this.setState({\n            chartParams: chartParams\n        })\n    }\n\n    onClickFilter = (value) => {\n        var { chartParams, dataFilter, curItem } = this.state;\n        var self = this;\n        if (!Libs.isArrayData(dataFilter)) return;\n        var item = Libs.find(dataFilter, 'id', value);\n        if (Libs.isObjectEmpty(item)) return;\n\n        chartParams.id_filter = item.id;\n        chartParams.text_filter = item.text;\n        chartParams.show_filter = false;\n        chartParams.showNextBtn = false;\n\n        switch (value) {\n            case 'today':\n                chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n                chartParams.max_date = Libs.getCurrentMMDDYYYYHI();\n                break;\n            case '3_day':\n                chartParams.end_date = Libs.getCurrentDDMMYYYY();\n                chartParams.start_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n                chartParams.start_max_date = moment(Libs.addDays(Libs.getCurrentMMDDYYYYHI(), -2)).format('DD/MM/YYYY');\n                chartParams.max_date = Libs.getCurrentDDMMYYYY();\n                break;\n\n            case 'this_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                chartParams.end_date = moment().format('MM/YYYY');\n                break;\n            case 'last_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                var tlast = new Date(Libs.getCurrentMMDDYYYYHI());\n                var ylast = tlast.getFullYear(), mlast = tlast.getMonth();\n                chartParams.end_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).endOf('month').format('MM/YYYY');\n                chartParams.start_date = moment(Libs.addMonths(new Date(ylast, mlast, 1), -1)).format('MM/YYYY');\n                break;\n\n            case 'lifetime':\n            case '12_month':\n                chartParams.max_date = moment().format('MM/YYYY');\n                chartParams.end_date = moment().format('MM/YYYY');\n                chartParams.start_date = moment(Libs.addMonths(Libs.getCurrentMMDDYYYYHI(), -12)).format('MM/YYYY');\n\n                break;\n            // case 'lifetime':\n            //     chartParams.start_date = moment(curItem.commissioning).format('MM/DD/YYYY HH:mm:ss');\n            //     chartParams.end_date = Libs.getCurrentMMDDYYYYHI();\n            //     break;\n        }\n\n        this.setState({\n            chartParams: chartParams\n        }, () => {\n            self.loadDataChart();\n        });\n    }\n\n    /**\n     * setValue method to Input\n     * @author Long.Pham 20/05/2021\n     */\n    handleInputDateChange(event) {\n        let target = event.target;\n        let name = target.name;\n        var self = this;\n        let value = target.value;\n        if (target.type === 'checkbox') {\n            value = target.checked ? 1 : 0;\n        }\n\n        if (name) {\n            let { chartParams } = this.state;\n            switch (chartParams.id_filter) {\n                case 'today':\n                case 'last_month':\n                case 'this_month':\n                    chartParams.start_date = value;\n                    chartParams[name] = value;\n                    break;\n                case '3_day':\n                    if (name == 'start_date') {\n                        chartParams.start_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n                            chartParams.end_date = moment(Libs.addDays(currentDate, 2)).format('DD/MM/YYYY');\n                        }\n                    }\n\n                    if (name == 'end_date') {\n                        chartParams.end_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[2] + '/' + arrDate[1] + \"/\" + arrDate[0];\n                            chartParams.start_date = moment(Libs.addDays(currentDate, -2)).format('DD/MM/YYYY');\n                        }\n                    }\n\n                    break;\n                case '12_month':\n                    if (name == 'start_date') {\n                        chartParams.start_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n                            const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n                            chartParams.end_date = moment(Libs.addMonths(startOfMonth, 12)).format('MM/YYYY');\n                        }\n                    }\n\n                    if (name == 'end_date') {\n                        chartParams.end_date = value;\n                        let arrDate = value.split('/');\n                        if (arrDate) {\n                            let currentDate = arrDate[1] + '/' + arrDate[0] + '/01';\n                            const startOfMonth = moment(currentDate).startOf('month').format('YYYY-MM-DD');\n                            chartParams.start_date = moment(Libs.addMonths(startOfMonth, -12)).format('MM/YYYY');\n                        }\n                    }\n                    break;\n            }\n\n            self.setState({\n                chartParams: chartParams\n            });\n            self.loadDataChart();\n        }\n    }\n\n\n\n    onClickShowFilter = () => {\n        var { chartParams } = this.state;\n        chartParams.show_filter = true;\n        this.setState({\n            chartParams: chartParams\n        });\n    }\n\n    /**\n     * get list\n     * @author Long.Pham 2019-06-03\n     */\n    getListDeviceByProject() {\n        let self = this;\n        let params = {\n            hash_id: this.state.hash_id,\n            id_employee: this.employee.id_employee,\n            id_language: this.employee.id_language\n        };\n\n        AnalyticsService.instance.getListDeviceByProject(params, (data, total_row) => {\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataListDevice: data\n                });\n            } else {\n                self.setState({\n                    dataListDevice: []\n                });\n            }\n            self.forceUpdate();\n        });\n    }\n\n\n\n    downloadData = () => {\n        var { dataExport } = this.state;\n        if (Libs.isArrayData(dataExport)) {\n            var SheetNames = [], Sheets = {};\n            const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n            const fileExtension = '.xlsx';\n            for (var i = 0; i < dataExport.length; i++) {\n                SheetNames.push(dataExport[i].name);\n                var dataSheets = [];\n                var dataRows = dataExport[i].data;\n                if(Libs.isArrayData(dataRows)){\n                    dataRows.map((item, index) => {\n                        dataSheets.push(item);\n                    })\n                }\n                const ws = XLSX.utils.json_to_sheet(dataSheets, { skipHeader: false });\n                Sheets[dataExport[i].name] = ws;\n            }\n\n            const wb = {\n              SheetNames: SheetNames,\n              Sheets: Sheets\n            };\n            const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n            const data = new Blob([excelBuffer], { type: fileType });\n            FileSaver.saveAs(data, \"export-charting-\" + moment().format('YYYY-MM-DD_hh:mm:ss') + fileExtension);\n        }\n    }\n    \n\n    render() {\n        return this.jsxTemplate.call(this)\n    }\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(ChartDevice)\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}