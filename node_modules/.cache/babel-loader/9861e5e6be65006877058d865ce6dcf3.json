{"ast":null,"code":"import DashBoardJsx from './DashBoard.jsx';\nimport MapViewJsx from './MapView.jsx';\nimport BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport ClientProjectService from '../../../../../services/ClientProjectService';\n\nclass DashBoard extends BaseComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.onClickChangeMode = mode => {\n      var self = this;\n      this.setState({\n        mode: mode\n      }, () => {\n        self.jsxTemplate = self.getTemplate();\n        self.forceUpdate();\n      });\n    };\n\n    this.handleMouseOver = (marker, event) => {\n      this.setState({\n        showInfoWindow: marker\n      });\n    };\n\n    this.handleMouseExit = (marker, event) => {\n      this.setState({\n        showInfoWindow: false\n      });\n    };\n\n    this.onMouseoverMarker = (marker, event) => {\n      this.setState({\n        showIconHover: marker\n      });\n    };\n\n    this.mouseMoveOutOfMarker = (marker, event) => {\n      this.setState({\n        showIconHover: false\n      });\n    };\n\n    this.state = {\n      curItem: {},\n      showInfoWindow: false,\n      showIconHover: false,\n      mode: 'grid',\n      dataList: [],\n      dataListSummary: [],\n      searchParam: {\n        limit: 16,\n        offset: 0,\n        index: 1\n      },\n      formSearch: false\n    };\n    this.paging = {\n      total: 0,\n      current: 1,\n      currentInput: 1\n    };\n    this.jsxTemplate = this.getTemplate();\n    this.inputChangedHandler = this.inputChangedHandler.bind(this);\n    this.inputChangedEnter = this.inputChangedEnter.bind(this);\n    this.inputChangedBlue = this.inputChangedBlue.bind(this);\n  }\n\n  componentDidMount() {\n    this.getList();\n  }\n\n  getTemplate() {\n    let modView = this.state.mode;\n\n    switch (modView) {\n      case 'map':\n        return MapViewJsx;\n\n      default:\n        return DashBoardJsx;\n    }\n  }\n  /**\n   * get list\n   * @author Long.Pham 2019-06-03\n   */\n\n\n  getList() {\n    let self = this;\n    let params = this.state.searchParam;\n    params.id_language = this.employee.id_language;\n    params.id_employee = this.employee.id_employee;\n    params.type = 'customer';\n    ClientProjectService.instance.getListProjectByEmplpyee(params, (data, total_row) => {\n      if (Libs.isArrayData(data)) {\n        self.setState({\n          dataList: data\n        });\n        var total = parseInt(total_row / self.state.searchParam.limit);\n\n        if (total_row % self.state.searchParam.limit > 0) {\n          total = total + 1;\n        }\n\n        self.paging.total = total;\n        self.paging.current = self.state.searchParam.index;\n        self.paging.currentInput = self.state.searchParam.index;\n        self.state.total_row = total_row;\n      } else {\n        self.setState({\n          dataList: [],\n          total_row: 0\n        });\n        self.paging.total = 0;\n        self.paging.current = 1;\n        self.paging.currentInput = 1;\n      }\n\n      self.forceUpdate();\n    });\n  }\n\n  inputChangedHandler(event) {\n    let self = this;\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (name === 'current') {\n      if (!Libs.isBlank(value)) {\n        var {\n          t\n        } = this.props;\n\n        if (!Libs.isNumber(value)) {\n          self.toast(t('common.page_is_number'), \"error\");\n          return;\n        }\n      }\n\n      self.paging.currentInput = value;\n      self.forceUpdate();\n    }\n\n    if (name === 'limit') {\n      var {\n        searchParam\n      } = this.state;\n      searchParam.limit = value;\n      this.setState({\n        searchParam: searchParam\n      }, () => {\n        self.getList();\n      });\n    }\n  }\n\n  inputChangedEnter(event) {\n    let self = this;\n\n    if (event.key === 'Enter') {\n      var currentInput = this.paging.currentInput;\n\n      if (!Libs.isBlank(currentInput)) {\n        var {\n          t\n        } = this.props;\n\n        if (!Libs.isNumber(currentInput)) {\n          self.toast(t('common.page_is_number'), \"error\");\n          return;\n        }\n      }\n\n      if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n\n      if (parseInt(currentInput) > this.paging.total) {\n        currentInput = self.paging.total;\n      }\n\n      if (currentInput <= 0) {\n        currentInput = 1;\n      }\n\n      self.paging.current = currentInput;\n      self.paging.currentInput = currentInput;\n      this.onSelectPage(currentInput);\n      self.forceUpdate();\n    }\n  }\n\n  inputChangedBlue(event) {\n    let self = this;\n    let target = event.target;\n    let name = target.name;\n\n    if (name === 'current') {\n      var currentInput = this.paging.currentInput;\n\n      if (!Libs.isBlank(currentInput)) {\n        var {\n          t\n        } = this.props;\n\n        if (!Libs.isNumber(currentInput)) {\n          self.toast(t('common.page_is_number'), \"error\");\n          return;\n        }\n      }\n\n      if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n\n      if (parseInt(currentInput) > this.paging.total) {\n        currentInput = self.paging.total;\n      }\n\n      if (currentInput <= 0) {\n        currentInput = 1;\n      }\n\n      self.paging.current = currentInput;\n      self.paging.currentInput = currentInput;\n      this.onSelectPage(currentInput);\n      self.forceUpdate();\n    }\n  }\n  /**\n   * @description Select page in pagging\n   * @author long.pham 09/05/2021\n   * @param {int} index\n   */\n\n\n  onSelectPage(index) {\n    let self = this;\n    self.state.searchParam.index = index;\n\n    if (index > 0) {\n      self.state.searchParam.offset = (index - 1) * self.state.searchParam.limit;\n    } else {\n      self.state.searchParam.offset = 0;\n    }\n\n    self.getList();\n  }\n  /**\n   * @description reload data\n   * @author long.pham 09/05/2021\n   * @param {int} index\n   */\n\n\n  onClickReload() {\n    let self = this;\n    self.getList();\n  }\n  /**\n  * Func filter table\n  * @author Long.Pham 12-05-2021\n  * @param  {Object} e\n  */\n\n\n  onSort(event, sortKey) {\n    this.state.searchParam.sort_column = sortKey;\n    this.state.searchParam.order_by = this.state.searchParam.order_by === '' || this.state.searchParam.order_by === 'asc' ? 'desc' : 'asc';\n    this.getList();\n  }\n  /**\n    * @description Call form search\n    * @author Long.Pham 12/05/2021\n    */\n\n\n  onSearch() {\n    let formSearch = this.state.formSearch === false ? true : false;\n    this.setState({\n      formSearch: formSearch\n    });\n  }\n\n  onResetSearch() {\n    let self = this;\n    let searchParam = this.state.searchParam;\n    searchParam.name = null;\n    searchParam.id = null;\n    searchParam.index = 1;\n    searchParam.offset = 0;\n    self.paging.current = 1;\n    self.paging.currentInput = 1;\n    self.paging.total = 1;\n    self.setState({\n      searchParam: searchParam\n    }, () => {\n      self.getList();\n    });\n  }\n  /**\n   * Func search\n   * @author Long.Pham 12/05/2021\n   * @param  {Object} e\n   */\n\n\n  handleSearch() {\n    this.getList();\n  }\n\n  render() {\n    return this.jsxTemplate.call(this);\n  }\n\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(DashBoard);\nexport default HighOrderComponentTranslated;","map":{"version":3,"sources":["/Volumes/Data/sources/solarmon_production/solarmon_frontend/src/containers/views/desktop/ModuleProject/Dashboard/DashBoard.js"],"names":["DashBoardJsx","MapViewJsx","BaseComponent","Libs","withTranslation","ClientProjectService","DashBoard","constructor","props","context","onClickChangeMode","mode","self","setState","jsxTemplate","getTemplate","forceUpdate","handleMouseOver","marker","event","showInfoWindow","handleMouseExit","onMouseoverMarker","showIconHover","mouseMoveOutOfMarker","state","curItem","dataList","dataListSummary","searchParam","limit","offset","index","formSearch","paging","total","current","currentInput","inputChangedHandler","bind","inputChangedEnter","inputChangedBlue","componentDidMount","getList","modView","params","id_language","employee","id_employee","type","instance","getListProjectByEmplpyee","data","total_row","isArrayData","parseInt","target","name","value","isBlank","t","isNumber","toast","key","onSelectPage","onClickReload","onSort","sortKey","sort_column","order_by","onSearch","onResetSearch","id","handleSearch","render","call","HighOrderComponentTranslated"],"mappings":"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","sourcesContent":["import DashBoardJsx from './DashBoard.jsx';\nimport MapViewJsx from './MapView.jsx';\nimport BaseComponent from '../../../../BaseComponent';\nimport Libs from '../../../../../utils/Libs';\nimport { withTranslation } from 'react-i18next';\nimport ClientProjectService from '../../../../../services/ClientProjectService';\n\nclass DashBoard extends BaseComponent {\n\n    constructor(props, context) {\n        super(props, context);\n        \n        this.state = {\n            curItem: {},\n            showInfoWindow: false,\n            showIconHover: false,\n            mode: 'grid',\n            dataList: [],\n            dataListSummary: [],\n            searchParam: {\n                limit: 16,\n                offset: 0,\n                index: 1,\n            },\n            formSearch: false\n        };\n\n        this.paging = {\n            total: 0,\n            current: 1,\n            currentInput: 1\n        };\n\n        this.jsxTemplate = this.getTemplate();\n\n        this.inputChangedHandler = this.inputChangedHandler.bind(this);\n        this.inputChangedEnter = this.inputChangedEnter.bind(this);\n        this.inputChangedBlue = this.inputChangedBlue.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.getList();\n    }\n\n    onClickChangeMode = (mode) => {\n        var self = this;\n        this.setState({\n            mode: mode\n        }, () => {\n            self.jsxTemplate = self.getTemplate();\n            self.forceUpdate();\n        });\n    }\n\n    handleMouseOver = (marker, event) => {\n        this.setState({\n          showInfoWindow: marker\n        });\n      };\n      handleMouseExit = (marker, event) => {\n        this.setState({\n          showInfoWindow: false\n        });\n      };\n    \n      onMouseoverMarker = (marker, event) => {\n        this.setState({\n          showIconHover: marker\n        });\n      };\n    \n      mouseMoveOutOfMarker = (marker, event) => {\n        this.setState({\n          showIconHover: false\n        });\n      };\n\n    getTemplate() {\n        let modView = this.state.mode;\n        switch (modView) {\n          case 'map':\n            return MapViewJsx;\n          default:\n            return DashBoardJsx;\n        }\n      }\n\n    /**\n     * get list\n     * @author Long.Pham 2019-06-03\n     */\n    getList() {\n        let self = this;\n        let params = this.state.searchParam;\n        params.id_language = this.employee.id_language;\n        params.id_employee = this.employee.id_employee;\n        params.type = 'customer';\n\n        ClientProjectService.instance.getListProjectByEmplpyee(params, (data, total_row) => {\n\n            if (Libs.isArrayData(data)) {\n                self.setState({\n                    dataList: data\n                });\n\n                var total = parseInt(total_row / self.state.searchParam.limit);\n                if (total_row % self.state.searchParam.limit > 0) {\n                    total = total + 1;\n                }\n                self.paging.total = total;\n                self.paging.current = self.state.searchParam.index;\n                self.paging.currentInput = self.state.searchParam.index;\n                self.state.total_row = total_row;\n\n            } else {\n                self.setState({\n                    dataList: [],\n                    total_row: 0\n                });\n                self.paging.total = 0;\n                self.paging.current = 1;\n                self.paging.currentInput = 1;\n            }\n            self.forceUpdate();\n        });\n    }\n\n    inputChangedHandler(event) {\n        let self = this;\n        let target = event.target;\n        let name = target.name;\n        let value = target.value;\n        if (name === 'current') {\n            if (!Libs.isBlank(value)) {\n                var { t } = this.props;\n                if (!Libs.isNumber(value)) {\n                    self.toast(t('common.page_is_number'), \"error\");\n                    return;\n                }\n            }\n\n            self.paging.currentInput = value;\n            self.forceUpdate();\n        }\n\n        if (name === 'limit') {\n            var { searchParam } = this.state;\n            searchParam.limit = value;\n            this.setState({\n                searchParam: searchParam\n            }, () => {\n                self.getList();\n            })\n        }\n    }\n\n    inputChangedEnter(event) {\n        let self = this;\n        if (event.key === 'Enter') {\n            var currentInput = this.paging.currentInput;\n            if (!Libs.isBlank(currentInput)) {\n                var { t } = this.props;\n                if (!Libs.isNumber(currentInput)) {\n                    self.toast(t('common.page_is_number'), \"error\");\n                    return;\n                }\n            }\n\n            if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n            if (parseInt(currentInput) > this.paging.total) {\n                currentInput = self.paging.total;\n            }\n\n            if (currentInput <= 0) {\n                currentInput = 1;\n            }\n\n            self.paging.current = currentInput;\n            self.paging.currentInput = currentInput;\n            this.onSelectPage(currentInput);\n            self.forceUpdate();\n        }\n    }\n\n    inputChangedBlue(event) {\n        let self = this;\n        let target = event.target;\n        let name = target.name;\n        if (name === 'current') {\n            var currentInput = this.paging.currentInput;\n            if (!Libs.isBlank(currentInput)) {\n                var { t } = this.props;\n                if (!Libs.isNumber(currentInput)) {\n                    self.toast(t('common.page_is_number'), \"error\");\n                    return;\n                }\n            }\n\n            if (Libs.isBlank(currentInput) && !Libs.isNumber(currentInput)) return;\n            if (parseInt(currentInput) > this.paging.total) {\n                currentInput = self.paging.total;\n            }\n\n            if (currentInput <= 0) {\n                currentInput = 1;\n            }\n\n            self.paging.current = currentInput;\n            self.paging.currentInput = currentInput;\n            this.onSelectPage(currentInput);\n            self.forceUpdate();\n        }\n    }\n\n\n    /**\n     * @description Select page in pagging\n     * @author long.pham 09/05/2021\n     * @param {int} index\n     */\n    onSelectPage(index) {\n        let self = this;\n        self.state.searchParam.index = index;\n\n        if (index > 0) {\n            self.state.searchParam.offset = (index - 1) * self.state.searchParam.limit;\n        } else {\n            self.state.searchParam.offset = 0;\n        }\n        self.getList();\n    }\n\n\n    /**\n     * @description reload data\n     * @author long.pham 09/05/2021\n     * @param {int} index\n     */\n    onClickReload() {\n        let self = this;\n        self.getList();\n    }\n\n\n    /**\n    * Func filter table\n    * @author Long.Pham 12-05-2021\n    * @param  {Object} e\n    */\n\n    onSort(event, sortKey) {\n        this.state.searchParam.sort_column = sortKey;\n        this.state.searchParam.order_by = (this.state.searchParam.order_by === '' || this.state.searchParam.order_by === 'asc') ? 'desc' : 'asc';\n        this.getList();\n    }\n\n   /**\n     * @description Call form search\n     * @author Long.Pham 12/05/2021\n     */\n    onSearch() {\n        let formSearch = (this.state.formSearch === false) ? true : false;\n        this.setState({\n            formSearch: formSearch\n        });\n    }\n\n    onResetSearch() {\n        let self = this;\n        let searchParam = this.state.searchParam;\n        searchParam.name = null;\n        searchParam.id = null;\n        searchParam.index = 1;\n        searchParam.offset = 0;\n        self.paging.current = 1;\n        self.paging.currentInput = 1;\n        self.paging.total = 1;\n        self.setState({\n            searchParam: searchParam\n        }, () => {\n            self.getList();\n        });\n    }\n\n    /**\n     * Func search\n     * @author Long.Pham 12/05/2021\n     * @param  {Object} e\n     */\n    handleSearch() {\n        this.getList();\n    }\n\n    render() {\n        return this.jsxTemplate.call(this)\n    }\n}\n\nconst HighOrderComponentTranslated = withTranslation('common')(DashBoard)\nexport default HighOrderComponentTranslated;"]},"metadata":{},"sourceType":"module"}