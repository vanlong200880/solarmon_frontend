{"ast":null,"code":"/**\n * 数字相关\n * @author ydr.me\n * @create 2015-05-11 13:54\n */ /**\n * @module utils/number\n * @reuqires utils/typeis\n */var typeis=require('./typeis.js');var dato=require('./dato.js');var REG_FORMAT={3:/(\\d)(?=(\\d{3})+$)/g};// k,m,g,t,p\n// @ref http://searchstorage.techtarget.com/definition/Kilo-mega-giga-tera-peta-and-all-that\nvar abbrSuffix=['','K','M','G','T','P','E','Z','Y'];// var REG_BEGIN_0 = /^0+/;\nvar str62='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';var map62={};dato.repeat(62,function(index){map62[str62[index]]=index;});/**\n * 整数化\n * @param num {*} 待转换对象\n * @param [dftNum=0] {*} 当为 NaN 时的默认值\n * @returns {*}\n */exports.parseInt=function(num,dftNum){dftNum=dftNum||0;num=parseInt(num,10);return typeis.nan(num)?dftNum:num;};/**\n * 浮点化\n * @param num {*} 待转换对象\n * @param [dftNum=0] {*} 当为 NaN 时的默认值\n * @returns {*}\n */exports.parseFloat=function(num,dftNum){dftNum=dftNum||0;num=parseFloat(num);return typeis.nan(num)?dftNum:num;};/**\n * 数字格式化\n * @param num {String|Number} 数字（字符串）\n * @param [separator=\",\"] {String} 分隔符\n * @param [splitLength=3] {Number} 分隔长度\n * @returns {string} 分割后的字符串\n * @example\n * number.format(123456.789);\n * // => \"123,456.789\"\n * number.format(123456.789, '-');\n * // => \"123-456.789\"\n */exports.format=function(num,separator,splitLength){if(typeis.number(separator)){splitLength=separator;separator=',';}else{separator=separator||',';splitLength=splitLength||3;}var reg=REG_FORMAT[splitLength];if(!reg){// /(\\d)(?=(\\d{3})+$)/g\nreg=REG_FORMAT[splitLength]=new RegExp('(\\\\d)(?=(\\\\d{'+splitLength+'})+$)','g');}var arr=String(num).split('.');var p1=arr[0].replace(reg,'$1'+separator);return p1+(arr[1]?'.'+arr[1]:'');};/**\n * 数字缩写\n * @param num {Number} 数值\n * @param [fixedLength=0] {Number} 修正长度\n * @param [step=1000] {Number} 步长\n * @returns {*}\n * @example\n * number.abbr(123456.789);\n * // => \"123k\"\n * number.abbr(123456.789, 2);\n * // => \"123.46k\"\n */exports.abbr=function(num,fixedLength,step){if(num<1){return num;}// 123.321 => 123\nnum=exports.parseInt(num,0);fixedLength=fixedLength||0;step=step||1000;var i=0;var j=abbrSuffix.length;while(num>=step&&++i<j){num=num/step;}if(i===j){i=j-1;}return exports.format(num.toFixed(fixedLength))+abbrSuffix[i];};///**\n// * 比较两个长整型数值\n// * @param long1 {String|Number} 长整型数值字符串1\n// * @param long2 {String|Number} 长整型数值字符串2\n// * @param [operator=\">\"] {String} 比较操作符，默认比较 long1 > long2\n// * @returns {*}\n// * @example\n// * number.than('9999999999999999999999999999999999999999', '9999999999999999999999999999999999999998');\n// * // => true\n// */\n//exports.than = function (long1, long2, operator) {\n//    operator = operator || '>';\n//    long1 = String(long1).replace(REG_BEGIN_0, '');\n//    long2 = String(long2).replace(REG_BEGIN_0, '');\n//\n//    // 1. 比较长度\n//    if (long1.length > long2.length) {\n//        return operator === '>';\n//    } else if (long1.length < long2.length) {\n//        return operator === '<';\n//    }\n//\n//    // 15位是安全值\n//    var long1List = exports.format(long1, ',', 15).split(',');\n//    var long2List = exports.format(long2, ',', 15).split(',');\n//\n//    // 2. 遍历比较\n//    var ret = false;\n//\n//    long1List.forEach(function (number1, index) {\n//        var number2 = long2List[index];\n//\n//        if (number1 > number2) {\n//            ret = operator === '>';\n//            return false;\n//        } else if (number1 < number2) {\n//            ret = operator === '<';\n//            return false;\n//        }\n//    });\n//\n//    return ret;\n//};\n/**\n * 获取六十二进制数值\n * @param number10\n * @returns {String}\n */exports.to62=function(number10){var ret=[];var _cal=function _cal(){var y=number10%62;number10=exports.parseInt(number10/62);ret.unshift(str62[y]);if(number10){_cal();}};_cal();return ret.join('');};/**\n * 六十二进制转换为十进制\n * @param number62\n * @returns {number}\n */exports.from62=function(number62){var ret=0;var len=number62.length;dato.repeat(len,function(index){var pos62=number62[index];var pos10=map62[pos62];ret+=pos10*Math.pow(62,len-index-1);});return ret;};","map":{"version":3,"sources":["/Volumes/Data/sources/solars/frontend/src/validator/libs/number.js"],"names":["typeis","require","dato","REG_FORMAT","abbrSuffix","str62","map62","repeat","index","exports","parseInt","num","dftNum","nan","parseFloat","format","separator","splitLength","number","reg","RegExp","arr","String","split","p1","replace","abbr","fixedLength","step","i","j","length","toFixed","to62","number10","ret","_cal","y","unshift","join","from62","number62","len","pos62","pos10","Math","pow"],"mappings":"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","sourcesContent":["/**\n * 数字相关\n * @author ydr.me\n * @create 2015-05-11 13:54\n */\n\n\n/**\n * @module utils/number\n * @reuqires utils/typeis\n */\n\n\nvar typeis = require('./typeis.js');\nvar dato = require('./dato.js');\n\nvar REG_FORMAT = {\n    3: /(\\d)(?=(\\d{3})+$)/g\n};\n// k,m,g,t,p\n// @ref http://searchstorage.techtarget.com/definition/Kilo-mega-giga-tera-peta-and-all-that\nvar abbrSuffix = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n// var REG_BEGIN_0 = /^0+/;\nvar str62 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\nvar map62 = {};\n\ndato.repeat(62, function (index) {\n    map62[str62[index]] = index;\n});\n\n/**\n * 整数化\n * @param num {*} 待转换对象\n * @param [dftNum=0] {*} 当为 NaN 时的默认值\n * @returns {*}\n */\nexports.parseInt = function (num, dftNum) {\n    dftNum = dftNum || 0;\n    num = parseInt(num, 10);\n\n    return typeis.nan(num) ? dftNum : num;\n};\n\n\n/**\n * 浮点化\n * @param num {*} 待转换对象\n * @param [dftNum=0] {*} 当为 NaN 时的默认值\n * @returns {*}\n */\nexports.parseFloat = function (num, dftNum) {\n    dftNum = dftNum || 0;\n    num = parseFloat(num);\n\n    return typeis.nan(num) ? dftNum : num;\n};\n\n\n/**\n * 数字格式化\n * @param num {String|Number} 数字（字符串）\n * @param [separator=\",\"] {String} 分隔符\n * @param [splitLength=3] {Number} 分隔长度\n * @returns {string} 分割后的字符串\n * @example\n * number.format(123456.789);\n * // => \"123,456.789\"\n * number.format(123456.789, '-');\n * // => \"123-456.789\"\n */\nexports.format = function (num, separator, splitLength) {\n    if (typeis.number(separator)) {\n        splitLength = separator;\n        separator = ',';\n    } else {\n        separator = separator || ',';\n        splitLength = splitLength || 3;\n    }\n\n    var reg = REG_FORMAT[splitLength];\n\n    if (!reg) {\n        // /(\\d)(?=(\\d{3})+$)/g\n        reg = REG_FORMAT[splitLength] = new RegExp('(\\\\d)(?=(\\\\d{' + splitLength + '})+$)', 'g');\n    }\n\n    var arr = String(num).split('.');\n    var p1 = arr[0].replace(reg, '$1' + separator);\n\n    return p1 + (arr[1] ? '.' + arr[1] : '');\n};\n\n\n/**\n * 数字缩写\n * @param num {Number} 数值\n * @param [fixedLength=0] {Number} 修正长度\n * @param [step=1000] {Number} 步长\n * @returns {*}\n * @example\n * number.abbr(123456.789);\n * // => \"123k\"\n * number.abbr(123456.789, 2);\n * // => \"123.46k\"\n */\nexports.abbr = function (num, fixedLength, step) {\n    if (num < 1) {\n        return num;\n    }\n\n    // 123.321 => 123\n    num = exports.parseInt(num, 0);\n    fixedLength = fixedLength || 0;\n    step = step || 1000;\n\n    var i = 0;\n    var j = abbrSuffix.length;\n\n    while (num >= step && ++i < j) {\n        num = num / step;\n    }\n\n    if (i === j) {\n        i = j - 1;\n    }\n\n    return exports.format(num.toFixed(fixedLength)) + abbrSuffix[i];\n};\n\n\n///**\n// * 比较两个长整型数值\n// * @param long1 {String|Number} 长整型数值字符串1\n// * @param long2 {String|Number} 长整型数值字符串2\n// * @param [operator=\">\"] {String} 比较操作符，默认比较 long1 > long2\n// * @returns {*}\n// * @example\n// * number.than('9999999999999999999999999999999999999999', '9999999999999999999999999999999999999998');\n// * // => true\n// */\n//exports.than = function (long1, long2, operator) {\n//    operator = operator || '>';\n//    long1 = String(long1).replace(REG_BEGIN_0, '');\n//    long2 = String(long2).replace(REG_BEGIN_0, '');\n//\n//    // 1. 比较长度\n//    if (long1.length > long2.length) {\n//        return operator === '>';\n//    } else if (long1.length < long2.length) {\n//        return operator === '<';\n//    }\n//\n//    // 15位是安全值\n//    var long1List = exports.format(long1, ',', 15).split(',');\n//    var long2List = exports.format(long2, ',', 15).split(',');\n//\n//    // 2. 遍历比较\n//    var ret = false;\n//\n//    long1List.forEach(function (number1, index) {\n//        var number2 = long2List[index];\n//\n//        if (number1 > number2) {\n//            ret = operator === '>';\n//            return false;\n//        } else if (number1 < number2) {\n//            ret = operator === '<';\n//            return false;\n//        }\n//    });\n//\n//    return ret;\n//};\n\n\n/**\n * 获取六十二进制数值\n * @param number10\n * @returns {String}\n */\nexports.to62 = function (number10) {\n    var ret = [];\n\n    var _cal = function () {\n        var y = number10 % 62;\n\n        number10 = exports.parseInt(number10 / 62);\n        ret.unshift(str62[y]);\n\n        if (number10) {\n            _cal();\n        }\n    };\n\n    _cal();\n    return ret.join('');\n};\n\n\n/**\n * 六十二进制转换为十进制\n * @param number62\n * @returns {number}\n */\nexports.from62 = function (number62) {\n    var ret = 0;\n    var len = number62.length;\n\n    dato.repeat(len, function (index) {\n        var pos62 = number62[index];\n        var pos10 = map62[pos62];\n\n        ret += pos10 * Math.pow(62, len - index - 1);\n    });\n\n    return ret;\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}